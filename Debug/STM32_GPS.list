
STM32_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b2c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006c70  08006c70  00016c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007068  08007068  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007068  08007068  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007068  08007068  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e0  0800724c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800724c  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009028  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa0  00000000  00000000  0002922d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002b420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160cf  00000000  00000000  0002ba88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007650  00000000  00000000  00041b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084a6a  00000000  00000000  000491a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdc11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000cdc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08006c54 	.word	0x08006c54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08006c54 	.word	0x08006c54

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002e2:	f1a4 0401 	sub.w	r4, r4, #1
 80002e6:	d1e9      	bne.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_GPIO_Init+0xd0>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	481b      	ldr	r0, [pc, #108]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c12:	f001 f84b 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	21c0      	movs	r1, #192	; 0xc0
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <MX_GPIO_Init+0xd8>)
 8000c1c:	f001 f846 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_GPIO_Init+0xd4>)
 8000c3a:	f000 feb9 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_GPIO_Init+0xe0>)
 8000c52:	f000 fead 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c56:	23c0      	movs	r3, #192	; 0xc0
 8000c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_GPIO_Init+0xd8>)
 8000c6e:	f000 fe9f 	bl	80019b0 <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020400 	.word	0x40020400
 8000c88:	10120000 	.word	0x10120000
 8000c8c:	40020000 	.word	0x40020000

08000c90 <strtoke>:
#include "usart.h"
#include "stdio.h"
#include "string.h"

char* strtoke(char *str, const char *delim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <strtoke+0x1a>
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <strtoke+0x60>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <strtoke+0x60>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <strtoke+0x26>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e017      	b.n	8000ce6 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <strtoke+0x60>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <strtoke+0x60>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 f8a6 	bl	8003e14 <strpbrk>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <strtoke+0x60>)
 8000ccc:	601a      	str	r2, [r3, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <strtoke+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <strtoke+0x54>
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <strtoke+0x60>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <strtoke+0x60>)
 8000cde:	600a      	str	r2, [r1, #0]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001fc 	.word	0x200001fc

08000cf4 <receiveChar>:
	HAL_UART_Transmit(&huart2, clear_terminal, sizeof(clear_terminal)/sizeof(uint8_t), 10);

}


void receiveChar(struct gps_state * state, char recv_char) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
	if (state->writer_position == 0 && recv_char == '$') {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d117      	bne.n	8000d3a <receiveChar+0x46>
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	2b24      	cmp	r3, #36	; 0x24
 8000d0e:	d114      	bne.n	8000d3a <receiveChar+0x46>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	482e      	ldr	r0, [pc, #184]	; (8000dcc <receiveChar+0xd8>)
 8000d14:	f000 ffe2 	bl	8001cdc <HAL_GPIO_TogglePin>
		state->output_buffer[state->writer_position] = recv_char;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	711a      	strb	r2, [r3, #4]
		state->writer_position++;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8000d38:	e044      	b.n	8000dc4 <receiveChar+0xd0>
	} else if (state->writer_position >= 1 && state->writer_position < GPS_BUFFER_SIZE - 1) {
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d03b      	beq.n	8000dbc <receiveChar+0xc8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d4a:	2b7e      	cmp	r3, #126	; 0x7e
 8000d4c:	d836      	bhi.n	8000dbc <receiveChar+0xc8>
		if (recv_char == '\r' || recv_char == '\n') {
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	2b0d      	cmp	r3, #13
 8000d52:	d002      	beq.n	8000d5a <receiveChar+0x66>
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d11f      	bne.n	8000d9a <receiveChar+0xa6>
			state->output_buffer[state->writer_position] = '\r';
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d60:	461a      	mov	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	220d      	movs	r2, #13
 8000d68:	711a      	strb	r2, [r3, #4]
			state->writer_position++;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			state->output_buffer[state->writer_position] = '\n';
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	220a      	movs	r2, #10
 8000d88:	711a      	strb	r2, [r3, #4]
			ParseLine(state);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f820 	bl	8000dd0 <ParseLine>
			state->writer_position = 0;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		if (recv_char == '\r' || recv_char == '\n') {
 8000d98:	e014      	b.n	8000dc4 <receiveChar+0xd0>
		} else {
			state->output_buffer[state->writer_position] = recv_char;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	711a      	strb	r2, [r3, #4]
			state->writer_position++;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		if (recv_char == '\r' || recv_char == '\n') {
 8000dba:	e003      	b.n	8000dc4 <receiveChar+0xd0>
		}
	} else {
		state->writer_position = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <ParseLine>:

void ParseLine(struct gps_state * state)
{
 8000dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dd4:	b09f      	sub	sp, #124	; 0x7c
 8000dd6:	af0a      	add	r7, sp, #40	; 0x28
 8000dd8:	6078      	str	r0, [r7, #4]
char* ParsePoiner = strtoke((char*)state->output_buffer, ",");
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	4936      	ldr	r1, [pc, #216]	; (8000eb8 <ParseLine+0xe8>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff55 	bl	8000c90 <strtoke>
 8000de6:	64f8      	str	r0, [r7, #76]	; 0x4c
uint8_t Message[64];
uint8_t MessageLength;

if(strcmp(ParsePoiner, "$GPRMC") == 0)
 8000de8:	4934      	ldr	r1, [pc, #208]	; (8000ebc <ParseLine+0xec>)
 8000dea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000dec:	f7ff f9c8 	bl	8000180 <strcmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <ParseLine+0x2e>
	{
	parseRMC(state);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f86c 	bl	8000ed4 <parseRMC>
 8000dfc:	e015      	b.n	8000e2a <ParseLine+0x5a>
	//HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
	}
else if(strcmp(ParsePoiner, "$GPVTG") == 0)
 8000dfe:	4930      	ldr	r1, [pc, #192]	; (8000ec0 <ParseLine+0xf0>)
 8000e00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e02:	f7ff f9bd 	bl	8000180 <strcmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00e      	beq.n	8000e2a <ParseLine+0x5a>
	{
	//parseVTG(state);
	//MessageLength = sprintf((char*)Message, "Speed: %.2f knots, %f km/h\n\r", state->speedKnots, state->speedKilometers);
	//HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
	}
else if(strcmp(ParsePoiner, "$GPGGA") == 0)
 8000e0c:	492d      	ldr	r1, [pc, #180]	; (8000ec4 <ParseLine+0xf4>)
 8000e0e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e10:	f7ff f9b6 	bl	8000180 <strcmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <ParseLine+0x52>
	{
	parseGGA(state);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f8ce 	bl	8000fbc <parseGGA>
 8000e20:	e003      	b.n	8000e2a <ParseLine+0x5a>
//	MessageLength = sprintf((char*)Message, "%02d:%02d:%02d;%02d.%02d.20%02d;%.2f;%.2f;%d\n\r", state->hour, state->minute, state->second, state->day, state->month, state->year, state->latitude, state->longitude, state->satelitesNumber);
	}
else if(strcmp(ParsePoiner, "$GPGLL") == 0)
 8000e22:	4929      	ldr	r1, [pc, #164]	; (8000ec8 <ParseLine+0xf8>)
 8000e24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e26:	f7ff f9ab 	bl	8000180 <strcmp>
	{
	//parseGLL(state);
	//MessageLength = sprintf((char*)Message, "GLL;%02d:%02d:%02d;%02d.%02d.20%02d;%.2f;%.2f\n\r", state->hour, state->minute, state->second, state->day, state->month, state->year, state->latitude, state->longitude);
	//HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
	}
MessageLength = sprintf((char*)Message, "%02d:%02d:%02d;%02d.%02d.20%02d;%.2f;%.2f;%d\n\r", state->hour, state->minute, state->second, state->day, state->month, state->year, state->latitude, state->longitude, state->satelitesNumber);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000e30:	469c      	mov	ip, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e38:	469e      	mov	lr, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e40:	461d      	mov	r5, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000e48:	461e      	mov	r6, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8000e58:	4619      	mov	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8000e60:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	e9d2 8928 	ldrd	r8, r9, [r2, #160]	; 0xa0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
 8000e70:	4602      	mov	r2, r0
 8000e72:	f107 0008 	add.w	r0, r7, #8
 8000e76:	9208      	str	r2, [sp, #32]
 8000e78:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000e7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8000e80:	9103      	str	r1, [sp, #12]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	9601      	str	r6, [sp, #4]
 8000e88:	9500      	str	r5, [sp, #0]
 8000e8a:	4673      	mov	r3, lr
 8000e8c:	4662      	mov	r2, ip
 8000e8e:	490f      	ldr	r1, [pc, #60]	; (8000ecc <ParseLine+0xfc>)
 8000e90:	f002 ffa0 	bl	8003dd4 <siprintf>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
HAL_UART_Transmit_IT(&huart2, Message, MessageLength);
 8000e9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <ParseLine+0x100>)
 8000ea8:	f001 fccd 	bl	8002846 <HAL_UART_Transmit_IT>
}
 8000eac:	bf00      	nop
 8000eae:	3754      	adds	r7, #84	; 0x54
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08006d3c 	.word	0x08006d3c
 8000ebc:	08006d40 	.word	0x08006d40
 8000ec0:	08006d48 	.word	0x08006d48
 8000ec4:	08006d50 	.word	0x08006d50
 8000ec8:	08006d58 	.word	0x08006d58
 8000ecc:	08006d60 	.word	0x08006d60
 8000ed0:	20000340 	.word	0x20000340

08000ed4 <parseRMC>:

void parseRMC(struct gps_state * state)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	char *ParsePoiner;
	uint32_t Temp;

	ParsePoiner = strtoke(NULL, ",");
 8000edc:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <parseRMC+0xdc>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fed6 	bl	8000c90 <strtoke>
 8000ee4:	60f8      	str	r0, [r7, #12]
	//	state->second = Temp % 100;
	//	state->minute = (Temp / 100) % 100;
	//	state->hour = (Temp / 10000) % 100;
	//}

	ParsePoiner = strtoke(NULL, ",");
 8000ee6:	4932      	ldr	r1, [pc, #200]	; (8000fb0 <parseRMC+0xdc>)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fed1 	bl	8000c90 <strtoke>
 8000eee:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8000ef0:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <parseRMC+0xdc>)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fecc 	bl	8000c90 <strtoke>
 8000ef8:	60f8      	str	r0, [r7, #12]
	//if(strlen(ParsePoiner) > 0)
	//{
	//	state->latitude = atof(ParsePoiner);
	//}
	ParsePoiner = strtoke(NULL, ",");
 8000efa:	492d      	ldr	r1, [pc, #180]	; (8000fb0 <parseRMC+0xdc>)
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fec7 	bl	8000c90 <strtoke>
 8000f02:	60f8      	str	r0, [r7, #12]
	//if(strlen(ParsePoiner) > 0)
	//{
	//	state->latitudeDirection = *ParsePoiner;
	//}
	ParsePoiner = strtoke(NULL, ",");
 8000f04:	492a      	ldr	r1, [pc, #168]	; (8000fb0 <parseRMC+0xdc>)
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fec2 	bl	8000c90 <strtoke>
 8000f0c:	60f8      	str	r0, [r7, #12]
	//if(strlen(ParsePoiner) > 0)
	//{
	//	state->longitude = atof(ParsePoiner);
	//}
	ParsePoiner = strtoke(NULL, ",");
 8000f0e:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <parseRMC+0xdc>)
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff febd 	bl	8000c90 <strtoke>
 8000f16:	60f8      	str	r0, [r7, #12]
	//if(strlen(ParsePoiner) > 0)
	//{
	//	state->longitudeDirection = *ParsePoiner;
	//}
	ParsePoiner = strtoke(NULL, ",");
 8000f18:	4925      	ldr	r1, [pc, #148]	; (8000fb0 <parseRMC+0xdc>)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff feb8 	bl	8000c90 <strtoke>
 8000f20:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8000f22:	4923      	ldr	r1, [pc, #140]	; (8000fb0 <parseRMC+0xdc>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff feb3 	bl	8000c90 <strtoke>
 8000f2a:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8000f2c:	4920      	ldr	r1, [pc, #128]	; (8000fb0 <parseRMC+0xdc>)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff feae 	bl	8000c90 <strtoke>
 8000f34:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d033      	beq.n	8000fa6 <parseRMC+0xd2>
	{
		Temp = atoi(ParsePoiner);
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f002 f8d3 	bl	80030ea <atoi>
 8000f44:	4603      	mov	r3, r0
 8000f46:	60bb      	str	r3, [r7, #8]
		state->year = Temp % 100;
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <parseRMC+0xe0>)
 8000f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	2164      	movs	r1, #100	; 0x64
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		state->month = (Temp/100) % 100;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <parseRMC+0xe0>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	095a      	lsrs	r2, r3, #5
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <parseRMC+0xe0>)
 8000f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2164      	movs	r1, #100	; 0x64
 8000f76:	fb01 f303 	mul.w	r3, r1, r3
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		state->day = (Temp/10000) % 100;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <parseRMC+0xe4>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0b5a      	lsrs	r2, r3, #13
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <parseRMC+0xe0>)
 8000f90:	fba3 1302 	umull	r1, r3, r3, r2
 8000f94:	095b      	lsrs	r3, r3, #5
 8000f96:	2164      	movs	r1, #100	; 0x64
 8000f98:	fb01 f303 	mul.w	r3, r1, r3
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08006d3c 	.word	0x08006d3c
 8000fb4:	51eb851f 	.word	0x51eb851f
 8000fb8:	d1b71759 	.word	0xd1b71759

08000fbc <parseGGA>:
	}
}


void parseGGA(struct gps_state * state)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	char *ParsePoiner;
	uint32_t Temp;

	ParsePoiner = strtoke(NULL, ",");
 8000fc4:	495b      	ldr	r1, [pc, #364]	; (8001134 <parseGGA+0x178>)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fe62 	bl	8000c90 <strtoke>
 8000fcc:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d033      	beq.n	800103e <parseGGA+0x82>
	{
		Temp = atoi(ParsePoiner);
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f002 f887 	bl	80030ea <atoi>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60bb      	str	r3, [r7, #8]
		state->second = Temp % 100;
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <parseGGA+0x17c>)
 8000fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	2164      	movs	r1, #100	; 0x64
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		state->minute = (Temp / 100) % 100;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <parseGGA+0x17c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	095a      	lsrs	r2, r3, #5
 8001004:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <parseGGA+0x17c>)
 8001006:	fba3 1302 	umull	r1, r3, r3, r2
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2164      	movs	r1, #100	; 0x64
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		state->hour = (Temp / 10000) % 100;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4a47      	ldr	r2, [pc, #284]	; (800113c <parseGGA+0x180>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0b5a      	lsrs	r2, r3, #13
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <parseGGA+0x17c>)
 8001028:	fba3 1302 	umull	r1, r3, r3, r2
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	2164      	movs	r1, #100	; 0x64
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}
	ParsePoiner = strtoke(NULL, ",");
 800103e:	493d      	ldr	r1, [pc, #244]	; (8001134 <parseGGA+0x178>)
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fe25 	bl	8000c90 <strtoke>
 8001046:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <parseGGA+0xa4>
	{
		state->latitude = atof(ParsePoiner);
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f002 f847 	bl	80030e4 <atof>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	}
	ParsePoiner = strtoke(NULL, ",");
 8001060:	4934      	ldr	r1, [pc, #208]	; (8001134 <parseGGA+0x178>)
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fe14 	bl	8000c90 <strtoke>
 8001068:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <parseGGA+0xc0>
	{
		state->latitudeDirection = *ParsePoiner;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	}
	ParsePoiner = strtoke(NULL, ",");
 800107c:	492d      	ldr	r1, [pc, #180]	; (8001134 <parseGGA+0x178>)
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fe06 	bl	8000c90 <strtoke>
 8001084:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <parseGGA+0xe2>
	{
		state->longitude = atof(ParsePoiner);
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f002 f828 	bl	80030e4 <atof>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	}
	ParsePoiner = strtoke(NULL, ",");
 800109e:	4925      	ldr	r1, [pc, #148]	; (8001134 <parseGGA+0x178>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fdf5 	bl	8000c90 <strtoke>
 80010a6:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <parseGGA+0xfe>
	{
		state->longitudeDirection = *ParsePoiner;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	ParsePoiner = strtoke(NULL, ",");
 80010ba:	491e      	ldr	r1, [pc, #120]	; (8001134 <parseGGA+0x178>)
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fde7 	bl	8000c90 <strtoke>
 80010c2:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <parseGGA+0x120>
	{
		state->quality = atoi(ParsePoiner);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f002 f80c 	bl	80030ea <atoi>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	}
	ParsePoiner = strtoke(NULL, ",");
 80010dc:	4915      	ldr	r1, [pc, #84]	; (8001134 <parseGGA+0x178>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fdd6 	bl	8000c90 <strtoke>
 80010e4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <parseGGA+0x142>
	{
		state->satelitesNumber = atoi(ParsePoiner);
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f001 fffb 	bl	80030ea <atoi>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
	ParsePoiner = strtoke(NULL, ",");
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <parseGGA+0x178>)
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fdc5 	bl	8000c90 <strtoke>
 8001106:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001108:	490a      	ldr	r1, [pc, #40]	; (8001134 <parseGGA+0x178>)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fdc0 	bl	8000c90 <strtoke>
 8001110:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <parseGGA+0x16e>
	{
		state->altitude = atof(ParsePoiner);
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 ffe2 	bl	80030e4 <atof>
 8001120:	4603      	mov	r3, r0
 8001122:	460c      	mov	r4, r1
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	}
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	08006d3c 	.word	0x08006d3c
 8001138:	51eb851f 	.word	0x51eb851f
 800113c:	d1b71759 	.word	0xd1b71759

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fa55 	bl	80015f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f818 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f7ff fd2e 	bl	8000bac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f952 	bl	80013f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001154:	f000 f97a 	bl	800144c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configureUblox();
 // gps_handle = gps_init(&huart1);
  //HAL_UART_Receive_IT(&huart1, &recv_char, 1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <main+0x38>)
 800115e:	f000 fda5 	bl	8001cac <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001166:	f000 fab3 	bl	80016d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	4802      	ldr	r0, [pc, #8]	; (8001178 <main+0x38>)
 8001170:	f000 fd9c 	bl	8001cac <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x34>
 8001176:	bf00      	nop
 8001178:	40020400 	.word	0x40020400

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b092      	sub	sp, #72	; 0x48
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2234      	movs	r2, #52	; 0x34
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f001 ffe7 	bl	800315e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <SystemClock_Config+0x98>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80011a6:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <SystemClock_Config+0x98>)
 80011a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ac:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2310      	movs	r3, #16
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011be:	2300      	movs	r3, #0
 80011c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fd9c 	bl	8001d10 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011de:	f000 f839 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2303      	movs	r3, #3
 80011e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f8b8 	bl	8002370 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001206:	f000 f825 	bl	8001254 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3748      	adds	r7, #72	; 0x48
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40007000 	.word	0x40007000

08001218 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * uart) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	if (uart == &huart1) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_UART_RxCpltCallback+0x30>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d10a      	bne.n	800123e <HAL_UART_RxCpltCallback+0x26>
		receiveChar(&gps_handle, recv_char);
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_UART_RxCpltCallback+0x34>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_RxCpltCallback+0x38>)
 8001230:	f7ff fd60 	bl	8000cf4 <receiveChar>
		HAL_UART_Receive_IT(&huart1, &recv_char, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	4905      	ldr	r1, [pc, #20]	; (800124c <HAL_UART_RxCpltCallback+0x34>)
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <HAL_UART_RxCpltCallback+0x30>)
 800123a:	f001 fb48 	bl	80028ce <HAL_UART_Receive_IT>
	}
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000300 	.word	0x20000300
 800124c:	20000210 	.word	0x20000210
 8001250:	20000218 	.word	0x20000218

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_MspInit+0x58>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_MspInit+0x58>)
 800126c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001270:	6253      	str	r3, [r2, #36]	; 0x24
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_MspInit+0x58>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_MspInit+0x58>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_MspInit+0x58>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_MspInit+0x58>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_MspInit+0x58>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_MspInit+0x58>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6253      	str	r3, [r2, #36]	; 0x24
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_MspInit+0x58>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40023800 	.word	0x40023800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <HardFault_Handler+0x4>

080012ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <BusFault_Handler+0x4>

080012da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <UsageFault_Handler+0x4>

080012e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f9c6 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <USART1_IRQHandler+0x10>)
 8001316:	f001 fb2f 	bl	8002978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000300 	.word	0x20000300

08001324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART2_IRQHandler+0x10>)
 800132a:	f001 fb25 	bl	8002978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000340 	.word	0x20000340

08001338 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x50>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x16>
		heap_end = &end;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <_sbrk+0x50>)
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <_sbrk+0x54>)
 800134c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <_sbrk+0x50>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <_sbrk+0x50>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	466a      	mov	r2, sp
 800135e:	4293      	cmp	r3, r2
 8001360:	d907      	bls.n	8001372 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001362:	f001 fec7 	bl	80030f4 <__errno>
 8001366:	4602      	mov	r2, r0
 8001368:	230c      	movs	r3, #12
 800136a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e006      	b.n	8001380 <_sbrk+0x48>
	}

	heap_end += incr;
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <_sbrk+0x50>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <_sbrk+0x50>)
 800137c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000200 	.word	0x20000200
 800138c:	20000388 	.word	0x20000388

08001390 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <SystemInit+0x5c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <SystemInit+0x5c>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <SystemInit+0x5c>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	4911      	ldr	r1, [pc, #68]	; (80013ec <SystemInit+0x5c>)
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <SystemInit+0x60>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <SystemInit+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <SystemInit+0x5c>)
 80013b2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80013b6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80013ba:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <SystemInit+0x5c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SystemInit+0x5c>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <SystemInit+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <SystemInit+0x5c>)
 80013ce:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80013d2:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SystemInit+0x5c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x64>)
 80013dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e0:	609a      	str	r2, [r3, #8]
#endif
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	88ffc00c 	.word	0x88ffc00c
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f001 f9bc 	bl	80027ac <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff ff0b 	bl	8001254 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000300 	.word	0x20000300
 8001448:	40013800 	.word	0x40013800

0800144c <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f001 f992 	bl	80027ac <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f7ff fee1 	bl	8001254 <Error_Handler>
  }

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000340 	.word	0x20000340
 800149c:	40004400 	.word	0x40004400

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a36      	ldr	r2, [pc, #216]	; (8001598 <HAL_UART_MspInit+0xf8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d131      	bne.n	8001526 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a35      	ldr	r2, [pc, #212]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a2f      	ldr	r2, [pc, #188]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_UART_MspInit+0xfc>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	4824      	ldr	r0, [pc, #144]	; (80015a0 <HAL_UART_MspInit+0x100>)
 8001510:	f000 fa4e 	bl	80019b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2025      	movs	r0, #37	; 0x25
 800151a:	f000 f9d2 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151e:	2025      	movs	r0, #37	; 0x25
 8001520:	f000 f9eb 	bl	80018fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001524:	e034      	b.n	8001590 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_UART_MspInit+0x104>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d12f      	bne.n	8001590 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_UART_MspInit+0xfc>)
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_UART_MspInit+0xfc>)
 8001536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153a:	6253      	str	r3, [r2, #36]	; 0x24
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_UART_MspInit+0xfc>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_UART_MspInit+0xfc>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_UART_MspInit+0xfc>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_UART_MspInit+0xfc>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001560:	230c      	movs	r3, #12
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001570:	2307      	movs	r3, #7
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <HAL_UART_MspInit+0x100>)
 800157c:	f000 fa18 	bl	80019b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2026      	movs	r0, #38	; 0x26
 8001586:	f000 f99c 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800158a:	2026      	movs	r0, #38	; 0x26
 800158c:	f000 f9b5 	bl	80018fa <HAL_NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40013800 	.word	0x40013800
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40004400 	.word	0x40004400

080015a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ce:	f7ff fedf 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f001 fd95 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d6:	f7ff fdb3 	bl	8001140 <main>
  bx lr
 80015da:	4770      	bx	lr
  ldr r3, =_sidata
 80015dc:	08007070 	.word	0x08007070
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80015e8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80015ec:	20000388 	.word	0x20000388

080015f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_IRQHandler>

080015f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f955 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f80e 	bl	8001624 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001614:	f7ff fe24 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001618:	79fb      	ldrb	r3, [r7, #7]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_InitTick+0x68>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d022      	beq.n	800167e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_InitTick+0x6c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_InitTick+0x68>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001644:	fbb1 f3f3 	udiv	r3, r1, r3
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f962 	bl	8001916 <HAL_SYSTICK_Config>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10f      	bne.n	8001678 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	d809      	bhi.n	8001672 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165e:	2200      	movs	r2, #0
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 30ff 	mov.w	r0, #4294967295
 8001666:	f000 f92c 	bl	80018c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_InitTick+0x70>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e007      	b.n	8001682 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e004      	b.n	8001682 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	e001      	b.n	8001682 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000008 	.word	0x20000008
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x1c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x20>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_IncTick+0x1c>)
 80016a8:	6013      	str	r3, [r2, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000380 	.word	0x20000380
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000380 	.word	0x20000380

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fff0 	bl	80016bc <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d004      	beq.n	80016f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_Delay+0x40>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f4:	bf00      	nop
 80016f6:	f7ff ffe1 	bl	80016bc <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	d8f7      	bhi.n	80016f6 <HAL_Delay+0x26>
  {
  }
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <__NVIC_EnableIRQ+0x34>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff90 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2d 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff42 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff90 	bl	8001804 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5f 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d005      	beq.n	8001952 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e029      	b.n	80019a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 020e 	bic.w	r2, r2, #14
 8001960:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 021c 	and.w	r2, r3, #28
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
    }
  }
  return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019c6:	e154      	b.n	8001c72 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8146 	beq.w	8001c6c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x40>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	6939      	ldr	r1, [r7, #16]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d00b      	beq.n	8001a8c <HAL_GPIO_Init+0xdc>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a80:	2b11      	cmp	r3, #17
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d130      	bne.n	8001aee <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 0201 	and.w	r2, r3, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a0 	beq.w	8001c6c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_GPIO_Init+0x2dc>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_GPIO_Init+0x2dc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_GPIO_Init+0x2dc>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4a      	ldr	r2, [pc, #296]	; (8001c94 <HAL_GPIO_Init+0x2e4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d019      	beq.n	8001ba4 <HAL_GPIO_Init+0x1f4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1f0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a47      	ldr	r2, [pc, #284]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1e4>
 8001b90:	2304      	movs	r3, #4
 8001b92:	e008      	b.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b94:	2305      	movs	r3, #5
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb6:	4936      	ldr	r1, [pc, #216]	; (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001be8:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aea3 	bne.w	80019c8 <HAL_GPIO_Init+0x18>
  } 
}
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e31d      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d22:	4b94      	ldr	r3, [pc, #592]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	4b91      	ldr	r3, [pc, #580]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d07b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b87      	ldr	r3, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x128>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d166      	bne.n	8001e38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e2f7      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e02d      	b.n	8001de0 <HAL_RCC_OscConfig+0xd0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x96>
 8001d8c:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a78      	ldr	r2, [pc, #480]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0xd0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xb8>
 8001dae:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a70      	ldr	r2, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6d      	ldr	r2, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xd0>
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fc68 	bl	80016bc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fc64 	bl	80016bc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e2ad      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc54 	bl	80016bc <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fc50 	bl	80016bc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e299      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d05a      	beq.n	8001efc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_OscConfig+0x176>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x160>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e276      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	493d      	ldr	r1, [pc, #244]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e84:	e03a      	b.n	8001efc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x268>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc12 	bl	80016bc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc0e 	bl	80016bc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e257      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	492a      	ldr	r1, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
 8001ece:	e015      	b.n	8001efc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x268>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fbf1 	bl	80016bc <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fbed 	bl	80016bc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e236      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80b8 	beq.w	800207a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d170      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x218>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e21a      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d921      	bls.n	8001f7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fbd5 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e208      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4906      	ldr	r1, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	061b      	lsls	r3, r3, #24
 8001f6c:	4901      	ldr	r1, [pc, #4]	; (8001f74 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
 8001f72:	e020      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2a6>
 8001f74:	40023800 	.word	0x40023800
 8001f78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4ba4      	ldr	r3, [pc, #656]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	49a1      	ldr	r1, [pc, #644]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8e:	4ba0      	ldr	r3, [pc, #640]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	061b      	lsls	r3, r3, #24
 8001f9c:	499c      	ldr	r1, [pc, #624]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fba0 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1d3      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fc6:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	0912      	lsrs	r2, r2, #4
 8001fcc:	f002 020f 	and.w	r2, r2, #15
 8001fd0:	4990      	ldr	r1, [pc, #576]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	5c8a      	ldrb	r2, [r1, r2]
 8001fd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fd6:	4a90      	ldr	r2, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fda:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_OscConfig+0x50c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fb20 	bl	8001624 <HAL_InitTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d045      	beq.n	800207a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	e1b5      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d029      	beq.n	800204e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCC_OscConfig+0x510>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fb5c 	bl	80016bc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002008:	f7ff fb58 	bl	80016bc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1a1      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4977      	ldr	r1, [pc, #476]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	4972      	ldr	r1, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800204e:	4b74      	ldr	r3, [pc, #464]	; (8002220 <HAL_RCC_OscConfig+0x510>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fb32 	bl	80016bc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205c:	f7ff fb2e 	bl	80016bc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e177      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800206e:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCC_OscConfig+0x514>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fb12 	bl	80016bc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fb0e 	bl	80016bc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e157      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x38c>
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_OscConfig+0x514>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fafb 	bl	80016bc <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff faf7 	bl	80016bc <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e140      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80b5 	beq.w	8002260 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b45      	ldr	r3, [pc, #276]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b42      	ldr	r3, [pc, #264]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6253      	str	r3, [r2, #36]	; 0x24
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x518>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_OscConfig+0x518>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3d      	ldr	r2, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x518>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fabf 	bl	80016bc <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fabb 	bl	80016bc <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e104      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x518>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x466>
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6353      	str	r3, [r2, #52]	; 0x34
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x4c2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x488>
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	4a23      	ldr	r2, [pc, #140]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002188:	6353      	str	r3, [r2, #52]	; 0x34
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 8002190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002194:	6353      	str	r3, [r2, #52]	; 0x34
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4c2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x4aa>
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6353      	str	r3, [r2, #52]	; 0x34
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6353      	str	r3, [r2, #52]	; 0x34
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x4c2>
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c4:	6353      	str	r3, [r2, #52]	; 0x34
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff fa6f 	bl	80016bc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa6b 	bl	80016bc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0b2      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4d2>
 8002204:	e023      	b.n	800224e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff fa59 	bl	80016bc <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220c:	e019      	b.n	8002242 <HAL_RCC_OscConfig+0x532>
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	08006d9c 	.word	0x08006d9c
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004
 8002220:	42470020 	.word	0x42470020
 8002224:	42470680 	.word	0x42470680
 8002228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff fa46 	bl	80016bc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e08d      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800224e:	7ffb      	ldrb	r3, [r7, #31]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 800225a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d079      	beq.n	800235c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d056      	beq.n	800231c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b02      	cmp	r3, #2
 8002274:	d13b      	bne.n	80022ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_OscConfig+0x65c>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fa1e 	bl	80016bc <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff fa1a 	bl	80016bc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e063      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	4319      	orrs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	430b      	orrs	r3, r1
 80022ba:	492b      	ldr	r1, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x65c>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f9f9 	bl	80016bc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f9f5 	bl	80016bc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e03e      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x5be>
 80022ec:	e036      	b.n	800235c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x65c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff f9e2 	bl	80016bc <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff f9de 	bl	80016bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e027      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x5ec>
 800231a:	e01f      	b.n	800235c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e01a      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCC_OscConfig+0x658>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	429a      	cmp	r2, r3
 800233a:	d10d      	bne.n	8002358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	42470060 	.word	0x42470060

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e11a      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d919      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x34>
 8002398:	4b8a      	ldr	r3, [pc, #552]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a89      	ldr	r2, [pc, #548]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b87      	ldr	r3, [pc, #540]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 0201 	bic.w	r2, r3, #1
 80023ac:	4985      	ldr	r1, [pc, #532]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b4:	4b83      	ldr	r3, [pc, #524]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0f9      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	497a      	ldr	r1, [pc, #488]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 808e 	beq.w	800250e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0d7      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002412:	4b6d      	ldr	r3, [pc, #436]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0cb      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0bf      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0b7      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	495c      	ldr	r1, [pc, #368]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800245c:	f7ff f92e 	bl	80016bc <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d112      	bne.n	8002490 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff f926 	bl	80016bc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e09b      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d1ee      	bne.n	800246c <HAL_RCC_ClockConfig+0xfc>
 800248e:	e03e      	b.n	800250e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d112      	bne.n	80024be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249a:	f7ff f90f 	bl	80016bc <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e084      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_ClockConfig+0x12a>
 80024bc:	e027      	b.n	800250e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d11d      	bne.n	8002502 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f8f8 	bl	80016bc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06d      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x158>
 80024ea:	e010      	b.n	800250e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff f8e6 	bl	80016bc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e05b      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ee      	bne.n	80024ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d219      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_ClockConfig+0x1be>
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0201 	bic.w	r2, r3, #1
 8002536:	4923      	ldr	r1, [pc, #140]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_RCC_ClockConfig+0x254>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e034      	b.n	80025ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4917      	ldr	r1, [pc, #92]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490f      	ldr	r1, [pc, #60]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f823 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_RCC_ClockConfig+0x258>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	fa21 f303 	lsr.w	r3, r1, r3
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f838 	bl	8001624 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80025b8:	7afb      	ldrb	r3, [r7, #11]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08006d9c 	.word	0x08006d9c
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d006      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x24>
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d007      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x2a>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d12c      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f8:	613b      	str	r3, [r7, #16]
      break;
 80025fa:	e037      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_GetSysClockFreq+0xa8>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	e034      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_RCC_GetSysClockFreq+0xac>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0d9b      	lsrs	r3, r3, #22
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	3301      	adds	r3, #1
 800261a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_RCC_GetSysClockFreq+0xa0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_RCC_GetSysClockFreq+0xa8>)
 800262c:	fb02 f203 	mul.w	r2, r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e007      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 800263e:	fb02 f203 	mul.w	r2, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	613b      	str	r3, [r7, #16]
      break;
 800264e:	e00d      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0b5b      	lsrs	r3, r3, #13
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266c:	693b      	ldr	r3, [r7, #16]
}
 800266e:	4618      	mov	r0, r3
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40023800 	.word	0x40023800
 800267c:	00f42400 	.word	0x00f42400
 8002680:	007a1200 	.word	0x007a1200
 8002684:	08006d90 	.word	0x08006d90

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <HAL_RCC_GetHCLKFreq+0x10>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	20000000 	.word	0x20000000

0800269c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a0:	f7ff fff2 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a4:	4601      	mov	r1, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08006dac 	.word	0x08006dac

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c8:	f7ff ffde 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026cc:	4601      	mov	r1, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0adb      	lsrs	r3, r3, #11
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08006dac 	.word	0x08006dac

080026ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d12c      	bne.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e016      	b.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6253      	str	r3, [r2, #36]	; 0x24
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800273c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002748:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002750:	d105      	bne.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002758:	d101      	bne.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800275a:	2301      	movs	r3, #1
 800275c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0201 	bic.w	r2, r3, #1
 8002778:	490b      	ldr	r1, [pc, #44]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e03f      	b.n	800283e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fe64 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 faef 	bl	8002dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	d130      	bne.n	80028c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_UART_Transmit_IT+0x26>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e029      	b.n	80028c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_UART_Transmit_IT+0x38>
 800287a:	2302      	movs	r3, #2
 800287c:	e022      	b.n	80028c4 <HAL_UART_Transmit_IT+0x7e>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2221      	movs	r2, #33	; 0x21
 80028a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d140      	bne.n	800296a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_UART_Receive_IT+0x26>
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e039      	b.n	800296c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Receive_IT+0x38>
 8002902:	2302      	movs	r3, #2
 8002904:	e032      	b.n	800296c <HAL_UART_Receive_IT+0x9e>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2222      	movs	r2, #34	; 0x22
 800292a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002944:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
	...

08002978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_UART_IRQHandler+0x52>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f984 	bl	8002cd0 <UART_Receive_IT>
      return;
 80029c8:	e0cc      	b.n	8002b64 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80ab 	beq.w	8002b28 <HAL_UART_IRQHandler+0x1b0>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_UART_IRQHandler+0x70>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a0 	beq.w	8002b28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_UART_IRQHandler+0x90>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_UART_IRQHandler+0xb0>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	f043 0202 	orr.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_UART_IRQHandler+0xd0>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	f043 0204 	orr.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_UART_IRQHandler+0xf0>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	f043 0208 	orr.w	r2, r3, #8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d078      	beq.n	8002b62 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_UART_IRQHandler+0x112>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f923 	bl	8002cd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x13a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d031      	beq.n	8002b16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f86e 	bl	8002b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d123      	bne.n	8002b0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_UART_IRQHandler+0x1f4>)
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ff1f 	bl	800192e <HAL_DMA_Abort_IT>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b00:	4610      	mov	r0, r2
 8002b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	e00e      	b.n	8002b24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f83b 	bl	8002b82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	e00a      	b.n	8002b24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f837 	bl	8002b82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e006      	b.n	8002b24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f833 	bl	8002b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b22:	e01e      	b.n	8002b62 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	bf00      	nop
    return;
 8002b26:	e01c      	b.n	8002b62 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_UART_IRQHandler+0x1cc>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f85a 	bl	8002bf6 <UART_Transmit_IT>
    return;
 8002b42:	e00f      	b.n	8002b64 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0x1ec>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8a1 	bl	8002ca0 <UART_EndTransmit_IT>
    return;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002b62:	bf00      	nop
  }
}
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08002bcf 	.word	0x08002bcf

08002b70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002baa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff ffca 	bl	8002b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b21      	cmp	r3, #33	; 0x21
 8002c08:	d144      	bne.n	8002c94 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d11a      	bne.n	8002c4a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c28:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	621a      	str	r2, [r3, #32]
 8002c3c:	e00e      	b.n	8002c5c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]
 8002c48:	e008      	b.n	8002c5c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	1c59      	adds	r1, r3, #1
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6211      	str	r1, [r2, #32]
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff55 	bl	8002b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b22      	cmp	r3, #34	; 0x22
 8002ce2:	d171      	bne.n	8002dc8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d123      	bne.n	8002d36 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10e      	bne.n	8002d1a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
 8002d18:	e029      	b.n	8002d6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
 8002d34:	e01b      	b.n	8002d6e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6858      	ldr	r0, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	1c59      	adds	r1, r3, #1
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6291      	str	r1, [r2, #40]	; 0x28
 8002d4e:	b2c2      	uxtb	r2, r0
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e00c      	b.n	8002d6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	1c58      	adds	r0, r3, #1
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	6288      	str	r0, [r1, #40]	; 0x28
 8002d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d120      	bne.n	8002dc4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0220 	bic.w	r2, r2, #32
 8002d90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fa2c 	bl	8001218 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e002      	b.n	8002dca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e14:	f023 030c 	bic.w	r3, r3, #12
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e40:	f040 80a5 	bne.w	8002f8e <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4aa4      	ldr	r2, [pc, #656]	; (80030dc <UART_SetConfig+0x308>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d14f      	bne.n	8002eee <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4e:	f7ff fc39 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8002e52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009a      	lsls	r2, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a9d      	ldr	r2, [pc, #628]	; (80030e0 <UART_SetConfig+0x30c>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	0119      	lsls	r1, r3, #4
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8a:	4b95      	ldr	r3, [pc, #596]	; (80030e0 <UART_SetConfig+0x30c>)
 8002e8c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	2064      	movs	r0, #100	; 0x64
 8002e94:	fb00 f303 	mul.w	r3, r0, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3332      	adds	r3, #50	; 0x32
 8002e9e:	4a90      	ldr	r2, [pc, #576]	; (80030e0 <UART_SetConfig+0x30c>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eac:	4419      	add	r1, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b86      	ldr	r3, [pc, #536]	; (80030e0 <UART_SetConfig+0x30c>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	3332      	adds	r3, #50	; 0x32
 8002ed8:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <UART_SetConfig+0x30c>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 0207 	and.w	r2, r3, #7
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002eec:	e0f1      	b.n	80030d2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eee:	f7ff fbd5 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 8002ef2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009a      	lsls	r2, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <UART_SetConfig+0x30c>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	0119      	lsls	r1, r3, #4
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009a      	lsls	r2, r3, #2
 8002f1e:	441a      	add	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <UART_SetConfig+0x30c>)
 8002f2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2064      	movs	r0, #100	; 0x64
 8002f34:	fb00 f303 	mul.w	r3, r0, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <UART_SetConfig+0x30c>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f4c:	4419      	add	r1, r3
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <UART_SetConfig+0x30c>)
 8002f66:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2064      	movs	r0, #100	; 0x64
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <UART_SetConfig+0x30c>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 0207 	and.w	r2, r3, #7
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	440a      	add	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	e0a1      	b.n	80030d2 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a52      	ldr	r2, [pc, #328]	; (80030dc <UART_SetConfig+0x308>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d14e      	bne.n	8003036 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f98:	f7ff fb94 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009a      	lsls	r2, r3, #2
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	4a4a      	ldr	r2, [pc, #296]	; (80030e0 <UART_SetConfig+0x30c>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	0119      	lsls	r1, r3, #4
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <UART_SetConfig+0x30c>)
 8002fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2064      	movs	r0, #100	; 0x64
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3332      	adds	r3, #50	; 0x32
 8002fe8:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <UART_SetConfig+0x30c>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	4419      	add	r1, r3
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <UART_SetConfig+0x30c>)
 800300e:	fba3 0302 	umull	r0, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <UART_SetConfig+0x30c>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	440a      	add	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	e04d      	b.n	80030d2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7ff fb31 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 800303a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009a      	lsls	r2, r3, #2
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <UART_SetConfig+0x30c>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	0119      	lsls	r1, r3, #4
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009a      	lsls	r2, r3, #2
 8003066:	441a      	add	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <UART_SetConfig+0x30c>)
 8003074:	fba3 0302 	umull	r0, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2064      	movs	r0, #100	; 0x64
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	3332      	adds	r3, #50	; 0x32
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <UART_SetConfig+0x30c>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003092:	4419      	add	r1, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <UART_SetConfig+0x30c>)
 80030ac:	fba3 0302 	umull	r0, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2064      	movs	r0, #100	; 0x64
 80030b4:	fb00 f303 	mul.w	r3, r0, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	3332      	adds	r3, #50	; 0x32
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <UART_SetConfig+0x30c>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	f003 020f 	and.w	r2, r3, #15
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	440a      	add	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40013800 	.word	0x40013800
 80030e0:	51eb851f 	.word	0x51eb851f

080030e4 <atof>:
 80030e4:	2100      	movs	r1, #0
 80030e6:	f001 bce3 	b.w	8004ab0 <strtod>

080030ea <atoi>:
 80030ea:	220a      	movs	r2, #10
 80030ec:	2100      	movs	r1, #0
 80030ee:	f001 bd7f 	b.w	8004bf0 <strtol>
	...

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2500      	movs	r5, #0
 8003104:	4e0c      	ldr	r6, [pc, #48]	; (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003108:	1ba4      	subs	r4, r4, r6
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a5      	cmp	r5, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	f003 fda0 	bl	8006c54 <_init>
 8003114:	2500      	movs	r5, #0
 8003116:	4e0a      	ldr	r6, [pc, #40]	; (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	; (8003144 <__libc_init_array+0x44>)
 800311a:	1ba4      	subs	r4, r4, r6
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a5      	cmp	r5, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003128:	4798      	blx	r3
 800312a:	3501      	adds	r5, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003132:	4798      	blx	r3
 8003134:	3501      	adds	r5, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08007068 	.word	0x08007068
 800313c:	08007068 	.word	0x08007068
 8003140:	08007068 	.word	0x08007068
 8003144:	0800706c 	.word	0x0800706c

08003148 <memcpy>:
 8003148:	b510      	push	{r4, lr}
 800314a:	1e43      	subs	r3, r0, #1
 800314c:	440a      	add	r2, r1
 800314e:	4291      	cmp	r1, r2
 8003150:	d100      	bne.n	8003154 <memcpy+0xc>
 8003152:	bd10      	pop	{r4, pc}
 8003154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800315c:	e7f7      	b.n	800314e <memcpy+0x6>

0800315e <memset>:
 800315e:	4603      	mov	r3, r0
 8003160:	4402      	add	r2, r0
 8003162:	4293      	cmp	r3, r2
 8003164:	d100      	bne.n	8003168 <memset+0xa>
 8003166:	4770      	bx	lr
 8003168:	f803 1b01 	strb.w	r1, [r3], #1
 800316c:	e7f9      	b.n	8003162 <memset+0x4>

0800316e <__cvt>:
 800316e:	2b00      	cmp	r3, #0
 8003170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	461e      	mov	r6, r3
 8003176:	bfbb      	ittet	lt
 8003178:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800317c:	461e      	movlt	r6, r3
 800317e:	2300      	movge	r3, #0
 8003180:	232d      	movlt	r3, #45	; 0x2d
 8003182:	b088      	sub	sp, #32
 8003184:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003186:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800318a:	f027 0720 	bic.w	r7, r7, #32
 800318e:	2f46      	cmp	r7, #70	; 0x46
 8003190:	4614      	mov	r4, r2
 8003192:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003194:	700b      	strb	r3, [r1, #0]
 8003196:	d004      	beq.n	80031a2 <__cvt+0x34>
 8003198:	2f45      	cmp	r7, #69	; 0x45
 800319a:	d100      	bne.n	800319e <__cvt+0x30>
 800319c:	3501      	adds	r5, #1
 800319e:	2302      	movs	r3, #2
 80031a0:	e000      	b.n	80031a4 <__cvt+0x36>
 80031a2:	2303      	movs	r3, #3
 80031a4:	aa07      	add	r2, sp, #28
 80031a6:	9204      	str	r2, [sp, #16]
 80031a8:	aa06      	add	r2, sp, #24
 80031aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031ae:	e9cd 3500 	strd	r3, r5, [sp]
 80031b2:	4622      	mov	r2, r4
 80031b4:	4633      	mov	r3, r6
 80031b6:	f001 fdbf 	bl	8004d38 <_dtoa_r>
 80031ba:	2f47      	cmp	r7, #71	; 0x47
 80031bc:	4680      	mov	r8, r0
 80031be:	d102      	bne.n	80031c6 <__cvt+0x58>
 80031c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031c2:	07db      	lsls	r3, r3, #31
 80031c4:	d526      	bpl.n	8003214 <__cvt+0xa6>
 80031c6:	2f46      	cmp	r7, #70	; 0x46
 80031c8:	eb08 0905 	add.w	r9, r8, r5
 80031cc:	d111      	bne.n	80031f2 <__cvt+0x84>
 80031ce:	f898 3000 	ldrb.w	r3, [r8]
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d10a      	bne.n	80031ec <__cvt+0x7e>
 80031d6:	2200      	movs	r2, #0
 80031d8:	2300      	movs	r3, #0
 80031da:	4620      	mov	r0, r4
 80031dc:	4631      	mov	r1, r6
 80031de:	f7fd fc05 	bl	80009ec <__aeabi_dcmpeq>
 80031e2:	b918      	cbnz	r0, 80031ec <__cvt+0x7e>
 80031e4:	f1c5 0501 	rsb	r5, r5, #1
 80031e8:	f8ca 5000 	str.w	r5, [sl]
 80031ec:	f8da 3000 	ldr.w	r3, [sl]
 80031f0:	4499      	add	r9, r3
 80031f2:	2200      	movs	r2, #0
 80031f4:	2300      	movs	r3, #0
 80031f6:	4620      	mov	r0, r4
 80031f8:	4631      	mov	r1, r6
 80031fa:	f7fd fbf7 	bl	80009ec <__aeabi_dcmpeq>
 80031fe:	b938      	cbnz	r0, 8003210 <__cvt+0xa2>
 8003200:	2230      	movs	r2, #48	; 0x30
 8003202:	9b07      	ldr	r3, [sp, #28]
 8003204:	454b      	cmp	r3, r9
 8003206:	d205      	bcs.n	8003214 <__cvt+0xa6>
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	9107      	str	r1, [sp, #28]
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e7f8      	b.n	8003202 <__cvt+0x94>
 8003210:	f8cd 901c 	str.w	r9, [sp, #28]
 8003214:	4640      	mov	r0, r8
 8003216:	9b07      	ldr	r3, [sp, #28]
 8003218:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800321a:	eba3 0308 	sub.w	r3, r3, r8
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	b008      	add	sp, #32
 8003222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003226 <__exponent>:
 8003226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003228:	2900      	cmp	r1, #0
 800322a:	bfb4      	ite	lt
 800322c:	232d      	movlt	r3, #45	; 0x2d
 800322e:	232b      	movge	r3, #43	; 0x2b
 8003230:	4604      	mov	r4, r0
 8003232:	bfb8      	it	lt
 8003234:	4249      	neglt	r1, r1
 8003236:	2909      	cmp	r1, #9
 8003238:	f804 2b02 	strb.w	r2, [r4], #2
 800323c:	7043      	strb	r3, [r0, #1]
 800323e:	dd21      	ble.n	8003284 <__exponent+0x5e>
 8003240:	f10d 0307 	add.w	r3, sp, #7
 8003244:	461f      	mov	r7, r3
 8003246:	260a      	movs	r6, #10
 8003248:	fb91 f5f6 	sdiv	r5, r1, r6
 800324c:	fb06 1115 	mls	r1, r6, r5, r1
 8003250:	2d09      	cmp	r5, #9
 8003252:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003256:	f803 1c01 	strb.w	r1, [r3, #-1]
 800325a:	f103 32ff 	add.w	r2, r3, #4294967295
 800325e:	4629      	mov	r1, r5
 8003260:	dc09      	bgt.n	8003276 <__exponent+0x50>
 8003262:	3130      	adds	r1, #48	; 0x30
 8003264:	3b02      	subs	r3, #2
 8003266:	f802 1c01 	strb.w	r1, [r2, #-1]
 800326a:	42bb      	cmp	r3, r7
 800326c:	4622      	mov	r2, r4
 800326e:	d304      	bcc.n	800327a <__exponent+0x54>
 8003270:	1a10      	subs	r0, r2, r0
 8003272:	b003      	add	sp, #12
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003276:	4613      	mov	r3, r2
 8003278:	e7e6      	b.n	8003248 <__exponent+0x22>
 800327a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800327e:	f804 2b01 	strb.w	r2, [r4], #1
 8003282:	e7f2      	b.n	800326a <__exponent+0x44>
 8003284:	2330      	movs	r3, #48	; 0x30
 8003286:	4419      	add	r1, r3
 8003288:	7083      	strb	r3, [r0, #2]
 800328a:	1d02      	adds	r2, r0, #4
 800328c:	70c1      	strb	r1, [r0, #3]
 800328e:	e7ef      	b.n	8003270 <__exponent+0x4a>

08003290 <_printf_float>:
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	b091      	sub	sp, #68	; 0x44
 8003296:	460c      	mov	r4, r1
 8003298:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800329a:	4693      	mov	fp, r2
 800329c:	461e      	mov	r6, r3
 800329e:	4605      	mov	r5, r0
 80032a0:	f002 fe2c 	bl	8005efc <_localeconv_r>
 80032a4:	6803      	ldr	r3, [r0, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	9309      	str	r3, [sp, #36]	; 0x24
 80032aa:	f7fc ff73 	bl	8000194 <strlen>
 80032ae:	2300      	movs	r3, #0
 80032b0:	930e      	str	r3, [sp, #56]	; 0x38
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	900a      	str	r0, [sp, #40]	; 0x28
 80032b6:	3307      	adds	r3, #7
 80032b8:	f023 0307 	bic.w	r3, r3, #7
 80032bc:	f103 0208 	add.w	r2, r3, #8
 80032c0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80032c4:	f8d4 a000 	ldr.w	sl, [r4]
 80032c8:	603a      	str	r2, [r7, #0]
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032d2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80032d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032da:	930b      	str	r3, [sp, #44]	; 0x2c
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	4ba6      	ldr	r3, [pc, #664]	; (800357c <_printf_float+0x2ec>)
 80032e2:	4638      	mov	r0, r7
 80032e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032e6:	f7fd fbb3 	bl	8000a50 <__aeabi_dcmpun>
 80032ea:	bb68      	cbnz	r0, 8003348 <_printf_float+0xb8>
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	4ba2      	ldr	r3, [pc, #648]	; (800357c <_printf_float+0x2ec>)
 80032f2:	4638      	mov	r0, r7
 80032f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032f6:	f7fd fb8d 	bl	8000a14 <__aeabi_dcmple>
 80032fa:	bb28      	cbnz	r0, 8003348 <_printf_float+0xb8>
 80032fc:	2200      	movs	r2, #0
 80032fe:	2300      	movs	r3, #0
 8003300:	4638      	mov	r0, r7
 8003302:	4649      	mov	r1, r9
 8003304:	f7fd fb7c 	bl	8000a00 <__aeabi_dcmplt>
 8003308:	b110      	cbz	r0, 8003310 <_printf_float+0x80>
 800330a:	232d      	movs	r3, #45	; 0x2d
 800330c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003310:	4f9b      	ldr	r7, [pc, #620]	; (8003580 <_printf_float+0x2f0>)
 8003312:	4b9c      	ldr	r3, [pc, #624]	; (8003584 <_printf_float+0x2f4>)
 8003314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003318:	bf98      	it	ls
 800331a:	461f      	movls	r7, r3
 800331c:	2303      	movs	r3, #3
 800331e:	f04f 0900 	mov.w	r9, #0
 8003322:	6123      	str	r3, [r4, #16]
 8003324:	f02a 0304 	bic.w	r3, sl, #4
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	9600      	str	r6, [sp, #0]
 800332c:	465b      	mov	r3, fp
 800332e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003330:	4621      	mov	r1, r4
 8003332:	4628      	mov	r0, r5
 8003334:	f000 f9e2 	bl	80036fc <_printf_common>
 8003338:	3001      	adds	r0, #1
 800333a:	f040 8090 	bne.w	800345e <_printf_float+0x1ce>
 800333e:	f04f 30ff 	mov.w	r0, #4294967295
 8003342:	b011      	add	sp, #68	; 0x44
 8003344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003348:	463a      	mov	r2, r7
 800334a:	464b      	mov	r3, r9
 800334c:	4638      	mov	r0, r7
 800334e:	4649      	mov	r1, r9
 8003350:	f7fd fb7e 	bl	8000a50 <__aeabi_dcmpun>
 8003354:	b110      	cbz	r0, 800335c <_printf_float+0xcc>
 8003356:	4f8c      	ldr	r7, [pc, #560]	; (8003588 <_printf_float+0x2f8>)
 8003358:	4b8c      	ldr	r3, [pc, #560]	; (800358c <_printf_float+0x2fc>)
 800335a:	e7db      	b.n	8003314 <_printf_float+0x84>
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	a80d      	add	r0, sp, #52	; 0x34
 8003366:	a90e      	add	r1, sp, #56	; 0x38
 8003368:	d140      	bne.n	80033ec <_printf_float+0x15c>
 800336a:	2306      	movs	r3, #6
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	f04f 0c00 	mov.w	ip, #0
 8003372:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003376:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800337a:	6863      	ldr	r3, [r4, #4]
 800337c:	6022      	str	r2, [r4, #0]
 800337e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	463a      	mov	r2, r7
 8003386:	464b      	mov	r3, r9
 8003388:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800338c:	4628      	mov	r0, r5
 800338e:	f7ff feee 	bl	800316e <__cvt>
 8003392:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003396:	2b47      	cmp	r3, #71	; 0x47
 8003398:	4607      	mov	r7, r0
 800339a:	d109      	bne.n	80033b0 <_printf_float+0x120>
 800339c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800339e:	1cd8      	adds	r0, r3, #3
 80033a0:	db02      	blt.n	80033a8 <_printf_float+0x118>
 80033a2:	6862      	ldr	r2, [r4, #4]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	dd47      	ble.n	8003438 <_printf_float+0x1a8>
 80033a8:	f1a8 0802 	sub.w	r8, r8, #2
 80033ac:	fa5f f888 	uxtb.w	r8, r8
 80033b0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80033b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033b6:	d824      	bhi.n	8003402 <_printf_float+0x172>
 80033b8:	3901      	subs	r1, #1
 80033ba:	4642      	mov	r2, r8
 80033bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033c0:	910d      	str	r1, [sp, #52]	; 0x34
 80033c2:	f7ff ff30 	bl	8003226 <__exponent>
 80033c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033c8:	4681      	mov	r9, r0
 80033ca:	1813      	adds	r3, r2, r0
 80033cc:	2a01      	cmp	r2, #1
 80033ce:	6123      	str	r3, [r4, #16]
 80033d0:	dc02      	bgt.n	80033d8 <_printf_float+0x148>
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	07d1      	lsls	r1, r2, #31
 80033d6:	d501      	bpl.n	80033dc <_printf_float+0x14c>
 80033d8:	3301      	adds	r3, #1
 80033da:	6123      	str	r3, [r4, #16]
 80033dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0a2      	beq.n	800332a <_printf_float+0x9a>
 80033e4:	232d      	movs	r3, #45	; 0x2d
 80033e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ea:	e79e      	b.n	800332a <_printf_float+0x9a>
 80033ec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80033f0:	f000 816e 	beq.w	80036d0 <_printf_float+0x440>
 80033f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033f8:	d1b9      	bne.n	800336e <_printf_float+0xde>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1b7      	bne.n	800336e <_printf_float+0xde>
 80033fe:	2301      	movs	r3, #1
 8003400:	e7b4      	b.n	800336c <_printf_float+0xdc>
 8003402:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003406:	d119      	bne.n	800343c <_printf_float+0x1ac>
 8003408:	2900      	cmp	r1, #0
 800340a:	6863      	ldr	r3, [r4, #4]
 800340c:	dd0c      	ble.n	8003428 <_printf_float+0x198>
 800340e:	6121      	str	r1, [r4, #16]
 8003410:	b913      	cbnz	r3, 8003418 <_printf_float+0x188>
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	07d2      	lsls	r2, r2, #31
 8003416:	d502      	bpl.n	800341e <_printf_float+0x18e>
 8003418:	3301      	adds	r3, #1
 800341a:	440b      	add	r3, r1
 800341c:	6123      	str	r3, [r4, #16]
 800341e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003420:	f04f 0900 	mov.w	r9, #0
 8003424:	65a3      	str	r3, [r4, #88]	; 0x58
 8003426:	e7d9      	b.n	80033dc <_printf_float+0x14c>
 8003428:	b913      	cbnz	r3, 8003430 <_printf_float+0x1a0>
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	07d0      	lsls	r0, r2, #31
 800342e:	d501      	bpl.n	8003434 <_printf_float+0x1a4>
 8003430:	3302      	adds	r3, #2
 8003432:	e7f3      	b.n	800341c <_printf_float+0x18c>
 8003434:	2301      	movs	r3, #1
 8003436:	e7f1      	b.n	800341c <_printf_float+0x18c>
 8003438:	f04f 0867 	mov.w	r8, #103	; 0x67
 800343c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003440:	4293      	cmp	r3, r2
 8003442:	db05      	blt.n	8003450 <_printf_float+0x1c0>
 8003444:	6822      	ldr	r2, [r4, #0]
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	07d1      	lsls	r1, r2, #31
 800344a:	d5e8      	bpl.n	800341e <_printf_float+0x18e>
 800344c:	3301      	adds	r3, #1
 800344e:	e7e5      	b.n	800341c <_printf_float+0x18c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	bfcc      	ite	gt
 8003454:	2301      	movgt	r3, #1
 8003456:	f1c3 0302 	rsble	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	e7de      	b.n	800341c <_printf_float+0x18c>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	055a      	lsls	r2, r3, #21
 8003462:	d407      	bmi.n	8003474 <_printf_float+0x1e4>
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	463a      	mov	r2, r7
 8003468:	4659      	mov	r1, fp
 800346a:	4628      	mov	r0, r5
 800346c:	47b0      	blx	r6
 800346e:	3001      	adds	r0, #1
 8003470:	d129      	bne.n	80034c6 <_printf_float+0x236>
 8003472:	e764      	b.n	800333e <_printf_float+0xae>
 8003474:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003478:	f240 80d7 	bls.w	800362a <_printf_float+0x39a>
 800347c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003480:	2200      	movs	r2, #0
 8003482:	2300      	movs	r3, #0
 8003484:	f7fd fab2 	bl	80009ec <__aeabi_dcmpeq>
 8003488:	b388      	cbz	r0, 80034ee <_printf_float+0x25e>
 800348a:	2301      	movs	r3, #1
 800348c:	4a40      	ldr	r2, [pc, #256]	; (8003590 <_printf_float+0x300>)
 800348e:	4659      	mov	r1, fp
 8003490:	4628      	mov	r0, r5
 8003492:	47b0      	blx	r6
 8003494:	3001      	adds	r0, #1
 8003496:	f43f af52 	beq.w	800333e <_printf_float+0xae>
 800349a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800349e:	429a      	cmp	r2, r3
 80034a0:	db02      	blt.n	80034a8 <_printf_float+0x218>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	07d8      	lsls	r0, r3, #31
 80034a6:	d50e      	bpl.n	80034c6 <_printf_float+0x236>
 80034a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034ac:	4659      	mov	r1, fp
 80034ae:	4628      	mov	r0, r5
 80034b0:	47b0      	blx	r6
 80034b2:	3001      	adds	r0, #1
 80034b4:	f43f af43 	beq.w	800333e <_printf_float+0xae>
 80034b8:	2700      	movs	r7, #0
 80034ba:	f104 081a 	add.w	r8, r4, #26
 80034be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034c0:	3b01      	subs	r3, #1
 80034c2:	42bb      	cmp	r3, r7
 80034c4:	dc09      	bgt.n	80034da <_printf_float+0x24a>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	079f      	lsls	r7, r3, #30
 80034ca:	f100 80fd 	bmi.w	80036c8 <_printf_float+0x438>
 80034ce:	68e0      	ldr	r0, [r4, #12]
 80034d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034d2:	4298      	cmp	r0, r3
 80034d4:	bfb8      	it	lt
 80034d6:	4618      	movlt	r0, r3
 80034d8:	e733      	b.n	8003342 <_printf_float+0xb2>
 80034da:	2301      	movs	r3, #1
 80034dc:	4642      	mov	r2, r8
 80034de:	4659      	mov	r1, fp
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b0      	blx	r6
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f af2a 	beq.w	800333e <_printf_float+0xae>
 80034ea:	3701      	adds	r7, #1
 80034ec:	e7e7      	b.n	80034be <_printf_float+0x22e>
 80034ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dc2b      	bgt.n	800354c <_printf_float+0x2bc>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <_printf_float+0x300>)
 80034f8:	4659      	mov	r1, fp
 80034fa:	4628      	mov	r0, r5
 80034fc:	47b0      	blx	r6
 80034fe:	3001      	adds	r0, #1
 8003500:	f43f af1d 	beq.w	800333e <_printf_float+0xae>
 8003504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003506:	b923      	cbnz	r3, 8003512 <_printf_float+0x282>
 8003508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800350a:	b913      	cbnz	r3, 8003512 <_printf_float+0x282>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d5d9      	bpl.n	80034c6 <_printf_float+0x236>
 8003512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003516:	4659      	mov	r1, fp
 8003518:	4628      	mov	r0, r5
 800351a:	47b0      	blx	r6
 800351c:	3001      	adds	r0, #1
 800351e:	f43f af0e 	beq.w	800333e <_printf_float+0xae>
 8003522:	f04f 0800 	mov.w	r8, #0
 8003526:	f104 091a 	add.w	r9, r4, #26
 800352a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800352c:	425b      	negs	r3, r3
 800352e:	4543      	cmp	r3, r8
 8003530:	dc01      	bgt.n	8003536 <_printf_float+0x2a6>
 8003532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003534:	e797      	b.n	8003466 <_printf_float+0x1d6>
 8003536:	2301      	movs	r3, #1
 8003538:	464a      	mov	r2, r9
 800353a:	4659      	mov	r1, fp
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	3001      	adds	r0, #1
 8003542:	f43f aefc 	beq.w	800333e <_printf_float+0xae>
 8003546:	f108 0801 	add.w	r8, r8, #1
 800354a:	e7ee      	b.n	800352a <_printf_float+0x29a>
 800354c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800354e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003550:	429a      	cmp	r2, r3
 8003552:	bfa8      	it	ge
 8003554:	461a      	movge	r2, r3
 8003556:	2a00      	cmp	r2, #0
 8003558:	4690      	mov	r8, r2
 800355a:	dd07      	ble.n	800356c <_printf_float+0x2dc>
 800355c:	4613      	mov	r3, r2
 800355e:	4659      	mov	r1, fp
 8003560:	463a      	mov	r2, r7
 8003562:	4628      	mov	r0, r5
 8003564:	47b0      	blx	r6
 8003566:	3001      	adds	r0, #1
 8003568:	f43f aee9 	beq.w	800333e <_printf_float+0xae>
 800356c:	f104 031a 	add.w	r3, r4, #26
 8003570:	f04f 0a00 	mov.w	sl, #0
 8003574:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003578:	930b      	str	r3, [sp, #44]	; 0x2c
 800357a:	e015      	b.n	80035a8 <_printf_float+0x318>
 800357c:	7fefffff 	.word	0x7fefffff
 8003580:	08006db8 	.word	0x08006db8
 8003584:	08006db4 	.word	0x08006db4
 8003588:	08006dc0 	.word	0x08006dc0
 800358c:	08006dbc 	.word	0x08006dbc
 8003590:	08006dc4 	.word	0x08006dc4
 8003594:	2301      	movs	r3, #1
 8003596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003598:	4659      	mov	r1, fp
 800359a:	4628      	mov	r0, r5
 800359c:	47b0      	blx	r6
 800359e:	3001      	adds	r0, #1
 80035a0:	f43f aecd 	beq.w	800333e <_printf_float+0xae>
 80035a4:	f10a 0a01 	add.w	sl, sl, #1
 80035a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80035ac:	eba9 0308 	sub.w	r3, r9, r8
 80035b0:	4553      	cmp	r3, sl
 80035b2:	dcef      	bgt.n	8003594 <_printf_float+0x304>
 80035b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b8:	429a      	cmp	r2, r3
 80035ba:	444f      	add	r7, r9
 80035bc:	db14      	blt.n	80035e8 <_printf_float+0x358>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	07da      	lsls	r2, r3, #31
 80035c2:	d411      	bmi.n	80035e8 <_printf_float+0x358>
 80035c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035c8:	eba3 0209 	sub.w	r2, r3, r9
 80035cc:	eba3 0901 	sub.w	r9, r3, r1
 80035d0:	4591      	cmp	r9, r2
 80035d2:	bfa8      	it	ge
 80035d4:	4691      	movge	r9, r2
 80035d6:	f1b9 0f00 	cmp.w	r9, #0
 80035da:	dc0d      	bgt.n	80035f8 <_printf_float+0x368>
 80035dc:	2700      	movs	r7, #0
 80035de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035e2:	f104 081a 	add.w	r8, r4, #26
 80035e6:	e018      	b.n	800361a <_printf_float+0x38a>
 80035e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035ec:	4659      	mov	r1, fp
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b0      	blx	r6
 80035f2:	3001      	adds	r0, #1
 80035f4:	d1e6      	bne.n	80035c4 <_printf_float+0x334>
 80035f6:	e6a2      	b.n	800333e <_printf_float+0xae>
 80035f8:	464b      	mov	r3, r9
 80035fa:	463a      	mov	r2, r7
 80035fc:	4659      	mov	r1, fp
 80035fe:	4628      	mov	r0, r5
 8003600:	47b0      	blx	r6
 8003602:	3001      	adds	r0, #1
 8003604:	d1ea      	bne.n	80035dc <_printf_float+0x34c>
 8003606:	e69a      	b.n	800333e <_printf_float+0xae>
 8003608:	2301      	movs	r3, #1
 800360a:	4642      	mov	r2, r8
 800360c:	4659      	mov	r1, fp
 800360e:	4628      	mov	r0, r5
 8003610:	47b0      	blx	r6
 8003612:	3001      	adds	r0, #1
 8003614:	f43f ae93 	beq.w	800333e <_printf_float+0xae>
 8003618:	3701      	adds	r7, #1
 800361a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	eba3 0309 	sub.w	r3, r3, r9
 8003624:	42bb      	cmp	r3, r7
 8003626:	dcef      	bgt.n	8003608 <_printf_float+0x378>
 8003628:	e74d      	b.n	80034c6 <_printf_float+0x236>
 800362a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800362c:	2a01      	cmp	r2, #1
 800362e:	dc01      	bgt.n	8003634 <_printf_float+0x3a4>
 8003630:	07db      	lsls	r3, r3, #31
 8003632:	d538      	bpl.n	80036a6 <_printf_float+0x416>
 8003634:	2301      	movs	r3, #1
 8003636:	463a      	mov	r2, r7
 8003638:	4659      	mov	r1, fp
 800363a:	4628      	mov	r0, r5
 800363c:	47b0      	blx	r6
 800363e:	3001      	adds	r0, #1
 8003640:	f43f ae7d 	beq.w	800333e <_printf_float+0xae>
 8003644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003648:	4659      	mov	r1, fp
 800364a:	4628      	mov	r0, r5
 800364c:	47b0      	blx	r6
 800364e:	3001      	adds	r0, #1
 8003650:	f107 0701 	add.w	r7, r7, #1
 8003654:	f43f ae73 	beq.w	800333e <_printf_float+0xae>
 8003658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800365c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800365e:	2200      	movs	r2, #0
 8003660:	f103 38ff 	add.w	r8, r3, #4294967295
 8003664:	2300      	movs	r3, #0
 8003666:	f7fd f9c1 	bl	80009ec <__aeabi_dcmpeq>
 800366a:	b9c0      	cbnz	r0, 800369e <_printf_float+0x40e>
 800366c:	4643      	mov	r3, r8
 800366e:	463a      	mov	r2, r7
 8003670:	4659      	mov	r1, fp
 8003672:	4628      	mov	r0, r5
 8003674:	47b0      	blx	r6
 8003676:	3001      	adds	r0, #1
 8003678:	d10d      	bne.n	8003696 <_printf_float+0x406>
 800367a:	e660      	b.n	800333e <_printf_float+0xae>
 800367c:	2301      	movs	r3, #1
 800367e:	4642      	mov	r2, r8
 8003680:	4659      	mov	r1, fp
 8003682:	4628      	mov	r0, r5
 8003684:	47b0      	blx	r6
 8003686:	3001      	adds	r0, #1
 8003688:	f43f ae59 	beq.w	800333e <_printf_float+0xae>
 800368c:	3701      	adds	r7, #1
 800368e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003690:	3b01      	subs	r3, #1
 8003692:	42bb      	cmp	r3, r7
 8003694:	dcf2      	bgt.n	800367c <_printf_float+0x3ec>
 8003696:	464b      	mov	r3, r9
 8003698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800369c:	e6e4      	b.n	8003468 <_printf_float+0x1d8>
 800369e:	2700      	movs	r7, #0
 80036a0:	f104 081a 	add.w	r8, r4, #26
 80036a4:	e7f3      	b.n	800368e <_printf_float+0x3fe>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e7e1      	b.n	800366e <_printf_float+0x3de>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4642      	mov	r2, r8
 80036ae:	4659      	mov	r1, fp
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b0      	blx	r6
 80036b4:	3001      	adds	r0, #1
 80036b6:	f43f ae42 	beq.w	800333e <_printf_float+0xae>
 80036ba:	3701      	adds	r7, #1
 80036bc:	68e3      	ldr	r3, [r4, #12]
 80036be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	42bb      	cmp	r3, r7
 80036c4:	dcf1      	bgt.n	80036aa <_printf_float+0x41a>
 80036c6:	e702      	b.n	80034ce <_printf_float+0x23e>
 80036c8:	2700      	movs	r7, #0
 80036ca:	f104 0819 	add.w	r8, r4, #25
 80036ce:	e7f5      	b.n	80036bc <_printf_float+0x42c>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f43f ae94 	beq.w	80033fe <_printf_float+0x16e>
 80036d6:	f04f 0c00 	mov.w	ip, #0
 80036da:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036de:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80036e2:	6022      	str	r2, [r4, #0]
 80036e4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	463a      	mov	r2, r7
 80036f0:	464b      	mov	r3, r9
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff fd3b 	bl	800316e <__cvt>
 80036f8:	4607      	mov	r7, r0
 80036fa:	e64f      	b.n	800339c <_printf_float+0x10c>

080036fc <_printf_common>:
 80036fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	4691      	mov	r9, r2
 8003702:	461f      	mov	r7, r3
 8003704:	688a      	ldr	r2, [r1, #8]
 8003706:	690b      	ldr	r3, [r1, #16]
 8003708:	4606      	mov	r6, r0
 800370a:	4293      	cmp	r3, r2
 800370c:	bfb8      	it	lt
 800370e:	4613      	movlt	r3, r2
 8003710:	f8c9 3000 	str.w	r3, [r9]
 8003714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003718:	460c      	mov	r4, r1
 800371a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800371e:	b112      	cbz	r2, 8003726 <_printf_common+0x2a>
 8003720:	3301      	adds	r3, #1
 8003722:	f8c9 3000 	str.w	r3, [r9]
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	0699      	lsls	r1, r3, #26
 800372a:	bf42      	ittt	mi
 800372c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003730:	3302      	addmi	r3, #2
 8003732:	f8c9 3000 	strmi.w	r3, [r9]
 8003736:	6825      	ldr	r5, [r4, #0]
 8003738:	f015 0506 	ands.w	r5, r5, #6
 800373c:	d107      	bne.n	800374e <_printf_common+0x52>
 800373e:	f104 0a19 	add.w	sl, r4, #25
 8003742:	68e3      	ldr	r3, [r4, #12]
 8003744:	f8d9 2000 	ldr.w	r2, [r9]
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	42ab      	cmp	r3, r5
 800374c:	dc29      	bgt.n	80037a2 <_printf_common+0xa6>
 800374e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	3300      	adds	r3, #0
 8003756:	bf18      	it	ne
 8003758:	2301      	movne	r3, #1
 800375a:	0692      	lsls	r2, r2, #26
 800375c:	d42e      	bmi.n	80037bc <_printf_common+0xc0>
 800375e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003762:	4639      	mov	r1, r7
 8003764:	4630      	mov	r0, r6
 8003766:	47c0      	blx	r8
 8003768:	3001      	adds	r0, #1
 800376a:	d021      	beq.n	80037b0 <_printf_common+0xb4>
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	68e5      	ldr	r5, [r4, #12]
 8003770:	f003 0306 	and.w	r3, r3, #6
 8003774:	2b04      	cmp	r3, #4
 8003776:	bf18      	it	ne
 8003778:	2500      	movne	r5, #0
 800377a:	f8d9 2000 	ldr.w	r2, [r9]
 800377e:	f04f 0900 	mov.w	r9, #0
 8003782:	bf08      	it	eq
 8003784:	1aad      	subeq	r5, r5, r2
 8003786:	68a3      	ldr	r3, [r4, #8]
 8003788:	6922      	ldr	r2, [r4, #16]
 800378a:	bf08      	it	eq
 800378c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003790:	4293      	cmp	r3, r2
 8003792:	bfc4      	itt	gt
 8003794:	1a9b      	subgt	r3, r3, r2
 8003796:	18ed      	addgt	r5, r5, r3
 8003798:	341a      	adds	r4, #26
 800379a:	454d      	cmp	r5, r9
 800379c:	d11a      	bne.n	80037d4 <_printf_common+0xd8>
 800379e:	2000      	movs	r0, #0
 80037a0:	e008      	b.n	80037b4 <_printf_common+0xb8>
 80037a2:	2301      	movs	r3, #1
 80037a4:	4652      	mov	r2, sl
 80037a6:	4639      	mov	r1, r7
 80037a8:	4630      	mov	r0, r6
 80037aa:	47c0      	blx	r8
 80037ac:	3001      	adds	r0, #1
 80037ae:	d103      	bne.n	80037b8 <_printf_common+0xbc>
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b8:	3501      	adds	r5, #1
 80037ba:	e7c2      	b.n	8003742 <_printf_common+0x46>
 80037bc:	2030      	movs	r0, #48	; 0x30
 80037be:	18e1      	adds	r1, r4, r3
 80037c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ca:	4422      	add	r2, r4
 80037cc:	3302      	adds	r3, #2
 80037ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037d2:	e7c4      	b.n	800375e <_printf_common+0x62>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4622      	mov	r2, r4
 80037d8:	4639      	mov	r1, r7
 80037da:	4630      	mov	r0, r6
 80037dc:	47c0      	blx	r8
 80037de:	3001      	adds	r0, #1
 80037e0:	d0e6      	beq.n	80037b0 <_printf_common+0xb4>
 80037e2:	f109 0901 	add.w	r9, r9, #1
 80037e6:	e7d8      	b.n	800379a <_printf_common+0x9e>

080037e8 <_printf_i>:
 80037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037f0:	460c      	mov	r4, r1
 80037f2:	7e09      	ldrb	r1, [r1, #24]
 80037f4:	b085      	sub	sp, #20
 80037f6:	296e      	cmp	r1, #110	; 0x6e
 80037f8:	4617      	mov	r7, r2
 80037fa:	4606      	mov	r6, r0
 80037fc:	4698      	mov	r8, r3
 80037fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003800:	f000 80b3 	beq.w	800396a <_printf_i+0x182>
 8003804:	d822      	bhi.n	800384c <_printf_i+0x64>
 8003806:	2963      	cmp	r1, #99	; 0x63
 8003808:	d036      	beq.n	8003878 <_printf_i+0x90>
 800380a:	d80a      	bhi.n	8003822 <_printf_i+0x3a>
 800380c:	2900      	cmp	r1, #0
 800380e:	f000 80b9 	beq.w	8003984 <_printf_i+0x19c>
 8003812:	2958      	cmp	r1, #88	; 0x58
 8003814:	f000 8083 	beq.w	800391e <_printf_i+0x136>
 8003818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800381c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003820:	e032      	b.n	8003888 <_printf_i+0xa0>
 8003822:	2964      	cmp	r1, #100	; 0x64
 8003824:	d001      	beq.n	800382a <_printf_i+0x42>
 8003826:	2969      	cmp	r1, #105	; 0x69
 8003828:	d1f6      	bne.n	8003818 <_printf_i+0x30>
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	0605      	lsls	r5, r0, #24
 8003830:	f103 0104 	add.w	r1, r3, #4
 8003834:	d52a      	bpl.n	800388c <_printf_i+0xa4>
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6011      	str	r1, [r2, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	da03      	bge.n	8003846 <_printf_i+0x5e>
 800383e:	222d      	movs	r2, #45	; 0x2d
 8003840:	425b      	negs	r3, r3
 8003842:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003846:	486f      	ldr	r0, [pc, #444]	; (8003a04 <_printf_i+0x21c>)
 8003848:	220a      	movs	r2, #10
 800384a:	e039      	b.n	80038c0 <_printf_i+0xd8>
 800384c:	2973      	cmp	r1, #115	; 0x73
 800384e:	f000 809d 	beq.w	800398c <_printf_i+0x1a4>
 8003852:	d808      	bhi.n	8003866 <_printf_i+0x7e>
 8003854:	296f      	cmp	r1, #111	; 0x6f
 8003856:	d020      	beq.n	800389a <_printf_i+0xb2>
 8003858:	2970      	cmp	r1, #112	; 0x70
 800385a:	d1dd      	bne.n	8003818 <_printf_i+0x30>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f043 0320 	orr.w	r3, r3, #32
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	e003      	b.n	800386e <_printf_i+0x86>
 8003866:	2975      	cmp	r1, #117	; 0x75
 8003868:	d017      	beq.n	800389a <_printf_i+0xb2>
 800386a:	2978      	cmp	r1, #120	; 0x78
 800386c:	d1d4      	bne.n	8003818 <_printf_i+0x30>
 800386e:	2378      	movs	r3, #120	; 0x78
 8003870:	4865      	ldr	r0, [pc, #404]	; (8003a08 <_printf_i+0x220>)
 8003872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003876:	e055      	b.n	8003924 <_printf_i+0x13c>
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800387e:	1d19      	adds	r1, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6011      	str	r1, [r2, #0]
 8003884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003888:	2301      	movs	r3, #1
 800388a:	e08c      	b.n	80039a6 <_printf_i+0x1be>
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003892:	6011      	str	r1, [r2, #0]
 8003894:	bf18      	it	ne
 8003896:	b21b      	sxthne	r3, r3
 8003898:	e7cf      	b.n	800383a <_printf_i+0x52>
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1d18      	adds	r0, r3, #4
 80038a0:	6010      	str	r0, [r2, #0]
 80038a2:	0628      	lsls	r0, r5, #24
 80038a4:	d501      	bpl.n	80038aa <_printf_i+0xc2>
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	e002      	b.n	80038b0 <_printf_i+0xc8>
 80038aa:	0668      	lsls	r0, r5, #25
 80038ac:	d5fb      	bpl.n	80038a6 <_printf_i+0xbe>
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	296f      	cmp	r1, #111	; 0x6f
 80038b2:	bf14      	ite	ne
 80038b4:	220a      	movne	r2, #10
 80038b6:	2208      	moveq	r2, #8
 80038b8:	4852      	ldr	r0, [pc, #328]	; (8003a04 <_printf_i+0x21c>)
 80038ba:	2100      	movs	r1, #0
 80038bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038c0:	6865      	ldr	r5, [r4, #4]
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	60a5      	str	r5, [r4, #8]
 80038c6:	f2c0 8095 	blt.w	80039f4 <_printf_i+0x20c>
 80038ca:	6821      	ldr	r1, [r4, #0]
 80038cc:	f021 0104 	bic.w	r1, r1, #4
 80038d0:	6021      	str	r1, [r4, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d13d      	bne.n	8003952 <_printf_i+0x16a>
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	f040 808e 	bne.w	80039f8 <_printf_i+0x210>
 80038dc:	4665      	mov	r5, ip
 80038de:	2a08      	cmp	r2, #8
 80038e0:	d10b      	bne.n	80038fa <_printf_i+0x112>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	07db      	lsls	r3, r3, #31
 80038e6:	d508      	bpl.n	80038fa <_printf_i+0x112>
 80038e8:	6923      	ldr	r3, [r4, #16]
 80038ea:	6862      	ldr	r2, [r4, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bfde      	ittt	le
 80038f0:	2330      	movle	r3, #48	; 0x30
 80038f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038fa:	ebac 0305 	sub.w	r3, ip, r5
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	f8cd 8000 	str.w	r8, [sp]
 8003904:	463b      	mov	r3, r7
 8003906:	aa03      	add	r2, sp, #12
 8003908:	4621      	mov	r1, r4
 800390a:	4630      	mov	r0, r6
 800390c:	f7ff fef6 	bl	80036fc <_printf_common>
 8003910:	3001      	adds	r0, #1
 8003912:	d14d      	bne.n	80039b0 <_printf_i+0x1c8>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	b005      	add	sp, #20
 800391a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800391e:	4839      	ldr	r0, [pc, #228]	; (8003a04 <_printf_i+0x21c>)
 8003920:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	6821      	ldr	r1, [r4, #0]
 8003928:	1d1d      	adds	r5, r3, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6015      	str	r5, [r2, #0]
 800392e:	060a      	lsls	r2, r1, #24
 8003930:	d50b      	bpl.n	800394a <_printf_i+0x162>
 8003932:	07ca      	lsls	r2, r1, #31
 8003934:	bf44      	itt	mi
 8003936:	f041 0120 	orrmi.w	r1, r1, #32
 800393a:	6021      	strmi	r1, [r4, #0]
 800393c:	b91b      	cbnz	r3, 8003946 <_printf_i+0x15e>
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	f022 0220 	bic.w	r2, r2, #32
 8003944:	6022      	str	r2, [r4, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	e7b7      	b.n	80038ba <_printf_i+0xd2>
 800394a:	064d      	lsls	r5, r1, #25
 800394c:	bf48      	it	mi
 800394e:	b29b      	uxthmi	r3, r3
 8003950:	e7ef      	b.n	8003932 <_printf_i+0x14a>
 8003952:	4665      	mov	r5, ip
 8003954:	fbb3 f1f2 	udiv	r1, r3, r2
 8003958:	fb02 3311 	mls	r3, r2, r1, r3
 800395c:	5cc3      	ldrb	r3, [r0, r3]
 800395e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003962:	460b      	mov	r3, r1
 8003964:	2900      	cmp	r1, #0
 8003966:	d1f5      	bne.n	8003954 <_printf_i+0x16c>
 8003968:	e7b9      	b.n	80038de <_printf_i+0xf6>
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6961      	ldr	r1, [r4, #20]
 8003972:	6010      	str	r0, [r2, #0]
 8003974:	0628      	lsls	r0, r5, #24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	d501      	bpl.n	800397e <_printf_i+0x196>
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	e002      	b.n	8003984 <_printf_i+0x19c>
 800397e:	066a      	lsls	r2, r5, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0x192>
 8003982:	8019      	strh	r1, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	4665      	mov	r5, ip
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	e7b9      	b.n	8003900 <_printf_i+0x118>
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	1d19      	adds	r1, r3, #4
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	681d      	ldr	r5, [r3, #0]
 8003994:	6862      	ldr	r2, [r4, #4]
 8003996:	2100      	movs	r1, #0
 8003998:	4628      	mov	r0, r5
 800399a:	f002 fad7 	bl	8005f4c <memchr>
 800399e:	b108      	cbz	r0, 80039a4 <_printf_i+0x1bc>
 80039a0:	1b40      	subs	r0, r0, r5
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ae:	e7a7      	b.n	8003900 <_printf_i+0x118>
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	462a      	mov	r2, r5
 80039b4:	4639      	mov	r1, r7
 80039b6:	4630      	mov	r0, r6
 80039b8:	47c0      	blx	r8
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0aa      	beq.n	8003914 <_printf_i+0x12c>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079b      	lsls	r3, r3, #30
 80039c2:	d413      	bmi.n	80039ec <_printf_i+0x204>
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	4298      	cmp	r0, r3
 80039ca:	bfb8      	it	lt
 80039cc:	4618      	movlt	r0, r3
 80039ce:	e7a3      	b.n	8003918 <_printf_i+0x130>
 80039d0:	2301      	movs	r3, #1
 80039d2:	464a      	mov	r2, r9
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d09a      	beq.n	8003914 <_printf_i+0x12c>
 80039de:	3501      	adds	r5, #1
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	9a03      	ldr	r2, [sp, #12]
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	dcf2      	bgt.n	80039d0 <_printf_i+0x1e8>
 80039ea:	e7eb      	b.n	80039c4 <_printf_i+0x1dc>
 80039ec:	2500      	movs	r5, #0
 80039ee:	f104 0919 	add.w	r9, r4, #25
 80039f2:	e7f5      	b.n	80039e0 <_printf_i+0x1f8>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ac      	bne.n	8003952 <_printf_i+0x16a>
 80039f8:	7803      	ldrb	r3, [r0, #0]
 80039fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a02:	e76c      	b.n	80038de <_printf_i+0xf6>
 8003a04:	08006dc6 	.word	0x08006dc6
 8003a08:	08006dd7 	.word	0x08006dd7

08003a0c <_scanf_float>:
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	469a      	mov	sl, r3
 8003a12:	688b      	ldr	r3, [r1, #8]
 8003a14:	4616      	mov	r6, r2
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a1c:	bf88      	it	hi
 8003a1e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003a22:	b087      	sub	sp, #28
 8003a24:	bf85      	ittet	hi
 8003a26:	189b      	addhi	r3, r3, r2
 8003a28:	9301      	strhi	r3, [sp, #4]
 8003a2a:	2300      	movls	r3, #0
 8003a2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a30:	4688      	mov	r8, r1
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	bf8c      	ite	hi
 8003a38:	608b      	strhi	r3, [r1, #8]
 8003a3a:	9301      	strls	r3, [sp, #4]
 8003a3c:	680b      	ldr	r3, [r1, #0]
 8003a3e:	4607      	mov	r7, r0
 8003a40:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a44:	f848 3b1c 	str.w	r3, [r8], #28
 8003a48:	460c      	mov	r4, r1
 8003a4a:	4645      	mov	r5, r8
 8003a4c:	465a      	mov	r2, fp
 8003a4e:	46d9      	mov	r9, fp
 8003a50:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003a54:	f8cd b008 	str.w	fp, [sp, #8]
 8003a58:	68a1      	ldr	r1, [r4, #8]
 8003a5a:	b181      	cbz	r1, 8003a7e <_scanf_float+0x72>
 8003a5c:	6833      	ldr	r3, [r6, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b49      	cmp	r3, #73	; 0x49
 8003a62:	d071      	beq.n	8003b48 <_scanf_float+0x13c>
 8003a64:	d84d      	bhi.n	8003b02 <_scanf_float+0xf6>
 8003a66:	2b39      	cmp	r3, #57	; 0x39
 8003a68:	d840      	bhi.n	8003aec <_scanf_float+0xe0>
 8003a6a:	2b31      	cmp	r3, #49	; 0x31
 8003a6c:	f080 8088 	bcs.w	8003b80 <_scanf_float+0x174>
 8003a70:	2b2d      	cmp	r3, #45	; 0x2d
 8003a72:	f000 8090 	beq.w	8003b96 <_scanf_float+0x18a>
 8003a76:	d815      	bhi.n	8003aa4 <_scanf_float+0x98>
 8003a78:	2b2b      	cmp	r3, #43	; 0x2b
 8003a7a:	f000 808c 	beq.w	8003b96 <_scanf_float+0x18a>
 8003a7e:	f1b9 0f00 	cmp.w	r9, #0
 8003a82:	d003      	beq.n	8003a8c <_scanf_float+0x80>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	2a01      	cmp	r2, #1
 8003a90:	f200 80ea 	bhi.w	8003c68 <_scanf_float+0x25c>
 8003a94:	4545      	cmp	r5, r8
 8003a96:	f200 80dc 	bhi.w	8003c52 <_scanf_float+0x246>
 8003a9a:	2601      	movs	r6, #1
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	b007      	add	sp, #28
 8003aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa6:	f000 809f 	beq.w	8003be8 <_scanf_float+0x1dc>
 8003aaa:	2b30      	cmp	r3, #48	; 0x30
 8003aac:	d1e7      	bne.n	8003a7e <_scanf_float+0x72>
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ab4:	d064      	beq.n	8003b80 <_scanf_float+0x174>
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003abc:	6020      	str	r0, [r4, #0]
 8003abe:	f109 0901 	add.w	r9, r9, #1
 8003ac2:	b11b      	cbz	r3, 8003acc <_scanf_float+0xc0>
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	3101      	adds	r1, #1
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	60a1      	str	r1, [r4, #8]
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	6873      	ldr	r3, [r6, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	6073      	str	r3, [r6, #4]
 8003ae0:	f340 80ac 	ble.w	8003c3c <_scanf_float+0x230>
 8003ae4:	6833      	ldr	r3, [r6, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	e7b5      	b.n	8003a58 <_scanf_float+0x4c>
 8003aec:	2b45      	cmp	r3, #69	; 0x45
 8003aee:	f000 8085 	beq.w	8003bfc <_scanf_float+0x1f0>
 8003af2:	2b46      	cmp	r3, #70	; 0x46
 8003af4:	d06a      	beq.n	8003bcc <_scanf_float+0x1c0>
 8003af6:	2b41      	cmp	r3, #65	; 0x41
 8003af8:	d1c1      	bne.n	8003a7e <_scanf_float+0x72>
 8003afa:	2a01      	cmp	r2, #1
 8003afc:	d1bf      	bne.n	8003a7e <_scanf_float+0x72>
 8003afe:	2202      	movs	r2, #2
 8003b00:	e046      	b.n	8003b90 <_scanf_float+0x184>
 8003b02:	2b65      	cmp	r3, #101	; 0x65
 8003b04:	d07a      	beq.n	8003bfc <_scanf_float+0x1f0>
 8003b06:	d818      	bhi.n	8003b3a <_scanf_float+0x12e>
 8003b08:	2b54      	cmp	r3, #84	; 0x54
 8003b0a:	d066      	beq.n	8003bda <_scanf_float+0x1ce>
 8003b0c:	d811      	bhi.n	8003b32 <_scanf_float+0x126>
 8003b0e:	2b4e      	cmp	r3, #78	; 0x4e
 8003b10:	d1b5      	bne.n	8003a7e <_scanf_float+0x72>
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d146      	bne.n	8003ba4 <_scanf_float+0x198>
 8003b16:	f1b9 0f00 	cmp.w	r9, #0
 8003b1a:	d145      	bne.n	8003ba8 <_scanf_float+0x19c>
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b22:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b26:	d13f      	bne.n	8003ba8 <_scanf_float+0x19c>
 8003b28:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b2c:	6021      	str	r1, [r4, #0]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	e02e      	b.n	8003b90 <_scanf_float+0x184>
 8003b32:	2b59      	cmp	r3, #89	; 0x59
 8003b34:	d01e      	beq.n	8003b74 <_scanf_float+0x168>
 8003b36:	2b61      	cmp	r3, #97	; 0x61
 8003b38:	e7de      	b.n	8003af8 <_scanf_float+0xec>
 8003b3a:	2b6e      	cmp	r3, #110	; 0x6e
 8003b3c:	d0e9      	beq.n	8003b12 <_scanf_float+0x106>
 8003b3e:	d815      	bhi.n	8003b6c <_scanf_float+0x160>
 8003b40:	2b66      	cmp	r3, #102	; 0x66
 8003b42:	d043      	beq.n	8003bcc <_scanf_float+0x1c0>
 8003b44:	2b69      	cmp	r3, #105	; 0x69
 8003b46:	d19a      	bne.n	8003a7e <_scanf_float+0x72>
 8003b48:	f1bb 0f00 	cmp.w	fp, #0
 8003b4c:	d138      	bne.n	8003bc0 <_scanf_float+0x1b4>
 8003b4e:	f1b9 0f00 	cmp.w	r9, #0
 8003b52:	d197      	bne.n	8003a84 <_scanf_float+0x78>
 8003b54:	6821      	ldr	r1, [r4, #0]
 8003b56:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b5a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b5e:	d195      	bne.n	8003a8c <_scanf_float+0x80>
 8003b60:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b64:	6021      	str	r1, [r4, #0]
 8003b66:	f04f 0b01 	mov.w	fp, #1
 8003b6a:	e011      	b.n	8003b90 <_scanf_float+0x184>
 8003b6c:	2b74      	cmp	r3, #116	; 0x74
 8003b6e:	d034      	beq.n	8003bda <_scanf_float+0x1ce>
 8003b70:	2b79      	cmp	r3, #121	; 0x79
 8003b72:	d184      	bne.n	8003a7e <_scanf_float+0x72>
 8003b74:	f1bb 0f07 	cmp.w	fp, #7
 8003b78:	d181      	bne.n	8003a7e <_scanf_float+0x72>
 8003b7a:	f04f 0b08 	mov.w	fp, #8
 8003b7e:	e007      	b.n	8003b90 <_scanf_float+0x184>
 8003b80:	eb12 0f0b 	cmn.w	r2, fp
 8003b84:	f47f af7b 	bne.w	8003a7e <_scanf_float+0x72>
 8003b88:	6821      	ldr	r1, [r4, #0]
 8003b8a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003b8e:	6021      	str	r1, [r4, #0]
 8003b90:	702b      	strb	r3, [r5, #0]
 8003b92:	3501      	adds	r5, #1
 8003b94:	e79a      	b.n	8003acc <_scanf_float+0xc0>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	0608      	lsls	r0, r1, #24
 8003b9a:	f57f af70 	bpl.w	8003a7e <_scanf_float+0x72>
 8003b9e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ba2:	e7f4      	b.n	8003b8e <_scanf_float+0x182>
 8003ba4:	2a02      	cmp	r2, #2
 8003ba6:	d047      	beq.n	8003c38 <_scanf_float+0x22c>
 8003ba8:	f1bb 0f01 	cmp.w	fp, #1
 8003bac:	d003      	beq.n	8003bb6 <_scanf_float+0x1aa>
 8003bae:	f1bb 0f04 	cmp.w	fp, #4
 8003bb2:	f47f af64 	bne.w	8003a7e <_scanf_float+0x72>
 8003bb6:	f10b 0b01 	add.w	fp, fp, #1
 8003bba:	fa5f fb8b 	uxtb.w	fp, fp
 8003bbe:	e7e7      	b.n	8003b90 <_scanf_float+0x184>
 8003bc0:	f1bb 0f03 	cmp.w	fp, #3
 8003bc4:	d0f7      	beq.n	8003bb6 <_scanf_float+0x1aa>
 8003bc6:	f1bb 0f05 	cmp.w	fp, #5
 8003bca:	e7f2      	b.n	8003bb2 <_scanf_float+0x1a6>
 8003bcc:	f1bb 0f02 	cmp.w	fp, #2
 8003bd0:	f47f af55 	bne.w	8003a7e <_scanf_float+0x72>
 8003bd4:	f04f 0b03 	mov.w	fp, #3
 8003bd8:	e7da      	b.n	8003b90 <_scanf_float+0x184>
 8003bda:	f1bb 0f06 	cmp.w	fp, #6
 8003bde:	f47f af4e 	bne.w	8003a7e <_scanf_float+0x72>
 8003be2:	f04f 0b07 	mov.w	fp, #7
 8003be6:	e7d3      	b.n	8003b90 <_scanf_float+0x184>
 8003be8:	6821      	ldr	r1, [r4, #0]
 8003bea:	0588      	lsls	r0, r1, #22
 8003bec:	f57f af47 	bpl.w	8003a7e <_scanf_float+0x72>
 8003bf0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003bf4:	6021      	str	r1, [r4, #0]
 8003bf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8003bfa:	e7c9      	b.n	8003b90 <_scanf_float+0x184>
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003c02:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003c06:	d006      	beq.n	8003c16 <_scanf_float+0x20a>
 8003c08:	0548      	lsls	r0, r1, #21
 8003c0a:	f57f af38 	bpl.w	8003a7e <_scanf_float+0x72>
 8003c0e:	f1b9 0f00 	cmp.w	r9, #0
 8003c12:	f43f af3b 	beq.w	8003a8c <_scanf_float+0x80>
 8003c16:	0588      	lsls	r0, r1, #22
 8003c18:	bf58      	it	pl
 8003c1a:	9802      	ldrpl	r0, [sp, #8]
 8003c1c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003c20:	bf58      	it	pl
 8003c22:	eba9 0000 	subpl.w	r0, r9, r0
 8003c26:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003c2a:	bf58      	it	pl
 8003c2c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003c30:	6021      	str	r1, [r4, #0]
 8003c32:	f04f 0900 	mov.w	r9, #0
 8003c36:	e7ab      	b.n	8003b90 <_scanf_float+0x184>
 8003c38:	2203      	movs	r2, #3
 8003c3a:	e7a9      	b.n	8003b90 <_scanf_float+0x184>
 8003c3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c40:	4631      	mov	r1, r6
 8003c42:	4638      	mov	r0, r7
 8003c44:	9205      	str	r2, [sp, #20]
 8003c46:	4798      	blx	r3
 8003c48:	9a05      	ldr	r2, [sp, #20]
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f43f af04 	beq.w	8003a58 <_scanf_float+0x4c>
 8003c50:	e715      	b.n	8003a7e <_scanf_float+0x72>
 8003c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c56:	4632      	mov	r2, r6
 8003c58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	4798      	blx	r3
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	e715      	b.n	8003a94 <_scanf_float+0x88>
 8003c68:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d80a      	bhi.n	8003c86 <_scanf_float+0x27a>
 8003c70:	f1bb 0f02 	cmp.w	fp, #2
 8003c74:	d967      	bls.n	8003d46 <_scanf_float+0x33a>
 8003c76:	f1ab 0b03 	sub.w	fp, fp, #3
 8003c7a:	fa5f fb8b 	uxtb.w	fp, fp
 8003c7e:	eba5 0b0b 	sub.w	fp, r5, fp
 8003c82:	455d      	cmp	r5, fp
 8003c84:	d14a      	bne.n	8003d1c <_scanf_float+0x310>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	05da      	lsls	r2, r3, #23
 8003c8a:	d51f      	bpl.n	8003ccc <_scanf_float+0x2c0>
 8003c8c:	055b      	lsls	r3, r3, #21
 8003c8e:	d467      	bmi.n	8003d60 <_scanf_float+0x354>
 8003c90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	2965      	cmp	r1, #101	; 0x65
 8003c98:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c9c:	f105 3bff 	add.w	fp, r5, #4294967295
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	d00d      	beq.n	8003cc0 <_scanf_float+0x2b4>
 8003ca4:	2945      	cmp	r1, #69	; 0x45
 8003ca6:	d00b      	beq.n	8003cc0 <_scanf_float+0x2b4>
 8003ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cac:	4632      	mov	r2, r6
 8003cae:	4638      	mov	r0, r7
 8003cb0:	4798      	blx	r3
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	f1a5 0b02 	sub.w	fp, r5, #2
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	4798      	blx	r3
 8003cca:	465d      	mov	r5, fp
 8003ccc:	6826      	ldr	r6, [r4, #0]
 8003cce:	f016 0610 	ands.w	r6, r6, #16
 8003cd2:	d176      	bne.n	8003dc2 <_scanf_float+0x3b6>
 8003cd4:	702e      	strb	r6, [r5, #0]
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	d141      	bne.n	8003d66 <_scanf_float+0x35a>
 8003ce2:	9b02      	ldr	r3, [sp, #8]
 8003ce4:	eba9 0303 	sub.w	r3, r9, r3
 8003ce8:	425a      	negs	r2, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d148      	bne.n	8003d80 <_scanf_float+0x374>
 8003cee:	4641      	mov	r1, r8
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	f000 fecc 	bl	8004a90 <_strtod_r>
 8003cf8:	6825      	ldr	r5, [r4, #0]
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	f015 0f02 	tst.w	r5, #2
 8003d00:	4689      	mov	r9, r1
 8003d02:	f8da 3000 	ldr.w	r3, [sl]
 8003d06:	d046      	beq.n	8003d96 <_scanf_float+0x38a>
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	f8ca 2000 	str.w	r2, [sl]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e9c3 8900 	strd	r8, r9, [r3]
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60e3      	str	r3, [r4, #12]
 8003d1a:	e6bf      	b.n	8003a9c <_scanf_float+0x90>
 8003d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d20:	4632      	mov	r2, r6
 8003d22:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d26:	4638      	mov	r0, r7
 8003d28:	4798      	blx	r3
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	e7a7      	b.n	8003c82 <_scanf_float+0x276>
 8003d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d36:	4632      	mov	r2, r6
 8003d38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	4798      	blx	r3
 8003d40:	6923      	ldr	r3, [r4, #16]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	4545      	cmp	r5, r8
 8003d48:	d8f3      	bhi.n	8003d32 <_scanf_float+0x326>
 8003d4a:	e6a6      	b.n	8003a9a <_scanf_float+0x8e>
 8003d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d50:	4632      	mov	r2, r6
 8003d52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d56:	4638      	mov	r0, r7
 8003d58:	4798      	blx	r3
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	4545      	cmp	r5, r8
 8003d62:	d8f3      	bhi.n	8003d4c <_scanf_float+0x340>
 8003d64:	e699      	b.n	8003a9a <_scanf_float+0x8e>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0c0      	beq.n	8003cee <_scanf_float+0x2e2>
 8003d6c:	9904      	ldr	r1, [sp, #16]
 8003d6e:	230a      	movs	r3, #10
 8003d70:	4632      	mov	r2, r6
 8003d72:	3101      	adds	r1, #1
 8003d74:	4638      	mov	r0, r7
 8003d76:	f000 ff29 	bl	8004bcc <_strtol_r>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	9d04      	ldr	r5, [sp, #16]
 8003d7e:	1ac2      	subs	r2, r0, r3
 8003d80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d84:	429d      	cmp	r5, r3
 8003d86:	bf28      	it	cs
 8003d88:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003d8c:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <_scanf_float+0x3bc>)
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f820 	bl	8003dd4 <siprintf>
 8003d94:	e7ab      	b.n	8003cee <_scanf_float+0x2e2>
 8003d96:	1d1f      	adds	r7, r3, #4
 8003d98:	f015 0504 	ands.w	r5, r5, #4
 8003d9c:	f8ca 7000 	str.w	r7, [sl]
 8003da0:	d1b5      	bne.n	8003d0e <_scanf_float+0x302>
 8003da2:	681f      	ldr	r7, [r3, #0]
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	f7fc fe52 	bl	8000a50 <__aeabi_dcmpun>
 8003dac:	b120      	cbz	r0, 8003db8 <_scanf_float+0x3ac>
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f80c 	bl	8003dcc <nanf>
 8003db4:	6038      	str	r0, [r7, #0]
 8003db6:	e7ad      	b.n	8003d14 <_scanf_float+0x308>
 8003db8:	4640      	mov	r0, r8
 8003dba:	4649      	mov	r1, r9
 8003dbc:	f7fc fea6 	bl	8000b0c <__aeabi_d2f>
 8003dc0:	e7f8      	b.n	8003db4 <_scanf_float+0x3a8>
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	e66a      	b.n	8003a9c <_scanf_float+0x90>
 8003dc6:	bf00      	nop
 8003dc8:	08006de8 	.word	0x08006de8

08003dcc <nanf>:
 8003dcc:	4800      	ldr	r0, [pc, #0]	; (8003dd0 <nanf+0x4>)
 8003dce:	4770      	bx	lr
 8003dd0:	7fc00000 	.word	0x7fc00000

08003dd4 <siprintf>:
 8003dd4:	b40e      	push	{r1, r2, r3}
 8003dd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dda:	b500      	push	{lr}
 8003ddc:	b09c      	sub	sp, #112	; 0x70
 8003dde:	ab1d      	add	r3, sp, #116	; 0x74
 8003de0:	9002      	str	r0, [sp, #8]
 8003de2:	9006      	str	r0, [sp, #24]
 8003de4:	9107      	str	r1, [sp, #28]
 8003de6:	9104      	str	r1, [sp, #16]
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <siprintf+0x38>)
 8003dea:	4909      	ldr	r1, [pc, #36]	; (8003e10 <siprintf+0x3c>)
 8003dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df0:	9105      	str	r1, [sp, #20]
 8003df2:	6800      	ldr	r0, [r0, #0]
 8003df4:	a902      	add	r1, sp, #8
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	f002 fdbc 	bl	8006974 <_svfiprintf_r>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	9b02      	ldr	r3, [sp, #8]
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	b01c      	add	sp, #112	; 0x70
 8003e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e08:	b003      	add	sp, #12
 8003e0a:	4770      	bx	lr
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	ffff0208 	.word	0xffff0208

08003e14 <strpbrk>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	7803      	ldrb	r3, [r0, #0]
 8003e18:	b1a3      	cbz	r3, 8003e44 <strpbrk+0x30>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003e24:	b14d      	cbz	r5, 8003e3a <strpbrk+0x26>
 8003e26:	460a      	mov	r2, r1
 8003e28:	e001      	b.n	8003e2e <strpbrk+0x1a>
 8003e2a:	42ae      	cmp	r6, r5
 8003e2c:	d005      	beq.n	8003e3a <strpbrk+0x26>
 8003e2e:	4614      	mov	r4, r2
 8003e30:	f812 6b01 	ldrb.w	r6, [r2], #1
 8003e34:	2e00      	cmp	r6, #0
 8003e36:	d1f8      	bne.n	8003e2a <strpbrk+0x16>
 8003e38:	e7f1      	b.n	8003e1e <strpbrk+0xa>
 8003e3a:	7823      	ldrb	r3, [r4, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf08      	it	eq
 8003e40:	2000      	moveq	r0, #0
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	4618      	mov	r0, r3
 8003e46:	e7fc      	b.n	8003e42 <strpbrk+0x2e>

08003e48 <sulp>:
 8003e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	4690      	mov	r8, r2
 8003e50:	f002 fb54 	bl	80064fc <__ulp>
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
 8003e58:	f1b8 0f00 	cmp.w	r8, #0
 8003e5c:	d011      	beq.n	8003e82 <sulp+0x3a>
 8003e5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	dd0b      	ble.n	8003e82 <sulp+0x3a>
 8003e6a:	2400      	movs	r4, #0
 8003e6c:	051b      	lsls	r3, r3, #20
 8003e6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003e72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f7fc fb4f 	bl	800051c <__aeabi_dmul>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e8a:	0000      	movs	r0, r0
 8003e8c:	0000      	movs	r0, r0
	...

08003e90 <_strtod_l>:
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	461f      	mov	r7, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	b0a1      	sub	sp, #132	; 0x84
 8003e9a:	4683      	mov	fp, r0
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	460e      	mov	r6, r1
 8003ea0:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ea2:	931c      	str	r3, [sp, #112]	; 0x70
 8003ea4:	f002 f827 	bl	8005ef6 <__localeconv_l>
 8003ea8:	4680      	mov	r8, r0
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	f7fc f972 	bl	8000194 <strlen>
 8003eb0:	f04f 0900 	mov.w	r9, #0
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	f04f 0a00 	mov.w	sl, #0
 8003eba:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	2a0d      	cmp	r2, #13
 8003ec2:	d832      	bhi.n	8003f2a <_strtod_l+0x9a>
 8003ec4:	2a09      	cmp	r2, #9
 8003ec6:	d236      	bcs.n	8003f36 <_strtod_l+0xa6>
 8003ec8:	2a00      	cmp	r2, #0
 8003eca:	d03e      	beq.n	8003f4a <_strtod_l+0xba>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	930d      	str	r3, [sp, #52]	; 0x34
 8003ed0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003ed2:	782b      	ldrb	r3, [r5, #0]
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	f040 80ac 	bne.w	8004032 <_strtod_l+0x1a2>
 8003eda:	786b      	ldrb	r3, [r5, #1]
 8003edc:	2b58      	cmp	r3, #88	; 0x58
 8003ede:	d001      	beq.n	8003ee4 <_strtod_l+0x54>
 8003ee0:	2b78      	cmp	r3, #120	; 0x78
 8003ee2:	d167      	bne.n	8003fb4 <_strtod_l+0x124>
 8003ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ee6:	9702      	str	r7, [sp, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	ab1c      	add	r3, sp, #112	; 0x70
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4a89      	ldr	r2, [pc, #548]	; (8004114 <_strtod_l+0x284>)
 8003ef0:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef2:	a91b      	add	r1, sp, #108	; 0x6c
 8003ef4:	4658      	mov	r0, fp
 8003ef6:	f001 fd23 	bl	8005940 <__gethex>
 8003efa:	f010 0407 	ands.w	r4, r0, #7
 8003efe:	4606      	mov	r6, r0
 8003f00:	d005      	beq.n	8003f0e <_strtod_l+0x7e>
 8003f02:	2c06      	cmp	r4, #6
 8003f04:	d12b      	bne.n	8003f5e <_strtod_l+0xce>
 8003f06:	2300      	movs	r3, #0
 8003f08:	3501      	adds	r5, #1
 8003f0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8003f0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 85a6 	bne.w	8004a62 <_strtod_l+0xbd2>
 8003f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f18:	b1e3      	cbz	r3, 8003f54 <_strtod_l+0xc4>
 8003f1a:	464a      	mov	r2, r9
 8003f1c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	b021      	add	sp, #132	; 0x84
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	2a2b      	cmp	r2, #43	; 0x2b
 8003f2c:	d015      	beq.n	8003f5a <_strtod_l+0xca>
 8003f2e:	2a2d      	cmp	r2, #45	; 0x2d
 8003f30:	d004      	beq.n	8003f3c <_strtod_l+0xac>
 8003f32:	2a20      	cmp	r2, #32
 8003f34:	d1ca      	bne.n	8003ecc <_strtod_l+0x3c>
 8003f36:	3301      	adds	r3, #1
 8003f38:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f3a:	e7bf      	b.n	8003ebc <_strtod_l+0x2c>
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	920d      	str	r2, [sp, #52]	; 0x34
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1c2      	bne.n	8003ed0 <_strtod_l+0x40>
 8003f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 8585 	bne.w	8004a5e <_strtod_l+0xbce>
 8003f54:	464a      	mov	r2, r9
 8003f56:	4653      	mov	r3, sl
 8003f58:	e7e2      	b.n	8003f20 <_strtod_l+0x90>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	e7ef      	b.n	8003f3e <_strtod_l+0xae>
 8003f5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f60:	b13a      	cbz	r2, 8003f72 <_strtod_l+0xe2>
 8003f62:	2135      	movs	r1, #53	; 0x35
 8003f64:	a81e      	add	r0, sp, #120	; 0x78
 8003f66:	f002 fbbc 	bl	80066e2 <__copybits>
 8003f6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f6c:	4658      	mov	r0, fp
 8003f6e:	f002 f82f 	bl	8005fd0 <_Bfree>
 8003f72:	3c01      	subs	r4, #1
 8003f74:	2c04      	cmp	r4, #4
 8003f76:	d806      	bhi.n	8003f86 <_strtod_l+0xf6>
 8003f78:	e8df f004 	tbb	[pc, r4]
 8003f7c:	1714030a 	.word	0x1714030a
 8003f80:	0a          	.byte	0x0a
 8003f81:	00          	.byte	0x00
 8003f82:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003f86:	0731      	lsls	r1, r6, #28
 8003f88:	d5c1      	bpl.n	8003f0e <_strtod_l+0x7e>
 8003f8a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003f8e:	e7be      	b.n	8003f0e <_strtod_l+0x7e>
 8003f90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003f92:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003f96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f9e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003fa2:	e7f0      	b.n	8003f86 <_strtod_l+0xf6>
 8003fa4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004118 <_strtod_l+0x288>
 8003fa8:	e7ed      	b.n	8003f86 <_strtod_l+0xf6>
 8003faa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003fae:	f04f 39ff 	mov.w	r9, #4294967295
 8003fb2:	e7e8      	b.n	8003f86 <_strtod_l+0xf6>
 8003fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b30      	cmp	r3, #48	; 0x30
 8003fbe:	d0f9      	beq.n	8003fb4 <_strtod_l+0x124>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0a4      	beq.n	8003f0e <_strtod_l+0x7e>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	2500      	movs	r5, #0
 8003fc8:	220a      	movs	r2, #10
 8003fca:	9307      	str	r3, [sp, #28]
 8003fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fce:	9506      	str	r5, [sp, #24]
 8003fd0:	9308      	str	r3, [sp, #32]
 8003fd2:	9504      	str	r5, [sp, #16]
 8003fd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003fd6:	7807      	ldrb	r7, [r0, #0]
 8003fd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003fdc:	b2d9      	uxtb	r1, r3
 8003fde:	2909      	cmp	r1, #9
 8003fe0:	d929      	bls.n	8004036 <_strtod_l+0x1a6>
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	f8d8 1000 	ldr.w	r1, [r8]
 8003fe8:	f002 fdcc 	bl	8006b84 <strncmp>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d031      	beq.n	8004054 <_strtod_l+0x1c4>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	9c04      	ldr	r4, [sp, #16]
 8003ff8:	9005      	str	r0, [sp, #20]
 8003ffa:	2b65      	cmp	r3, #101	; 0x65
 8003ffc:	d001      	beq.n	8004002 <_strtod_l+0x172>
 8003ffe:	2b45      	cmp	r3, #69	; 0x45
 8004000:	d114      	bne.n	800402c <_strtod_l+0x19c>
 8004002:	b924      	cbnz	r4, 800400e <_strtod_l+0x17e>
 8004004:	b910      	cbnz	r0, 800400c <_strtod_l+0x17c>
 8004006:	9b07      	ldr	r3, [sp, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d09e      	beq.n	8003f4a <_strtod_l+0xba>
 800400c:	2400      	movs	r4, #0
 800400e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004010:	1c73      	adds	r3, r6, #1
 8004012:	931b      	str	r3, [sp, #108]	; 0x6c
 8004014:	7873      	ldrb	r3, [r6, #1]
 8004016:	2b2b      	cmp	r3, #43	; 0x2b
 8004018:	d078      	beq.n	800410c <_strtod_l+0x27c>
 800401a:	2b2d      	cmp	r3, #45	; 0x2d
 800401c:	d070      	beq.n	8004100 <_strtod_l+0x270>
 800401e:	f04f 0c00 	mov.w	ip, #0
 8004022:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004026:	2f09      	cmp	r7, #9
 8004028:	d97c      	bls.n	8004124 <_strtod_l+0x294>
 800402a:	961b      	str	r6, [sp, #108]	; 0x6c
 800402c:	f04f 0e00 	mov.w	lr, #0
 8004030:	e09a      	b.n	8004168 <_strtod_l+0x2d8>
 8004032:	2300      	movs	r3, #0
 8004034:	e7c7      	b.n	8003fc6 <_strtod_l+0x136>
 8004036:	9904      	ldr	r1, [sp, #16]
 8004038:	3001      	adds	r0, #1
 800403a:	2908      	cmp	r1, #8
 800403c:	bfd7      	itett	le
 800403e:	9906      	ldrle	r1, [sp, #24]
 8004040:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004044:	fb02 3301 	mlale	r3, r2, r1, r3
 8004048:	9306      	strle	r3, [sp, #24]
 800404a:	9b04      	ldr	r3, [sp, #16]
 800404c:	901b      	str	r0, [sp, #108]	; 0x6c
 800404e:	3301      	adds	r3, #1
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	e7bf      	b.n	8003fd4 <_strtod_l+0x144>
 8004054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004056:	191a      	adds	r2, r3, r4
 8004058:	921b      	str	r2, [sp, #108]	; 0x6c
 800405a:	9a04      	ldr	r2, [sp, #16]
 800405c:	5d1b      	ldrb	r3, [r3, r4]
 800405e:	2a00      	cmp	r2, #0
 8004060:	d037      	beq.n	80040d2 <_strtod_l+0x242>
 8004062:	4602      	mov	r2, r0
 8004064:	9c04      	ldr	r4, [sp, #16]
 8004066:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800406a:	2909      	cmp	r1, #9
 800406c:	d913      	bls.n	8004096 <_strtod_l+0x206>
 800406e:	2101      	movs	r1, #1
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	e7c2      	b.n	8003ffa <_strtod_l+0x16a>
 8004074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004076:	3001      	adds	r0, #1
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	921b      	str	r2, [sp, #108]	; 0x6c
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d0f8      	beq.n	8004074 <_strtod_l+0x1e4>
 8004082:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004086:	2a08      	cmp	r2, #8
 8004088:	f200 84f0 	bhi.w	8004a6c <_strtod_l+0xbdc>
 800408c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800408e:	9208      	str	r2, [sp, #32]
 8004090:	4602      	mov	r2, r0
 8004092:	2000      	movs	r0, #0
 8004094:	4604      	mov	r4, r0
 8004096:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800409a:	f100 0101 	add.w	r1, r0, #1
 800409e:	d012      	beq.n	80040c6 <_strtod_l+0x236>
 80040a0:	440a      	add	r2, r1
 80040a2:	270a      	movs	r7, #10
 80040a4:	4621      	mov	r1, r4
 80040a6:	eb00 0c04 	add.w	ip, r0, r4
 80040aa:	458c      	cmp	ip, r1
 80040ac:	d113      	bne.n	80040d6 <_strtod_l+0x246>
 80040ae:	1821      	adds	r1, r4, r0
 80040b0:	2908      	cmp	r1, #8
 80040b2:	f104 0401 	add.w	r4, r4, #1
 80040b6:	4404      	add	r4, r0
 80040b8:	dc19      	bgt.n	80040ee <_strtod_l+0x25e>
 80040ba:	210a      	movs	r1, #10
 80040bc:	9b06      	ldr	r3, [sp, #24]
 80040be:	fb01 e303 	mla	r3, r1, r3, lr
 80040c2:	9306      	str	r3, [sp, #24]
 80040c4:	2100      	movs	r1, #0
 80040c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040c8:	1c58      	adds	r0, r3, #1
 80040ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	4608      	mov	r0, r1
 80040d0:	e7c9      	b.n	8004066 <_strtod_l+0x1d6>
 80040d2:	9804      	ldr	r0, [sp, #16]
 80040d4:	e7d3      	b.n	800407e <_strtod_l+0x1ee>
 80040d6:	2908      	cmp	r1, #8
 80040d8:	f101 0101 	add.w	r1, r1, #1
 80040dc:	dc03      	bgt.n	80040e6 <_strtod_l+0x256>
 80040de:	9b06      	ldr	r3, [sp, #24]
 80040e0:	437b      	muls	r3, r7
 80040e2:	9306      	str	r3, [sp, #24]
 80040e4:	e7e1      	b.n	80040aa <_strtod_l+0x21a>
 80040e6:	2910      	cmp	r1, #16
 80040e8:	bfd8      	it	le
 80040ea:	437d      	mulle	r5, r7
 80040ec:	e7dd      	b.n	80040aa <_strtod_l+0x21a>
 80040ee:	2c10      	cmp	r4, #16
 80040f0:	bfdc      	itt	le
 80040f2:	210a      	movle	r1, #10
 80040f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80040f8:	e7e4      	b.n	80040c4 <_strtod_l+0x234>
 80040fa:	2301      	movs	r3, #1
 80040fc:	9305      	str	r3, [sp, #20]
 80040fe:	e781      	b.n	8004004 <_strtod_l+0x174>
 8004100:	f04f 0c01 	mov.w	ip, #1
 8004104:	1cb3      	adds	r3, r6, #2
 8004106:	931b      	str	r3, [sp, #108]	; 0x6c
 8004108:	78b3      	ldrb	r3, [r6, #2]
 800410a:	e78a      	b.n	8004022 <_strtod_l+0x192>
 800410c:	f04f 0c00 	mov.w	ip, #0
 8004110:	e7f8      	b.n	8004104 <_strtod_l+0x274>
 8004112:	bf00      	nop
 8004114:	08006df0 	.word	0x08006df0
 8004118:	7ff00000 	.word	0x7ff00000
 800411c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800411e:	1c5f      	adds	r7, r3, #1
 8004120:	971b      	str	r7, [sp, #108]	; 0x6c
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d0f9      	beq.n	800411c <_strtod_l+0x28c>
 8004128:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800412c:	2f08      	cmp	r7, #8
 800412e:	f63f af7d 	bhi.w	800402c <_strtod_l+0x19c>
 8004132:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004136:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004138:	9309      	str	r3, [sp, #36]	; 0x24
 800413a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800413c:	1c5f      	adds	r7, r3, #1
 800413e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004146:	f1b8 0f09 	cmp.w	r8, #9
 800414a:	d937      	bls.n	80041bc <_strtod_l+0x32c>
 800414c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800414e:	1a7f      	subs	r7, r7, r1
 8004150:	2f08      	cmp	r7, #8
 8004152:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004156:	dc37      	bgt.n	80041c8 <_strtod_l+0x338>
 8004158:	45be      	cmp	lr, r7
 800415a:	bfa8      	it	ge
 800415c:	46be      	movge	lr, r7
 800415e:	f1bc 0f00 	cmp.w	ip, #0
 8004162:	d001      	beq.n	8004168 <_strtod_l+0x2d8>
 8004164:	f1ce 0e00 	rsb	lr, lr, #0
 8004168:	2c00      	cmp	r4, #0
 800416a:	d151      	bne.n	8004210 <_strtod_l+0x380>
 800416c:	2800      	cmp	r0, #0
 800416e:	f47f aece 	bne.w	8003f0e <_strtod_l+0x7e>
 8004172:	9a07      	ldr	r2, [sp, #28]
 8004174:	2a00      	cmp	r2, #0
 8004176:	f47f aeca 	bne.w	8003f0e <_strtod_l+0x7e>
 800417a:	9a05      	ldr	r2, [sp, #20]
 800417c:	2a00      	cmp	r2, #0
 800417e:	f47f aee4 	bne.w	8003f4a <_strtod_l+0xba>
 8004182:	2b4e      	cmp	r3, #78	; 0x4e
 8004184:	d027      	beq.n	80041d6 <_strtod_l+0x346>
 8004186:	dc21      	bgt.n	80041cc <_strtod_l+0x33c>
 8004188:	2b49      	cmp	r3, #73	; 0x49
 800418a:	f47f aede 	bne.w	8003f4a <_strtod_l+0xba>
 800418e:	49a4      	ldr	r1, [pc, #656]	; (8004420 <_strtod_l+0x590>)
 8004190:	a81b      	add	r0, sp, #108	; 0x6c
 8004192:	f001 fe09 	bl	8005da8 <__match>
 8004196:	2800      	cmp	r0, #0
 8004198:	f43f aed7 	beq.w	8003f4a <_strtod_l+0xba>
 800419c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800419e:	49a1      	ldr	r1, [pc, #644]	; (8004424 <_strtod_l+0x594>)
 80041a0:	3b01      	subs	r3, #1
 80041a2:	a81b      	add	r0, sp, #108	; 0x6c
 80041a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80041a6:	f001 fdff 	bl	8005da8 <__match>
 80041aa:	b910      	cbnz	r0, 80041b2 <_strtod_l+0x322>
 80041ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041ae:	3301      	adds	r3, #1
 80041b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80041b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004438 <_strtod_l+0x5a8>
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	e6a8      	b.n	8003f0e <_strtod_l+0x7e>
 80041bc:	210a      	movs	r1, #10
 80041be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80041c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80041c6:	e7b8      	b.n	800413a <_strtod_l+0x2aa>
 80041c8:	46be      	mov	lr, r7
 80041ca:	e7c8      	b.n	800415e <_strtod_l+0x2ce>
 80041cc:	2b69      	cmp	r3, #105	; 0x69
 80041ce:	d0de      	beq.n	800418e <_strtod_l+0x2fe>
 80041d0:	2b6e      	cmp	r3, #110	; 0x6e
 80041d2:	f47f aeba 	bne.w	8003f4a <_strtod_l+0xba>
 80041d6:	4994      	ldr	r1, [pc, #592]	; (8004428 <_strtod_l+0x598>)
 80041d8:	a81b      	add	r0, sp, #108	; 0x6c
 80041da:	f001 fde5 	bl	8005da8 <__match>
 80041de:	2800      	cmp	r0, #0
 80041e0:	f43f aeb3 	beq.w	8003f4a <_strtod_l+0xba>
 80041e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b28      	cmp	r3, #40	; 0x28
 80041ea:	d10e      	bne.n	800420a <_strtod_l+0x37a>
 80041ec:	aa1e      	add	r2, sp, #120	; 0x78
 80041ee:	498f      	ldr	r1, [pc, #572]	; (800442c <_strtod_l+0x59c>)
 80041f0:	a81b      	add	r0, sp, #108	; 0x6c
 80041f2:	f001 fded 	bl	8005dd0 <__hexnan>
 80041f6:	2805      	cmp	r0, #5
 80041f8:	d107      	bne.n	800420a <_strtod_l+0x37a>
 80041fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041fc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004200:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004204:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004208:	e681      	b.n	8003f0e <_strtod_l+0x7e>
 800420a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004440 <_strtod_l+0x5b0>
 800420e:	e7d2      	b.n	80041b6 <_strtod_l+0x326>
 8004210:	ebae 0302 	sub.w	r3, lr, r2
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	9b04      	ldr	r3, [sp, #16]
 8004218:	9806      	ldr	r0, [sp, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf08      	it	eq
 800421e:	4623      	moveq	r3, r4
 8004220:	2c10      	cmp	r4, #16
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	46a0      	mov	r8, r4
 8004226:	bfa8      	it	ge
 8004228:	f04f 0810 	movge.w	r8, #16
 800422c:	f7fc f8fc 	bl	8000428 <__aeabi_ui2d>
 8004230:	2c09      	cmp	r4, #9
 8004232:	4681      	mov	r9, r0
 8004234:	468a      	mov	sl, r1
 8004236:	dc13      	bgt.n	8004260 <_strtod_l+0x3d0>
 8004238:	9b07      	ldr	r3, [sp, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f43f ae67 	beq.w	8003f0e <_strtod_l+0x7e>
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	dd7e      	ble.n	8004342 <_strtod_l+0x4b2>
 8004244:	2b16      	cmp	r3, #22
 8004246:	dc65      	bgt.n	8004314 <_strtod_l+0x484>
 8004248:	4a79      	ldr	r2, [pc, #484]	; (8004430 <_strtod_l+0x5a0>)
 800424a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800424e:	464a      	mov	r2, r9
 8004250:	e9de 0100 	ldrd	r0, r1, [lr]
 8004254:	4653      	mov	r3, sl
 8004256:	f7fc f961 	bl	800051c <__aeabi_dmul>
 800425a:	4681      	mov	r9, r0
 800425c:	468a      	mov	sl, r1
 800425e:	e656      	b.n	8003f0e <_strtod_l+0x7e>
 8004260:	4b73      	ldr	r3, [pc, #460]	; (8004430 <_strtod_l+0x5a0>)
 8004262:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004266:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800426a:	f7fc f957 	bl	800051c <__aeabi_dmul>
 800426e:	4606      	mov	r6, r0
 8004270:	4628      	mov	r0, r5
 8004272:	460f      	mov	r7, r1
 8004274:	f7fc f8d8 	bl	8000428 <__aeabi_ui2d>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4630      	mov	r0, r6
 800427e:	4639      	mov	r1, r7
 8004280:	f7fb ff96 	bl	80001b0 <__adddf3>
 8004284:	2c0f      	cmp	r4, #15
 8004286:	4681      	mov	r9, r0
 8004288:	468a      	mov	sl, r1
 800428a:	ddd5      	ble.n	8004238 <_strtod_l+0x3a8>
 800428c:	9b07      	ldr	r3, [sp, #28]
 800428e:	eba4 0808 	sub.w	r8, r4, r8
 8004292:	4498      	add	r8, r3
 8004294:	f1b8 0f00 	cmp.w	r8, #0
 8004298:	f340 809a 	ble.w	80043d0 <_strtod_l+0x540>
 800429c:	f018 030f 	ands.w	r3, r8, #15
 80042a0:	d00a      	beq.n	80042b8 <_strtod_l+0x428>
 80042a2:	4963      	ldr	r1, [pc, #396]	; (8004430 <_strtod_l+0x5a0>)
 80042a4:	464a      	mov	r2, r9
 80042a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ae:	4653      	mov	r3, sl
 80042b0:	f7fc f934 	bl	800051c <__aeabi_dmul>
 80042b4:	4681      	mov	r9, r0
 80042b6:	468a      	mov	sl, r1
 80042b8:	f038 080f 	bics.w	r8, r8, #15
 80042bc:	d077      	beq.n	80043ae <_strtod_l+0x51e>
 80042be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80042c2:	dd4b      	ble.n	800435c <_strtod_l+0x4cc>
 80042c4:	f04f 0800 	mov.w	r8, #0
 80042c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80042cc:	f8cd 8020 	str.w	r8, [sp, #32]
 80042d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80042d4:	2322      	movs	r3, #34	; 0x22
 80042d6:	f04f 0900 	mov.w	r9, #0
 80042da:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004438 <_strtod_l+0x5a8>
 80042de:	f8cb 3000 	str.w	r3, [fp]
 80042e2:	9b08      	ldr	r3, [sp, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f43f ae12 	beq.w	8003f0e <_strtod_l+0x7e>
 80042ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80042ec:	4658      	mov	r0, fp
 80042ee:	f001 fe6f 	bl	8005fd0 <_Bfree>
 80042f2:	9906      	ldr	r1, [sp, #24]
 80042f4:	4658      	mov	r0, fp
 80042f6:	f001 fe6b 	bl	8005fd0 <_Bfree>
 80042fa:	9904      	ldr	r1, [sp, #16]
 80042fc:	4658      	mov	r0, fp
 80042fe:	f001 fe67 	bl	8005fd0 <_Bfree>
 8004302:	9908      	ldr	r1, [sp, #32]
 8004304:	4658      	mov	r0, fp
 8004306:	f001 fe63 	bl	8005fd0 <_Bfree>
 800430a:	4641      	mov	r1, r8
 800430c:	4658      	mov	r0, fp
 800430e:	f001 fe5f 	bl	8005fd0 <_Bfree>
 8004312:	e5fc      	b.n	8003f0e <_strtod_l+0x7e>
 8004314:	9a07      	ldr	r2, [sp, #28]
 8004316:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800431a:	4293      	cmp	r3, r2
 800431c:	dbb6      	blt.n	800428c <_strtod_l+0x3fc>
 800431e:	4d44      	ldr	r5, [pc, #272]	; (8004430 <_strtod_l+0x5a0>)
 8004320:	f1c4 040f 	rsb	r4, r4, #15
 8004324:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004328:	464a      	mov	r2, r9
 800432a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432e:	4653      	mov	r3, sl
 8004330:	f7fc f8f4 	bl	800051c <__aeabi_dmul>
 8004334:	9b07      	ldr	r3, [sp, #28]
 8004336:	1b1c      	subs	r4, r3, r4
 8004338:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800433c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004340:	e789      	b.n	8004256 <_strtod_l+0x3c6>
 8004342:	f113 0f16 	cmn.w	r3, #22
 8004346:	dba1      	blt.n	800428c <_strtod_l+0x3fc>
 8004348:	4a39      	ldr	r2, [pc, #228]	; (8004430 <_strtod_l+0x5a0>)
 800434a:	4648      	mov	r0, r9
 800434c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004350:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004354:	4651      	mov	r1, sl
 8004356:	f7fc fa0b 	bl	8000770 <__aeabi_ddiv>
 800435a:	e77e      	b.n	800425a <_strtod_l+0x3ca>
 800435c:	2300      	movs	r3, #0
 800435e:	4648      	mov	r0, r9
 8004360:	4651      	mov	r1, sl
 8004362:	461d      	mov	r5, r3
 8004364:	4e33      	ldr	r6, [pc, #204]	; (8004434 <_strtod_l+0x5a4>)
 8004366:	ea4f 1828 	mov.w	r8, r8, asr #4
 800436a:	f1b8 0f01 	cmp.w	r8, #1
 800436e:	dc21      	bgt.n	80043b4 <_strtod_l+0x524>
 8004370:	b10b      	cbz	r3, 8004376 <_strtod_l+0x4e6>
 8004372:	4681      	mov	r9, r0
 8004374:	468a      	mov	sl, r1
 8004376:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <_strtod_l+0x5a4>)
 8004378:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800437c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004380:	464a      	mov	r2, r9
 8004382:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004386:	4653      	mov	r3, sl
 8004388:	f7fc f8c8 	bl	800051c <__aeabi_dmul>
 800438c:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <_strtod_l+0x5a8>)
 800438e:	460a      	mov	r2, r1
 8004390:	400b      	ands	r3, r1
 8004392:	492a      	ldr	r1, [pc, #168]	; (800443c <_strtod_l+0x5ac>)
 8004394:	4681      	mov	r9, r0
 8004396:	428b      	cmp	r3, r1
 8004398:	d894      	bhi.n	80042c4 <_strtod_l+0x434>
 800439a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800439e:	428b      	cmp	r3, r1
 80043a0:	bf86      	itte	hi
 80043a2:	f04f 39ff 	movhi.w	r9, #4294967295
 80043a6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004444 <_strtod_l+0x5b4>
 80043aa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80043ae:	2300      	movs	r3, #0
 80043b0:	9305      	str	r3, [sp, #20]
 80043b2:	e07b      	b.n	80044ac <_strtod_l+0x61c>
 80043b4:	f018 0f01 	tst.w	r8, #1
 80043b8:	d006      	beq.n	80043c8 <_strtod_l+0x538>
 80043ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fc f8ab 	bl	800051c <__aeabi_dmul>
 80043c6:	2301      	movs	r3, #1
 80043c8:	3501      	adds	r5, #1
 80043ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80043ce:	e7cc      	b.n	800436a <_strtod_l+0x4da>
 80043d0:	d0ed      	beq.n	80043ae <_strtod_l+0x51e>
 80043d2:	f1c8 0800 	rsb	r8, r8, #0
 80043d6:	f018 020f 	ands.w	r2, r8, #15
 80043da:	d00a      	beq.n	80043f2 <_strtod_l+0x562>
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <_strtod_l+0x5a0>)
 80043de:	4648      	mov	r0, r9
 80043e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f9c1 	bl	8000770 <__aeabi_ddiv>
 80043ee:	4681      	mov	r9, r0
 80043f0:	468a      	mov	sl, r1
 80043f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80043f6:	d0da      	beq.n	80043ae <_strtod_l+0x51e>
 80043f8:	f1b8 0f1f 	cmp.w	r8, #31
 80043fc:	dd24      	ble.n	8004448 <_strtod_l+0x5b8>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	f8cd 8010 	str.w	r8, [sp, #16]
 8004406:	f8cd 8020 	str.w	r8, [sp, #32]
 800440a:	f8cd 8018 	str.w	r8, [sp, #24]
 800440e:	2322      	movs	r3, #34	; 0x22
 8004410:	f04f 0900 	mov.w	r9, #0
 8004414:	f04f 0a00 	mov.w	sl, #0
 8004418:	f8cb 3000 	str.w	r3, [fp]
 800441c:	e761      	b.n	80042e2 <_strtod_l+0x452>
 800441e:	bf00      	nop
 8004420:	08006db9 	.word	0x08006db9
 8004424:	08006e43 	.word	0x08006e43
 8004428:	08006dc1 	.word	0x08006dc1
 800442c:	08006e04 	.word	0x08006e04
 8004430:	08006e80 	.word	0x08006e80
 8004434:	08006e58 	.word	0x08006e58
 8004438:	7ff00000 	.word	0x7ff00000
 800443c:	7ca00000 	.word	0x7ca00000
 8004440:	fff80000 	.word	0xfff80000
 8004444:	7fefffff 	.word	0x7fefffff
 8004448:	f018 0310 	ands.w	r3, r8, #16
 800444c:	bf18      	it	ne
 800444e:	236a      	movne	r3, #106	; 0x6a
 8004450:	4648      	mov	r0, r9
 8004452:	9305      	str	r3, [sp, #20]
 8004454:	4651      	mov	r1, sl
 8004456:	2300      	movs	r3, #0
 8004458:	4da1      	ldr	r5, [pc, #644]	; (80046e0 <_strtod_l+0x850>)
 800445a:	f1b8 0f00 	cmp.w	r8, #0
 800445e:	f300 8113 	bgt.w	8004688 <_strtod_l+0x7f8>
 8004462:	b10b      	cbz	r3, 8004468 <_strtod_l+0x5d8>
 8004464:	4681      	mov	r9, r0
 8004466:	468a      	mov	sl, r1
 8004468:	9b05      	ldr	r3, [sp, #20]
 800446a:	b1bb      	cbz	r3, 800449c <_strtod_l+0x60c>
 800446c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004470:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004474:	2b00      	cmp	r3, #0
 8004476:	4651      	mov	r1, sl
 8004478:	dd10      	ble.n	800449c <_strtod_l+0x60c>
 800447a:	2b1f      	cmp	r3, #31
 800447c:	f340 8110 	ble.w	80046a0 <_strtod_l+0x810>
 8004480:	2b34      	cmp	r3, #52	; 0x34
 8004482:	bfd8      	it	le
 8004484:	f04f 32ff 	movle.w	r2, #4294967295
 8004488:	f04f 0900 	mov.w	r9, #0
 800448c:	bfcf      	iteee	gt
 800448e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004492:	3b20      	suble	r3, #32
 8004494:	fa02 f303 	lslle.w	r3, r2, r3
 8004498:	ea03 0a01 	andle.w	sl, r3, r1
 800449c:	2200      	movs	r2, #0
 800449e:	2300      	movs	r3, #0
 80044a0:	4648      	mov	r0, r9
 80044a2:	4651      	mov	r1, sl
 80044a4:	f7fc faa2 	bl	80009ec <__aeabi_dcmpeq>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d1a8      	bne.n	80043fe <_strtod_l+0x56e>
 80044ac:	9b06      	ldr	r3, [sp, #24]
 80044ae:	9a04      	ldr	r2, [sp, #16]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	9908      	ldr	r1, [sp, #32]
 80044b4:	4623      	mov	r3, r4
 80044b6:	4658      	mov	r0, fp
 80044b8:	f001 fddc 	bl	8006074 <__s2b>
 80044bc:	9008      	str	r0, [sp, #32]
 80044be:	2800      	cmp	r0, #0
 80044c0:	f43f af00 	beq.w	80042c4 <_strtod_l+0x434>
 80044c4:	9a07      	ldr	r2, [sp, #28]
 80044c6:	9b07      	ldr	r3, [sp, #28]
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	f1c3 0300 	rsb	r3, r3, #0
 80044ce:	bfa8      	it	ge
 80044d0:	2300      	movge	r3, #0
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	930e      	str	r3, [sp, #56]	; 0x38
 80044d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80044dc:	9316      	str	r3, [sp, #88]	; 0x58
 80044de:	f8cd 8010 	str.w	r8, [sp, #16]
 80044e2:	9b08      	ldr	r3, [sp, #32]
 80044e4:	4658      	mov	r0, fp
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	f001 fd3e 	bl	8005f68 <_Balloc>
 80044ec:	9006      	str	r0, [sp, #24]
 80044ee:	2800      	cmp	r0, #0
 80044f0:	f43f aef0 	beq.w	80042d4 <_strtod_l+0x444>
 80044f4:	9b08      	ldr	r3, [sp, #32]
 80044f6:	300c      	adds	r0, #12
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	f103 010c 	add.w	r1, r3, #12
 80044fe:	3202      	adds	r2, #2
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	f7fe fe21 	bl	8003148 <memcpy>
 8004506:	ab1e      	add	r3, sp, #120	; 0x78
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	ab1d      	add	r3, sp, #116	; 0x74
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	464a      	mov	r2, r9
 8004510:	4653      	mov	r3, sl
 8004512:	4658      	mov	r0, fp
 8004514:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004518:	f002 f866 	bl	80065e8 <__d2b>
 800451c:	901c      	str	r0, [sp, #112]	; 0x70
 800451e:	2800      	cmp	r0, #0
 8004520:	f43f aed8 	beq.w	80042d4 <_strtod_l+0x444>
 8004524:	2101      	movs	r1, #1
 8004526:	4658      	mov	r0, fp
 8004528:	f001 fe30 	bl	800618c <__i2b>
 800452c:	9004      	str	r0, [sp, #16]
 800452e:	4603      	mov	r3, r0
 8004530:	2800      	cmp	r0, #0
 8004532:	f43f aecf 	beq.w	80042d4 <_strtod_l+0x444>
 8004536:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004538:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800453a:	2d00      	cmp	r5, #0
 800453c:	bfab      	itete	ge
 800453e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004540:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004542:	18ee      	addge	r6, r5, r3
 8004544:	1b5c      	sublt	r4, r3, r5
 8004546:	9b05      	ldr	r3, [sp, #20]
 8004548:	bfa8      	it	ge
 800454a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800454c:	eba5 0503 	sub.w	r5, r5, r3
 8004550:	4415      	add	r5, r2
 8004552:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <_strtod_l+0x854>)
 8004554:	f105 35ff 	add.w	r5, r5, #4294967295
 8004558:	bfb8      	it	lt
 800455a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800455c:	429d      	cmp	r5, r3
 800455e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004562:	f280 80af 	bge.w	80046c4 <_strtod_l+0x834>
 8004566:	1b5b      	subs	r3, r3, r5
 8004568:	2b1f      	cmp	r3, #31
 800456a:	eba2 0203 	sub.w	r2, r2, r3
 800456e:	f04f 0701 	mov.w	r7, #1
 8004572:	f300 809c 	bgt.w	80046ae <_strtod_l+0x81e>
 8004576:	2500      	movs	r5, #0
 8004578:	fa07 f303 	lsl.w	r3, r7, r3
 800457c:	930f      	str	r3, [sp, #60]	; 0x3c
 800457e:	18b7      	adds	r7, r6, r2
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	42be      	cmp	r6, r7
 8004584:	4414      	add	r4, r2
 8004586:	441c      	add	r4, r3
 8004588:	4633      	mov	r3, r6
 800458a:	bfa8      	it	ge
 800458c:	463b      	movge	r3, r7
 800458e:	42a3      	cmp	r3, r4
 8004590:	bfa8      	it	ge
 8004592:	4623      	movge	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bfc2      	ittt	gt
 8004598:	1aff      	subgt	r7, r7, r3
 800459a:	1ae4      	subgt	r4, r4, r3
 800459c:	1af6      	subgt	r6, r6, r3
 800459e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045a0:	b1bb      	cbz	r3, 80045d2 <_strtod_l+0x742>
 80045a2:	461a      	mov	r2, r3
 80045a4:	9904      	ldr	r1, [sp, #16]
 80045a6:	4658      	mov	r0, fp
 80045a8:	f001 fe8e 	bl	80062c8 <__pow5mult>
 80045ac:	9004      	str	r0, [sp, #16]
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f43f ae90 	beq.w	80042d4 <_strtod_l+0x444>
 80045b4:	4601      	mov	r1, r0
 80045b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045b8:	4658      	mov	r0, fp
 80045ba:	f001 fdf0 	bl	800619e <__multiply>
 80045be:	9009      	str	r0, [sp, #36]	; 0x24
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f43f ae87 	beq.w	80042d4 <_strtod_l+0x444>
 80045c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80045c8:	4658      	mov	r0, fp
 80045ca:	f001 fd01 	bl	8005fd0 <_Bfree>
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	931c      	str	r3, [sp, #112]	; 0x70
 80045d2:	2f00      	cmp	r7, #0
 80045d4:	dc7a      	bgt.n	80046cc <_strtod_l+0x83c>
 80045d6:	9b07      	ldr	r3, [sp, #28]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dd08      	ble.n	80045ee <_strtod_l+0x75e>
 80045dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80045de:	9906      	ldr	r1, [sp, #24]
 80045e0:	4658      	mov	r0, fp
 80045e2:	f001 fe71 	bl	80062c8 <__pow5mult>
 80045e6:	9006      	str	r0, [sp, #24]
 80045e8:	2800      	cmp	r0, #0
 80045ea:	f43f ae73 	beq.w	80042d4 <_strtod_l+0x444>
 80045ee:	2c00      	cmp	r4, #0
 80045f0:	dd08      	ble.n	8004604 <_strtod_l+0x774>
 80045f2:	4622      	mov	r2, r4
 80045f4:	9906      	ldr	r1, [sp, #24]
 80045f6:	4658      	mov	r0, fp
 80045f8:	f001 feb4 	bl	8006364 <__lshift>
 80045fc:	9006      	str	r0, [sp, #24]
 80045fe:	2800      	cmp	r0, #0
 8004600:	f43f ae68 	beq.w	80042d4 <_strtod_l+0x444>
 8004604:	2e00      	cmp	r6, #0
 8004606:	dd08      	ble.n	800461a <_strtod_l+0x78a>
 8004608:	4632      	mov	r2, r6
 800460a:	9904      	ldr	r1, [sp, #16]
 800460c:	4658      	mov	r0, fp
 800460e:	f001 fea9 	bl	8006364 <__lshift>
 8004612:	9004      	str	r0, [sp, #16]
 8004614:	2800      	cmp	r0, #0
 8004616:	f43f ae5d 	beq.w	80042d4 <_strtod_l+0x444>
 800461a:	9a06      	ldr	r2, [sp, #24]
 800461c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800461e:	4658      	mov	r0, fp
 8004620:	f001 ff0e 	bl	8006440 <__mdiff>
 8004624:	4680      	mov	r8, r0
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f ae54 	beq.w	80042d4 <_strtod_l+0x444>
 800462c:	2400      	movs	r4, #0
 800462e:	68c3      	ldr	r3, [r0, #12]
 8004630:	9904      	ldr	r1, [sp, #16]
 8004632:	60c4      	str	r4, [r0, #12]
 8004634:	930c      	str	r3, [sp, #48]	; 0x30
 8004636:	f001 fee9 	bl	800640c <__mcmp>
 800463a:	42a0      	cmp	r0, r4
 800463c:	da54      	bge.n	80046e8 <_strtod_l+0x858>
 800463e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004640:	b9f3      	cbnz	r3, 8004680 <_strtod_l+0x7f0>
 8004642:	f1b9 0f00 	cmp.w	r9, #0
 8004646:	d11b      	bne.n	8004680 <_strtod_l+0x7f0>
 8004648:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800464c:	b9c3      	cbnz	r3, 8004680 <_strtod_l+0x7f0>
 800464e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004652:	0d1b      	lsrs	r3, r3, #20
 8004654:	051b      	lsls	r3, r3, #20
 8004656:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800465a:	d911      	bls.n	8004680 <_strtod_l+0x7f0>
 800465c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004660:	b91b      	cbnz	r3, 800466a <_strtod_l+0x7da>
 8004662:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004666:	2b01      	cmp	r3, #1
 8004668:	dd0a      	ble.n	8004680 <_strtod_l+0x7f0>
 800466a:	4641      	mov	r1, r8
 800466c:	2201      	movs	r2, #1
 800466e:	4658      	mov	r0, fp
 8004670:	f001 fe78 	bl	8006364 <__lshift>
 8004674:	9904      	ldr	r1, [sp, #16]
 8004676:	4680      	mov	r8, r0
 8004678:	f001 fec8 	bl	800640c <__mcmp>
 800467c:	2800      	cmp	r0, #0
 800467e:	dc68      	bgt.n	8004752 <_strtod_l+0x8c2>
 8004680:	9b05      	ldr	r3, [sp, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d172      	bne.n	800476c <_strtod_l+0x8dc>
 8004686:	e630      	b.n	80042ea <_strtod_l+0x45a>
 8004688:	f018 0f01 	tst.w	r8, #1
 800468c:	d004      	beq.n	8004698 <_strtod_l+0x808>
 800468e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004692:	f7fb ff43 	bl	800051c <__aeabi_dmul>
 8004696:	2301      	movs	r3, #1
 8004698:	ea4f 0868 	mov.w	r8, r8, asr #1
 800469c:	3508      	adds	r5, #8
 800469e:	e6dc      	b.n	800445a <_strtod_l+0x5ca>
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	ea03 0909 	and.w	r9, r3, r9
 80046ac:	e6f6      	b.n	800449c <_strtod_l+0x60c>
 80046ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80046b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80046b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80046ba:	35e2      	adds	r5, #226	; 0xe2
 80046bc:	fa07 f505 	lsl.w	r5, r7, r5
 80046c0:	970f      	str	r7, [sp, #60]	; 0x3c
 80046c2:	e75c      	b.n	800457e <_strtod_l+0x6ee>
 80046c4:	2301      	movs	r3, #1
 80046c6:	2500      	movs	r5, #0
 80046c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80046ca:	e758      	b.n	800457e <_strtod_l+0x6ee>
 80046cc:	463a      	mov	r2, r7
 80046ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046d0:	4658      	mov	r0, fp
 80046d2:	f001 fe47 	bl	8006364 <__lshift>
 80046d6:	901c      	str	r0, [sp, #112]	; 0x70
 80046d8:	2800      	cmp	r0, #0
 80046da:	f47f af7c 	bne.w	80045d6 <_strtod_l+0x746>
 80046de:	e5f9      	b.n	80042d4 <_strtod_l+0x444>
 80046e0:	08006e18 	.word	0x08006e18
 80046e4:	fffffc02 	.word	0xfffffc02
 80046e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80046ec:	f040 8089 	bne.w	8004802 <_strtod_l+0x972>
 80046f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046f2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80046f6:	b342      	cbz	r2, 800474a <_strtod_l+0x8ba>
 80046f8:	4aaf      	ldr	r2, [pc, #700]	; (80049b8 <_strtod_l+0xb28>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d156      	bne.n	80047ac <_strtod_l+0x91c>
 80046fe:	9b05      	ldr	r3, [sp, #20]
 8004700:	4648      	mov	r0, r9
 8004702:	b1eb      	cbz	r3, 8004740 <_strtod_l+0x8b0>
 8004704:	4653      	mov	r3, sl
 8004706:	4aad      	ldr	r2, [pc, #692]	; (80049bc <_strtod_l+0xb2c>)
 8004708:	f04f 31ff 	mov.w	r1, #4294967295
 800470c:	401a      	ands	r2, r3
 800470e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004712:	d818      	bhi.n	8004746 <_strtod_l+0x8b6>
 8004714:	0d12      	lsrs	r2, r2, #20
 8004716:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	4298      	cmp	r0, r3
 8004720:	d144      	bne.n	80047ac <_strtod_l+0x91c>
 8004722:	4ba7      	ldr	r3, [pc, #668]	; (80049c0 <_strtod_l+0xb30>)
 8004724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004726:	429a      	cmp	r2, r3
 8004728:	d102      	bne.n	8004730 <_strtod_l+0x8a0>
 800472a:	3001      	adds	r0, #1
 800472c:	f43f add2 	beq.w	80042d4 <_strtod_l+0x444>
 8004730:	4ba2      	ldr	r3, [pc, #648]	; (80049bc <_strtod_l+0xb2c>)
 8004732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004734:	f04f 0900 	mov.w	r9, #0
 8004738:	401a      	ands	r2, r3
 800473a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800473e:	e79f      	b.n	8004680 <_strtod_l+0x7f0>
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	e7eb      	b.n	800471e <_strtod_l+0x88e>
 8004746:	460b      	mov	r3, r1
 8004748:	e7e9      	b.n	800471e <_strtod_l+0x88e>
 800474a:	bb7b      	cbnz	r3, 80047ac <_strtod_l+0x91c>
 800474c:	f1b9 0f00 	cmp.w	r9, #0
 8004750:	d12c      	bne.n	80047ac <_strtod_l+0x91c>
 8004752:	9905      	ldr	r1, [sp, #20]
 8004754:	4653      	mov	r3, sl
 8004756:	4a99      	ldr	r2, [pc, #612]	; (80049bc <_strtod_l+0xb2c>)
 8004758:	b1f1      	cbz	r1, 8004798 <_strtod_l+0x908>
 800475a:	ea02 010a 	and.w	r1, r2, sl
 800475e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004762:	dc19      	bgt.n	8004798 <_strtod_l+0x908>
 8004764:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004768:	f77f ae51 	ble.w	800440e <_strtod_l+0x57e>
 800476c:	2300      	movs	r3, #0
 800476e:	4a95      	ldr	r2, [pc, #596]	; (80049c4 <_strtod_l+0xb34>)
 8004770:	4648      	mov	r0, r9
 8004772:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004776:	4651      	mov	r1, sl
 8004778:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800477c:	f7fb fece 	bl	800051c <__aeabi_dmul>
 8004780:	4681      	mov	r9, r0
 8004782:	468a      	mov	sl, r1
 8004784:	2900      	cmp	r1, #0
 8004786:	f47f adb0 	bne.w	80042ea <_strtod_l+0x45a>
 800478a:	2800      	cmp	r0, #0
 800478c:	f47f adad 	bne.w	80042ea <_strtod_l+0x45a>
 8004790:	2322      	movs	r3, #34	; 0x22
 8004792:	f8cb 3000 	str.w	r3, [fp]
 8004796:	e5a8      	b.n	80042ea <_strtod_l+0x45a>
 8004798:	4013      	ands	r3, r2
 800479a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800479e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80047a2:	f04f 39ff 	mov.w	r9, #4294967295
 80047a6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80047aa:	e769      	b.n	8004680 <_strtod_l+0x7f0>
 80047ac:	b19d      	cbz	r5, 80047d6 <_strtod_l+0x946>
 80047ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b0:	421d      	tst	r5, r3
 80047b2:	f43f af65 	beq.w	8004680 <_strtod_l+0x7f0>
 80047b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047b8:	9a05      	ldr	r2, [sp, #20]
 80047ba:	4648      	mov	r0, r9
 80047bc:	4651      	mov	r1, sl
 80047be:	b173      	cbz	r3, 80047de <_strtod_l+0x94e>
 80047c0:	f7ff fb42 	bl	8003e48 <sulp>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047cc:	f7fb fcf0 	bl	80001b0 <__adddf3>
 80047d0:	4681      	mov	r9, r0
 80047d2:	468a      	mov	sl, r1
 80047d4:	e754      	b.n	8004680 <_strtod_l+0x7f0>
 80047d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047d8:	ea13 0f09 	tst.w	r3, r9
 80047dc:	e7e9      	b.n	80047b2 <_strtod_l+0x922>
 80047de:	f7ff fb33 	bl	8003e48 <sulp>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047ea:	f7fb fcdf 	bl	80001ac <__aeabi_dsub>
 80047ee:	2200      	movs	r2, #0
 80047f0:	2300      	movs	r3, #0
 80047f2:	4681      	mov	r9, r0
 80047f4:	468a      	mov	sl, r1
 80047f6:	f7fc f8f9 	bl	80009ec <__aeabi_dcmpeq>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f47f ae07 	bne.w	800440e <_strtod_l+0x57e>
 8004800:	e73e      	b.n	8004680 <_strtod_l+0x7f0>
 8004802:	9904      	ldr	r1, [sp, #16]
 8004804:	4640      	mov	r0, r8
 8004806:	f001 ff3e 	bl	8006686 <__ratio>
 800480a:	2200      	movs	r2, #0
 800480c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004810:	4606      	mov	r6, r0
 8004812:	460f      	mov	r7, r1
 8004814:	f7fc f8fe 	bl	8000a14 <__aeabi_dcmple>
 8004818:	2800      	cmp	r0, #0
 800481a:	d075      	beq.n	8004908 <_strtod_l+0xa78>
 800481c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800481e:	2b00      	cmp	r3, #0
 8004820:	d047      	beq.n	80048b2 <_strtod_l+0xa22>
 8004822:	2600      	movs	r6, #0
 8004824:	4f68      	ldr	r7, [pc, #416]	; (80049c8 <_strtod_l+0xb38>)
 8004826:	4d68      	ldr	r5, [pc, #416]	; (80049c8 <_strtod_l+0xb38>)
 8004828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800482e:	0d1b      	lsrs	r3, r3, #20
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	930f      	str	r3, [sp, #60]	; 0x3c
 8004834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004836:	4b65      	ldr	r3, [pc, #404]	; (80049cc <_strtod_l+0xb3c>)
 8004838:	429a      	cmp	r2, r3
 800483a:	f040 80cf 	bne.w	80049dc <_strtod_l+0xb4c>
 800483e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004842:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004848:	4648      	mov	r0, r9
 800484a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800484e:	4651      	mov	r1, sl
 8004850:	f001 fe54 	bl	80064fc <__ulp>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fe5e 	bl	800051c <__aeabi_dmul>
 8004860:	464a      	mov	r2, r9
 8004862:	4653      	mov	r3, sl
 8004864:	f7fb fca4 	bl	80001b0 <__adddf3>
 8004868:	460b      	mov	r3, r1
 800486a:	4954      	ldr	r1, [pc, #336]	; (80049bc <_strtod_l+0xb2c>)
 800486c:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <_strtod_l+0xb40>)
 800486e:	4019      	ands	r1, r3
 8004870:	4291      	cmp	r1, r2
 8004872:	4681      	mov	r9, r0
 8004874:	d95e      	bls.n	8004934 <_strtod_l+0xaa4>
 8004876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004878:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <_strtod_l+0x9f8>
 8004880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004882:	3301      	adds	r3, #1
 8004884:	f43f ad26 	beq.w	80042d4 <_strtod_l+0x444>
 8004888:	f04f 39ff 	mov.w	r9, #4294967295
 800488c:	f8df a130 	ldr.w	sl, [pc, #304]	; 80049c0 <_strtod_l+0xb30>
 8004890:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004892:	4658      	mov	r0, fp
 8004894:	f001 fb9c 	bl	8005fd0 <_Bfree>
 8004898:	9906      	ldr	r1, [sp, #24]
 800489a:	4658      	mov	r0, fp
 800489c:	f001 fb98 	bl	8005fd0 <_Bfree>
 80048a0:	9904      	ldr	r1, [sp, #16]
 80048a2:	4658      	mov	r0, fp
 80048a4:	f001 fb94 	bl	8005fd0 <_Bfree>
 80048a8:	4641      	mov	r1, r8
 80048aa:	4658      	mov	r0, fp
 80048ac:	f001 fb90 	bl	8005fd0 <_Bfree>
 80048b0:	e617      	b.n	80044e2 <_strtod_l+0x652>
 80048b2:	f1b9 0f00 	cmp.w	r9, #0
 80048b6:	d119      	bne.n	80048ec <_strtod_l+0xa5c>
 80048b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048be:	b9e3      	cbnz	r3, 80048fa <_strtod_l+0xa6a>
 80048c0:	2200      	movs	r2, #0
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <_strtod_l+0xb38>)
 80048c4:	4630      	mov	r0, r6
 80048c6:	4639      	mov	r1, r7
 80048c8:	f7fc f89a 	bl	8000a00 <__aeabi_dcmplt>
 80048cc:	b9c8      	cbnz	r0, 8004902 <_strtod_l+0xa72>
 80048ce:	2200      	movs	r2, #0
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <_strtod_l+0xb44>)
 80048d2:	4630      	mov	r0, r6
 80048d4:	4639      	mov	r1, r7
 80048d6:	f7fb fe21 	bl	800051c <__aeabi_dmul>
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80048e2:	9418      	str	r4, [sp, #96]	; 0x60
 80048e4:	9319      	str	r3, [sp, #100]	; 0x64
 80048e6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80048ea:	e79d      	b.n	8004828 <_strtod_l+0x998>
 80048ec:	f1b9 0f01 	cmp.w	r9, #1
 80048f0:	d103      	bne.n	80048fa <_strtod_l+0xa6a>
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f43f ad8a 	beq.w	800440e <_strtod_l+0x57e>
 80048fa:	2600      	movs	r6, #0
 80048fc:	4f36      	ldr	r7, [pc, #216]	; (80049d8 <_strtod_l+0xb48>)
 80048fe:	2400      	movs	r4, #0
 8004900:	e791      	b.n	8004826 <_strtod_l+0x996>
 8004902:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004904:	4d33      	ldr	r5, [pc, #204]	; (80049d4 <_strtod_l+0xb44>)
 8004906:	e7ea      	b.n	80048de <_strtod_l+0xa4e>
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <_strtod_l+0xb44>)
 800490a:	2200      	movs	r2, #0
 800490c:	4630      	mov	r0, r6
 800490e:	4639      	mov	r1, r7
 8004910:	f7fb fe04 	bl	800051c <__aeabi_dmul>
 8004914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	b933      	cbnz	r3, 800492a <_strtod_l+0xa9a>
 800491c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004920:	9010      	str	r0, [sp, #64]	; 0x40
 8004922:	9311      	str	r3, [sp, #68]	; 0x44
 8004924:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004928:	e77e      	b.n	8004828 <_strtod_l+0x998>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004932:	e7f7      	b.n	8004924 <_strtod_l+0xa94>
 8004934:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004938:	9b05      	ldr	r3, [sp, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1a8      	bne.n	8004890 <_strtod_l+0xa00>
 800493e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004942:	0d1b      	lsrs	r3, r3, #20
 8004944:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004946:	051b      	lsls	r3, r3, #20
 8004948:	429a      	cmp	r2, r3
 800494a:	4656      	mov	r6, sl
 800494c:	d1a0      	bne.n	8004890 <_strtod_l+0xa00>
 800494e:	4629      	mov	r1, r5
 8004950:	4620      	mov	r0, r4
 8004952:	f7fc f893 	bl	8000a7c <__aeabi_d2iz>
 8004956:	f7fb fd77 	bl	8000448 <__aeabi_i2d>
 800495a:	460b      	mov	r3, r1
 800495c:	4602      	mov	r2, r0
 800495e:	4629      	mov	r1, r5
 8004960:	4620      	mov	r0, r4
 8004962:	f7fb fc23 	bl	80001ac <__aeabi_dsub>
 8004966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004968:	4604      	mov	r4, r0
 800496a:	460d      	mov	r5, r1
 800496c:	b933      	cbnz	r3, 800497c <_strtod_l+0xaec>
 800496e:	f1b9 0f00 	cmp.w	r9, #0
 8004972:	d103      	bne.n	800497c <_strtod_l+0xaec>
 8004974:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004978:	2e00      	cmp	r6, #0
 800497a:	d06a      	beq.n	8004a52 <_strtod_l+0xbc2>
 800497c:	a30a      	add	r3, pc, #40	; (adr r3, 80049a8 <_strtod_l+0xb18>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	4620      	mov	r0, r4
 8004984:	4629      	mov	r1, r5
 8004986:	f7fc f83b 	bl	8000a00 <__aeabi_dcmplt>
 800498a:	2800      	cmp	r0, #0
 800498c:	f47f acad 	bne.w	80042ea <_strtod_l+0x45a>
 8004990:	a307      	add	r3, pc, #28	; (adr r3, 80049b0 <_strtod_l+0xb20>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	f7fc f84f 	bl	8000a3c <__aeabi_dcmpgt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f43f af76 	beq.w	8004890 <_strtod_l+0xa00>
 80049a4:	e4a1      	b.n	80042ea <_strtod_l+0x45a>
 80049a6:	bf00      	nop
 80049a8:	94a03595 	.word	0x94a03595
 80049ac:	3fdfffff 	.word	0x3fdfffff
 80049b0:	35afe535 	.word	0x35afe535
 80049b4:	3fe00000 	.word	0x3fe00000
 80049b8:	000fffff 	.word	0x000fffff
 80049bc:	7ff00000 	.word	0x7ff00000
 80049c0:	7fefffff 	.word	0x7fefffff
 80049c4:	39500000 	.word	0x39500000
 80049c8:	3ff00000 	.word	0x3ff00000
 80049cc:	7fe00000 	.word	0x7fe00000
 80049d0:	7c9fffff 	.word	0x7c9fffff
 80049d4:	3fe00000 	.word	0x3fe00000
 80049d8:	bff00000 	.word	0xbff00000
 80049dc:	9b05      	ldr	r3, [sp, #20]
 80049de:	b313      	cbz	r3, 8004a26 <_strtod_l+0xb96>
 80049e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80049e6:	d81e      	bhi.n	8004a26 <_strtod_l+0xb96>
 80049e8:	a325      	add	r3, pc, #148	; (adr r3, 8004a80 <_strtod_l+0xbf0>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7fc f80f 	bl	8000a14 <__aeabi_dcmple>
 80049f6:	b190      	cbz	r0, 8004a1e <_strtod_l+0xb8e>
 80049f8:	4629      	mov	r1, r5
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7fc f866 	bl	8000acc <__aeabi_d2uiz>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	bf08      	it	eq
 8004a04:	2001      	moveq	r0, #1
 8004a06:	f7fb fd0f 	bl	8000428 <__aeabi_ui2d>
 8004a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	b9d3      	cbnz	r3, 8004a48 <_strtod_l+0xbb8>
 8004a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a16:	9012      	str	r0, [sp, #72]	; 0x48
 8004a18:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a1a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a24:	1a9f      	subs	r7, r3, r2
 8004a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a2a:	f001 fd67 	bl	80064fc <__ulp>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4630      	mov	r0, r6
 8004a34:	4639      	mov	r1, r7
 8004a36:	f7fb fd71 	bl	800051c <__aeabi_dmul>
 8004a3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a3e:	f7fb fbb7 	bl	80001b0 <__adddf3>
 8004a42:	4681      	mov	r9, r0
 8004a44:	468a      	mov	sl, r1
 8004a46:	e777      	b.n	8004938 <_strtod_l+0xaa8>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a50:	e7e3      	b.n	8004a1a <_strtod_l+0xb8a>
 8004a52:	a30d      	add	r3, pc, #52	; (adr r3, 8004a88 <_strtod_l+0xbf8>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb ffd2 	bl	8000a00 <__aeabi_dcmplt>
 8004a5c:	e79f      	b.n	800499e <_strtod_l+0xb0e>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	930d      	str	r3, [sp, #52]	; 0x34
 8004a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	f7ff ba55 	b.w	8003f16 <_strtod_l+0x86>
 8004a6c:	2b65      	cmp	r3, #101	; 0x65
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f43f ab42 	beq.w	80040fa <_strtod_l+0x26a>
 8004a76:	2101      	movs	r1, #1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	9105      	str	r1, [sp, #20]
 8004a7c:	f7ff babf 	b.w	8003ffe <_strtod_l+0x16e>
 8004a80:	ffc00000 	.word	0xffc00000
 8004a84:	41dfffff 	.word	0x41dfffff
 8004a88:	94a03595 	.word	0x94a03595
 8004a8c:	3fcfffff 	.word	0x3fcfffff

08004a90 <_strtod_r>:
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <_strtod_r+0x18>)
 8004a92:	b410      	push	{r4}
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4c05      	ldr	r4, [pc, #20]	; (8004aac <_strtod_r+0x1c>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf08      	it	eq
 8004a9e:	4623      	moveq	r3, r4
 8004aa0:	bc10      	pop	{r4}
 8004aa2:	f7ff b9f5 	b.w	8003e90 <_strtod_l>
 8004aa6:	bf00      	nop
 8004aa8:	2000000c 	.word	0x2000000c
 8004aac:	20000070 	.word	0x20000070

08004ab0 <strtod>:
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <strtod+0x1c>)
 8004ab2:	b410      	push	{r4}
 8004ab4:	681c      	ldr	r4, [r3, #0]
 8004ab6:	4a06      	ldr	r2, [pc, #24]	; (8004ad0 <strtod+0x20>)
 8004ab8:	6a23      	ldr	r3, [r4, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf08      	it	eq
 8004abe:	4613      	moveq	r3, r2
 8004ac0:	460a      	mov	r2, r1
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	bc10      	pop	{r4}
 8004ac8:	f7ff b9e2 	b.w	8003e90 <_strtod_l>
 8004acc:	2000000c 	.word	0x2000000c
 8004ad0:	20000070 	.word	0x20000070

08004ad4 <_strtol_l.isra.0>:
 8004ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	4680      	mov	r8, r0
 8004ada:	4689      	mov	r9, r1
 8004adc:	4692      	mov	sl, r2
 8004ade:	461e      	mov	r6, r3
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	463d      	mov	r5, r7
 8004ae4:	9808      	ldr	r0, [sp, #32]
 8004ae6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aea:	f001 fa01 	bl	8005ef0 <__locale_ctype_ptr_l>
 8004aee:	4420      	add	r0, r4
 8004af0:	7843      	ldrb	r3, [r0, #1]
 8004af2:	f013 0308 	ands.w	r3, r3, #8
 8004af6:	d132      	bne.n	8004b5e <_strtol_l.isra.0+0x8a>
 8004af8:	2c2d      	cmp	r4, #45	; 0x2d
 8004afa:	d132      	bne.n	8004b62 <_strtol_l.isra.0+0x8e>
 8004afc:	2201      	movs	r2, #1
 8004afe:	787c      	ldrb	r4, [r7, #1]
 8004b00:	1cbd      	adds	r5, r7, #2
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	d05d      	beq.n	8004bc2 <_strtol_l.isra.0+0xee>
 8004b06:	2e10      	cmp	r6, #16
 8004b08:	d109      	bne.n	8004b1e <_strtol_l.isra.0+0x4a>
 8004b0a:	2c30      	cmp	r4, #48	; 0x30
 8004b0c:	d107      	bne.n	8004b1e <_strtol_l.isra.0+0x4a>
 8004b0e:	782b      	ldrb	r3, [r5, #0]
 8004b10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b14:	2b58      	cmp	r3, #88	; 0x58
 8004b16:	d14f      	bne.n	8004bb8 <_strtol_l.isra.0+0xe4>
 8004b18:	2610      	movs	r6, #16
 8004b1a:	786c      	ldrb	r4, [r5, #1]
 8004b1c:	3502      	adds	r5, #2
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	bf14      	ite	ne
 8004b22:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004b26:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004b2a:	2700      	movs	r7, #0
 8004b2c:	fbb1 fcf6 	udiv	ip, r1, r6
 8004b30:	4638      	mov	r0, r7
 8004b32:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004b36:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	d817      	bhi.n	8004b6e <_strtol_l.isra.0+0x9a>
 8004b3e:	461c      	mov	r4, r3
 8004b40:	42a6      	cmp	r6, r4
 8004b42:	dd23      	ble.n	8004b8c <_strtol_l.isra.0+0xb8>
 8004b44:	1c7b      	adds	r3, r7, #1
 8004b46:	d007      	beq.n	8004b58 <_strtol_l.isra.0+0x84>
 8004b48:	4584      	cmp	ip, r0
 8004b4a:	d31c      	bcc.n	8004b86 <_strtol_l.isra.0+0xb2>
 8004b4c:	d101      	bne.n	8004b52 <_strtol_l.isra.0+0x7e>
 8004b4e:	45a6      	cmp	lr, r4
 8004b50:	db19      	blt.n	8004b86 <_strtol_l.isra.0+0xb2>
 8004b52:	2701      	movs	r7, #1
 8004b54:	fb00 4006 	mla	r0, r0, r6, r4
 8004b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b5c:	e7eb      	b.n	8004b36 <_strtol_l.isra.0+0x62>
 8004b5e:	462f      	mov	r7, r5
 8004b60:	e7bf      	b.n	8004ae2 <_strtol_l.isra.0+0xe>
 8004b62:	2c2b      	cmp	r4, #43	; 0x2b
 8004b64:	bf04      	itt	eq
 8004b66:	1cbd      	addeq	r5, r7, #2
 8004b68:	787c      	ldrbeq	r4, [r7, #1]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	e7c9      	b.n	8004b02 <_strtol_l.isra.0+0x2e>
 8004b6e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004b72:	2b19      	cmp	r3, #25
 8004b74:	d801      	bhi.n	8004b7a <_strtol_l.isra.0+0xa6>
 8004b76:	3c37      	subs	r4, #55	; 0x37
 8004b78:	e7e2      	b.n	8004b40 <_strtol_l.isra.0+0x6c>
 8004b7a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b7e:	2b19      	cmp	r3, #25
 8004b80:	d804      	bhi.n	8004b8c <_strtol_l.isra.0+0xb8>
 8004b82:	3c57      	subs	r4, #87	; 0x57
 8004b84:	e7dc      	b.n	8004b40 <_strtol_l.isra.0+0x6c>
 8004b86:	f04f 37ff 	mov.w	r7, #4294967295
 8004b8a:	e7e5      	b.n	8004b58 <_strtol_l.isra.0+0x84>
 8004b8c:	1c7b      	adds	r3, r7, #1
 8004b8e:	d108      	bne.n	8004ba2 <_strtol_l.isra.0+0xce>
 8004b90:	2322      	movs	r3, #34	; 0x22
 8004b92:	4608      	mov	r0, r1
 8004b94:	f8c8 3000 	str.w	r3, [r8]
 8004b98:	f1ba 0f00 	cmp.w	sl, #0
 8004b9c:	d107      	bne.n	8004bae <_strtol_l.isra.0+0xda>
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	b102      	cbz	r2, 8004ba6 <_strtol_l.isra.0+0xd2>
 8004ba4:	4240      	negs	r0, r0
 8004ba6:	f1ba 0f00 	cmp.w	sl, #0
 8004baa:	d0f8      	beq.n	8004b9e <_strtol_l.isra.0+0xca>
 8004bac:	b10f      	cbz	r7, 8004bb2 <_strtol_l.isra.0+0xde>
 8004bae:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bb2:	f8ca 9000 	str.w	r9, [sl]
 8004bb6:	e7f2      	b.n	8004b9e <_strtol_l.isra.0+0xca>
 8004bb8:	2430      	movs	r4, #48	; 0x30
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	d1af      	bne.n	8004b1e <_strtol_l.isra.0+0x4a>
 8004bbe:	2608      	movs	r6, #8
 8004bc0:	e7ad      	b.n	8004b1e <_strtol_l.isra.0+0x4a>
 8004bc2:	2c30      	cmp	r4, #48	; 0x30
 8004bc4:	d0a3      	beq.n	8004b0e <_strtol_l.isra.0+0x3a>
 8004bc6:	260a      	movs	r6, #10
 8004bc8:	e7a9      	b.n	8004b1e <_strtol_l.isra.0+0x4a>
	...

08004bcc <_strtol_r>:
 8004bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bce:	4c06      	ldr	r4, [pc, #24]	; (8004be8 <_strtol_r+0x1c>)
 8004bd0:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_strtol_r+0x20>)
 8004bd2:	6824      	ldr	r4, [r4, #0]
 8004bd4:	6a24      	ldr	r4, [r4, #32]
 8004bd6:	2c00      	cmp	r4, #0
 8004bd8:	bf08      	it	eq
 8004bda:	462c      	moveq	r4, r5
 8004bdc:	9400      	str	r4, [sp, #0]
 8004bde:	f7ff ff79 	bl	8004ad4 <_strtol_l.isra.0>
 8004be2:	b003      	add	sp, #12
 8004be4:	bd30      	pop	{r4, r5, pc}
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c
 8004bec:	20000070 	.word	0x20000070

08004bf0 <strtol>:
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <strtol+0x24>)
 8004bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf4:	681c      	ldr	r4, [r3, #0]
 8004bf6:	4d08      	ldr	r5, [pc, #32]	; (8004c18 <strtol+0x28>)
 8004bf8:	6a23      	ldr	r3, [r4, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf08      	it	eq
 8004bfe:	462b      	moveq	r3, r5
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	460a      	mov	r2, r1
 8004c06:	4601      	mov	r1, r0
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff ff63 	bl	8004ad4 <_strtol_l.isra.0>
 8004c0e:	b003      	add	sp, #12
 8004c10:	bd30      	pop	{r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	20000070 	.word	0x20000070

08004c1c <quorem>:
 8004c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	6903      	ldr	r3, [r0, #16]
 8004c22:	690c      	ldr	r4, [r1, #16]
 8004c24:	4680      	mov	r8, r0
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	f2c0 8084 	blt.w	8004d34 <quorem+0x118>
 8004c2c:	3c01      	subs	r4, #1
 8004c2e:	f101 0714 	add.w	r7, r1, #20
 8004c32:	f100 0614 	add.w	r6, r0, #20
 8004c36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c3e:	3501      	adds	r5, #1
 8004c40:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c48:	eb06 030c 	add.w	r3, r6, ip
 8004c4c:	eb07 090c 	add.w	r9, r7, ip
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	b39d      	cbz	r5, 8004cbc <quorem+0xa0>
 8004c54:	f04f 0a00 	mov.w	sl, #0
 8004c58:	4638      	mov	r0, r7
 8004c5a:	46b6      	mov	lr, r6
 8004c5c:	46d3      	mov	fp, sl
 8004c5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c62:	b293      	uxth	r3, r2
 8004c64:	fb05 a303 	mla	r3, r5, r3, sl
 8004c68:	0c12      	lsrs	r2, r2, #16
 8004c6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c6e:	fb05 a202 	mla	r2, r5, r2, sl
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ebab 0303 	sub.w	r3, fp, r3
 8004c78:	f8de b000 	ldr.w	fp, [lr]
 8004c7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004c80:	fa1f fb8b 	uxth.w	fp, fp
 8004c84:	445b      	add	r3, fp
 8004c86:	fa1f fb82 	uxth.w	fp, r2
 8004c8a:	f8de 2000 	ldr.w	r2, [lr]
 8004c8e:	4581      	cmp	r9, r0
 8004c90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c9e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ca2:	f84e 3b04 	str.w	r3, [lr], #4
 8004ca6:	d2da      	bcs.n	8004c5e <quorem+0x42>
 8004ca8:	f856 300c 	ldr.w	r3, [r6, ip]
 8004cac:	b933      	cbnz	r3, 8004cbc <quorem+0xa0>
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	429e      	cmp	r6, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	d331      	bcc.n	8004d1c <quorem+0x100>
 8004cb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f001 fba5 	bl	800640c <__mcmp>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	db26      	blt.n	8004d14 <quorem+0xf8>
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f04f 0c00 	mov.w	ip, #0
 8004ccc:	3501      	adds	r5, #1
 8004cce:	f857 1b04 	ldr.w	r1, [r7], #4
 8004cd2:	f8d0 e000 	ldr.w	lr, [r0]
 8004cd6:	b28b      	uxth	r3, r1
 8004cd8:	ebac 0303 	sub.w	r3, ip, r3
 8004cdc:	fa1f f28e 	uxth.w	r2, lr
 8004ce0:	4413      	add	r3, r2
 8004ce2:	0c0a      	lsrs	r2, r1, #16
 8004ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf2:	45b9      	cmp	r9, r7
 8004cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cf8:	f840 3b04 	str.w	r3, [r0], #4
 8004cfc:	d2e7      	bcs.n	8004cce <quorem+0xb2>
 8004cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d06:	b92a      	cbnz	r2, 8004d14 <quorem+0xf8>
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	429e      	cmp	r6, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	d30b      	bcc.n	8004d28 <quorem+0x10c>
 8004d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d14:	4628      	mov	r0, r5
 8004d16:	b003      	add	sp, #12
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	d1c9      	bne.n	8004cb8 <quorem+0x9c>
 8004d24:	3c01      	subs	r4, #1
 8004d26:	e7c4      	b.n	8004cb2 <quorem+0x96>
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	3b04      	subs	r3, #4
 8004d2c:	2a00      	cmp	r2, #0
 8004d2e:	d1ef      	bne.n	8004d10 <quorem+0xf4>
 8004d30:	3c01      	subs	r4, #1
 8004d32:	e7ea      	b.n	8004d0a <quorem+0xee>
 8004d34:	2000      	movs	r0, #0
 8004d36:	e7ee      	b.n	8004d16 <quorem+0xfa>

08004d38 <_dtoa_r>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	461f      	mov	r7, r3
 8004d40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d42:	b095      	sub	sp, #84	; 0x54
 8004d44:	4604      	mov	r4, r0
 8004d46:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004d4a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d4e:	b93d      	cbnz	r5, 8004d60 <_dtoa_r+0x28>
 8004d50:	2010      	movs	r0, #16
 8004d52:	f001 f8e1 	bl	8005f18 <malloc>
 8004d56:	6260      	str	r0, [r4, #36]	; 0x24
 8004d58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d5c:	6005      	str	r5, [r0, #0]
 8004d5e:	60c5      	str	r5, [r0, #12]
 8004d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	b151      	cbz	r1, 8004d7c <_dtoa_r+0x44>
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4093      	lsls	r3, r2
 8004d6c:	604a      	str	r2, [r1, #4]
 8004d6e:	608b      	str	r3, [r1, #8]
 8004d70:	4620      	mov	r0, r4
 8004d72:	f001 f92d 	bl	8005fd0 <_Bfree>
 8004d76:	2200      	movs	r2, #0
 8004d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	1e3b      	subs	r3, r7, #0
 8004d7e:	bfaf      	iteee	ge
 8004d80:	2300      	movge	r3, #0
 8004d82:	2201      	movlt	r2, #1
 8004d84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d88:	9303      	strlt	r3, [sp, #12]
 8004d8a:	bfac      	ite	ge
 8004d8c:	f8c8 3000 	strge.w	r3, [r8]
 8004d90:	f8c8 2000 	strlt.w	r2, [r8]
 8004d94:	4bae      	ldr	r3, [pc, #696]	; (8005050 <_dtoa_r+0x318>)
 8004d96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d9a:	ea33 0308 	bics.w	r3, r3, r8
 8004d9e:	d11b      	bne.n	8004dd8 <_dtoa_r+0xa0>
 8004da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004da4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	9b02      	ldr	r3, [sp, #8]
 8004daa:	b923      	cbnz	r3, 8004db6 <_dtoa_r+0x7e>
 8004dac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f000 8545 	beq.w	8005840 <_dtoa_r+0xb08>
 8004db6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004db8:	b953      	cbnz	r3, 8004dd0 <_dtoa_r+0x98>
 8004dba:	4ba6      	ldr	r3, [pc, #664]	; (8005054 <_dtoa_r+0x31c>)
 8004dbc:	e021      	b.n	8004e02 <_dtoa_r+0xca>
 8004dbe:	4ba6      	ldr	r3, [pc, #664]	; (8005058 <_dtoa_r+0x320>)
 8004dc0:	9306      	str	r3, [sp, #24]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	9806      	ldr	r0, [sp, #24]
 8004dca:	b015      	add	sp, #84	; 0x54
 8004dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd0:	4ba0      	ldr	r3, [pc, #640]	; (8005054 <_dtoa_r+0x31c>)
 8004dd2:	9306      	str	r3, [sp, #24]
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	e7f5      	b.n	8004dc4 <_dtoa_r+0x8c>
 8004dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2300      	movs	r3, #0
 8004de0:	4630      	mov	r0, r6
 8004de2:	4639      	mov	r1, r7
 8004de4:	f7fb fe02 	bl	80009ec <__aeabi_dcmpeq>
 8004de8:	4682      	mov	sl, r0
 8004dea:	b160      	cbz	r0, 8004e06 <_dtoa_r+0xce>
 8004dec:	2301      	movs	r3, #1
 8004dee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8520 	beq.w	800583a <_dtoa_r+0xb02>
 8004dfa:	4b98      	ldr	r3, [pc, #608]	; (800505c <_dtoa_r+0x324>)
 8004dfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	9306      	str	r3, [sp, #24]
 8004e04:	e7e0      	b.n	8004dc8 <_dtoa_r+0x90>
 8004e06:	ab12      	add	r3, sp, #72	; 0x48
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	ab13      	add	r3, sp, #76	; 0x4c
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4632      	mov	r2, r6
 8004e10:	463b      	mov	r3, r7
 8004e12:	4620      	mov	r0, r4
 8004e14:	f001 fbe8 	bl	80065e8 <__d2b>
 8004e18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e1c:	4683      	mov	fp, r0
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d07d      	beq.n	8004f1e <_dtoa_r+0x1e6>
 8004e22:	46b0      	mov	r8, r6
 8004e24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e28:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004e2c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004e30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e34:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4b89      	ldr	r3, [pc, #548]	; (8005060 <_dtoa_r+0x328>)
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	4649      	mov	r1, r9
 8004e40:	f7fb f9b4 	bl	80001ac <__aeabi_dsub>
 8004e44:	a37c      	add	r3, pc, #496	; (adr r3, 8005038 <_dtoa_r+0x300>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f7fb fb67 	bl	800051c <__aeabi_dmul>
 8004e4e:	a37c      	add	r3, pc, #496	; (adr r3, 8005040 <_dtoa_r+0x308>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f9ac 	bl	80001b0 <__adddf3>
 8004e58:	4606      	mov	r6, r0
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	460f      	mov	r7, r1
 8004e5e:	f7fb faf3 	bl	8000448 <__aeabi_i2d>
 8004e62:	a379      	add	r3, pc, #484	; (adr r3, 8005048 <_dtoa_r+0x310>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fb58 	bl	800051c <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb f99c 	bl	80001b0 <__adddf3>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	f7fb fdfe 	bl	8000a7c <__aeabi_d2iz>
 8004e80:	2200      	movs	r2, #0
 8004e82:	4682      	mov	sl, r0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4630      	mov	r0, r6
 8004e88:	4639      	mov	r1, r7
 8004e8a:	f7fb fdb9 	bl	8000a00 <__aeabi_dcmplt>
 8004e8e:	b148      	cbz	r0, 8004ea4 <_dtoa_r+0x16c>
 8004e90:	4650      	mov	r0, sl
 8004e92:	f7fb fad9 	bl	8000448 <__aeabi_i2d>
 8004e96:	4632      	mov	r2, r6
 8004e98:	463b      	mov	r3, r7
 8004e9a:	f7fb fda7 	bl	80009ec <__aeabi_dcmpeq>
 8004e9e:	b908      	cbnz	r0, 8004ea4 <_dtoa_r+0x16c>
 8004ea0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ea4:	f1ba 0f16 	cmp.w	sl, #22
 8004ea8:	d85a      	bhi.n	8004f60 <_dtoa_r+0x228>
 8004eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eae:	496d      	ldr	r1, [pc, #436]	; (8005064 <_dtoa_r+0x32c>)
 8004eb0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eb8:	f7fb fdc0 	bl	8000a3c <__aeabi_dcmpgt>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d051      	beq.n	8004f64 <_dtoa_r+0x22c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004eca:	1b5d      	subs	r5, r3, r5
 8004ecc:	1e6b      	subs	r3, r5, #1
 8004ece:	9307      	str	r3, [sp, #28]
 8004ed0:	bf43      	ittte	mi
 8004ed2:	2300      	movmi	r3, #0
 8004ed4:	f1c5 0901 	rsbmi	r9, r5, #1
 8004ed8:	9307      	strmi	r3, [sp, #28]
 8004eda:	f04f 0900 	movpl.w	r9, #0
 8004ede:	f1ba 0f00 	cmp.w	sl, #0
 8004ee2:	db41      	blt.n	8004f68 <_dtoa_r+0x230>
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004eea:	4453      	add	r3, sl
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9308      	str	r3, [sp, #32]
 8004ef2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	f200 808f 	bhi.w	8005018 <_dtoa_r+0x2e0>
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	bfc4      	itt	gt
 8004efe:	3b04      	subgt	r3, #4
 8004f00:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004f02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f04:	bfc8      	it	gt
 8004f06:	2500      	movgt	r5, #0
 8004f08:	f1a3 0302 	sub.w	r3, r3, #2
 8004f0c:	bfd8      	it	le
 8004f0e:	2501      	movle	r5, #1
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	f200 808d 	bhi.w	8005030 <_dtoa_r+0x2f8>
 8004f16:	e8df f003 	tbb	[pc, r3]
 8004f1a:	7d7b      	.short	0x7d7b
 8004f1c:	6f2f      	.short	0x6f2f
 8004f1e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004f22:	441d      	add	r5, r3
 8004f24:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004f28:	2820      	cmp	r0, #32
 8004f2a:	dd13      	ble.n	8004f54 <_dtoa_r+0x21c>
 8004f2c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f30:	9b02      	ldr	r3, [sp, #8]
 8004f32:	fa08 f800 	lsl.w	r8, r8, r0
 8004f36:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f3a:	fa23 f000 	lsr.w	r0, r3, r0
 8004f3e:	ea48 0000 	orr.w	r0, r8, r0
 8004f42:	f7fb fa71 	bl	8000428 <__aeabi_ui2d>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4680      	mov	r8, r0
 8004f4a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004f4e:	3d01      	subs	r5, #1
 8004f50:	9310      	str	r3, [sp, #64]	; 0x40
 8004f52:	e771      	b.n	8004e38 <_dtoa_r+0x100>
 8004f54:	9b02      	ldr	r3, [sp, #8]
 8004f56:	f1c0 0020 	rsb	r0, r0, #32
 8004f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f5e:	e7f0      	b.n	8004f42 <_dtoa_r+0x20a>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e7b0      	b.n	8004ec6 <_dtoa_r+0x18e>
 8004f64:	900d      	str	r0, [sp, #52]	; 0x34
 8004f66:	e7af      	b.n	8004ec8 <_dtoa_r+0x190>
 8004f68:	f1ca 0300 	rsb	r3, sl, #0
 8004f6c:	9308      	str	r3, [sp, #32]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	eba9 090a 	sub.w	r9, r9, sl
 8004f74:	930c      	str	r3, [sp, #48]	; 0x30
 8004f76:	e7bc      	b.n	8004ef2 <_dtoa_r+0x1ba>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd74      	ble.n	800506c <_dtoa_r+0x334>
 8004f82:	4698      	mov	r8, r3
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	2200      	movs	r2, #0
 8004f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f8a:	6072      	str	r2, [r6, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	f102 0014 	add.w	r0, r2, #20
 8004f92:	4298      	cmp	r0, r3
 8004f94:	6871      	ldr	r1, [r6, #4]
 8004f96:	d96e      	bls.n	8005076 <_dtoa_r+0x33e>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 ffe5 	bl	8005f68 <_Balloc>
 8004f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa0:	6030      	str	r0, [r6, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b8 0f0e 	cmp.w	r8, #14
 8004fa8:	9306      	str	r3, [sp, #24]
 8004faa:	f200 80ed 	bhi.w	8005188 <_dtoa_r+0x450>
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	f000 80ea 	beq.w	8005188 <_dtoa_r+0x450>
 8004fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb8:	f1ba 0f00 	cmp.w	sl, #0
 8004fbc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004fc0:	dd77      	ble.n	80050b2 <_dtoa_r+0x37a>
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <_dtoa_r+0x32c>)
 8004fc4:	f00a 030f 	and.w	r3, sl, #15
 8004fc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004fcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fd0:	06f0      	lsls	r0, r6, #27
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004fda:	d568      	bpl.n	80050ae <_dtoa_r+0x376>
 8004fdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <_dtoa_r+0x330>)
 8004fe2:	2503      	movs	r5, #3
 8004fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe8:	f7fb fbc2 	bl	8000770 <__aeabi_ddiv>
 8004fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff0:	f006 060f 	and.w	r6, r6, #15
 8004ff4:	4f1c      	ldr	r7, [pc, #112]	; (8005068 <_dtoa_r+0x330>)
 8004ff6:	e04f      	b.n	8005098 <_dtoa_r+0x360>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ffe:	4453      	add	r3, sl
 8005000:	f103 0801 	add.w	r8, r3, #1
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	4643      	mov	r3, r8
 8005008:	2b01      	cmp	r3, #1
 800500a:	bfb8      	it	lt
 800500c:	2301      	movlt	r3, #1
 800500e:	e7ba      	b.n	8004f86 <_dtoa_r+0x24e>
 8005010:	2300      	movs	r3, #0
 8005012:	e7b2      	b.n	8004f7a <_dtoa_r+0x242>
 8005014:	2300      	movs	r3, #0
 8005016:	e7f0      	b.n	8004ffa <_dtoa_r+0x2c2>
 8005018:	2501      	movs	r5, #1
 800501a:	2300      	movs	r3, #0
 800501c:	9509      	str	r5, [sp, #36]	; 0x24
 800501e:	931e      	str	r3, [sp, #120]	; 0x78
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
 8005024:	2200      	movs	r2, #0
 8005026:	9304      	str	r3, [sp, #16]
 8005028:	4698      	mov	r8, r3
 800502a:	2312      	movs	r3, #18
 800502c:	921f      	str	r2, [sp, #124]	; 0x7c
 800502e:	e7aa      	b.n	8004f86 <_dtoa_r+0x24e>
 8005030:	2301      	movs	r3, #1
 8005032:	9309      	str	r3, [sp, #36]	; 0x24
 8005034:	e7f4      	b.n	8005020 <_dtoa_r+0x2e8>
 8005036:	bf00      	nop
 8005038:	636f4361 	.word	0x636f4361
 800503c:	3fd287a7 	.word	0x3fd287a7
 8005040:	8b60c8b3 	.word	0x8b60c8b3
 8005044:	3fc68a28 	.word	0x3fc68a28
 8005048:	509f79fb 	.word	0x509f79fb
 800504c:	3fd34413 	.word	0x3fd34413
 8005050:	7ff00000 	.word	0x7ff00000
 8005054:	08006e49 	.word	0x08006e49
 8005058:	08006e40 	.word	0x08006e40
 800505c:	08006dc5 	.word	0x08006dc5
 8005060:	3ff80000 	.word	0x3ff80000
 8005064:	08006e80 	.word	0x08006e80
 8005068:	08006e58 	.word	0x08006e58
 800506c:	2301      	movs	r3, #1
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	4698      	mov	r8, r3
 8005072:	461a      	mov	r2, r3
 8005074:	e7da      	b.n	800502c <_dtoa_r+0x2f4>
 8005076:	3101      	adds	r1, #1
 8005078:	6071      	str	r1, [r6, #4]
 800507a:	0052      	lsls	r2, r2, #1
 800507c:	e787      	b.n	8004f8e <_dtoa_r+0x256>
 800507e:	07f1      	lsls	r1, r6, #31
 8005080:	d508      	bpl.n	8005094 <_dtoa_r+0x35c>
 8005082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800508a:	f7fb fa47 	bl	800051c <__aeabi_dmul>
 800508e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005092:	3501      	adds	r5, #1
 8005094:	1076      	asrs	r6, r6, #1
 8005096:	3708      	adds	r7, #8
 8005098:	2e00      	cmp	r6, #0
 800509a:	d1f0      	bne.n	800507e <_dtoa_r+0x346>
 800509c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a4:	f7fb fb64 	bl	8000770 <__aeabi_ddiv>
 80050a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ac:	e01b      	b.n	80050e6 <_dtoa_r+0x3ae>
 80050ae:	2502      	movs	r5, #2
 80050b0:	e7a0      	b.n	8004ff4 <_dtoa_r+0x2bc>
 80050b2:	f000 80a4 	beq.w	80051fe <_dtoa_r+0x4c6>
 80050b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050ba:	f1ca 0600 	rsb	r6, sl, #0
 80050be:	4ba0      	ldr	r3, [pc, #640]	; (8005340 <_dtoa_r+0x608>)
 80050c0:	f006 020f 	and.w	r2, r6, #15
 80050c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fa26 	bl	800051c <__aeabi_dmul>
 80050d0:	2502      	movs	r5, #2
 80050d2:	2300      	movs	r3, #0
 80050d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050d8:	4f9a      	ldr	r7, [pc, #616]	; (8005344 <_dtoa_r+0x60c>)
 80050da:	1136      	asrs	r6, r6, #4
 80050dc:	2e00      	cmp	r6, #0
 80050de:	f040 8083 	bne.w	80051e8 <_dtoa_r+0x4b0>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e0      	bne.n	80050a8 <_dtoa_r+0x370>
 80050e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 808a 	beq.w	8005202 <_dtoa_r+0x4ca>
 80050ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b92      	ldr	r3, [pc, #584]	; (8005348 <_dtoa_r+0x610>)
 80050fe:	f7fb fc7f 	bl	8000a00 <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	d07d      	beq.n	8005202 <_dtoa_r+0x4ca>
 8005106:	f1b8 0f00 	cmp.w	r8, #0
 800510a:	d07a      	beq.n	8005202 <_dtoa_r+0x4ca>
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	dd36      	ble.n	8005180 <_dtoa_r+0x448>
 8005112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005116:	2200      	movs	r2, #0
 8005118:	4b8c      	ldr	r3, [pc, #560]	; (800534c <_dtoa_r+0x614>)
 800511a:	f7fb f9ff 	bl	800051c <__aeabi_dmul>
 800511e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005122:	9e04      	ldr	r6, [sp, #16]
 8005124:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005128:	3501      	adds	r5, #1
 800512a:	4628      	mov	r0, r5
 800512c:	f7fb f98c 	bl	8000448 <__aeabi_i2d>
 8005130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005134:	f7fb f9f2 	bl	800051c <__aeabi_dmul>
 8005138:	2200      	movs	r2, #0
 800513a:	4b85      	ldr	r3, [pc, #532]	; (8005350 <_dtoa_r+0x618>)
 800513c:	f7fb f838 	bl	80001b0 <__adddf3>
 8005140:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005144:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005148:	950b      	str	r5, [sp, #44]	; 0x2c
 800514a:	2e00      	cmp	r6, #0
 800514c:	d15c      	bne.n	8005208 <_dtoa_r+0x4d0>
 800514e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	4b7f      	ldr	r3, [pc, #508]	; (8005354 <_dtoa_r+0x61c>)
 8005156:	f7fb f829 	bl	80001ac <__aeabi_dsub>
 800515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800515c:	462b      	mov	r3, r5
 800515e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005162:	f7fb fc6b 	bl	8000a3c <__aeabi_dcmpgt>
 8005166:	2800      	cmp	r0, #0
 8005168:	f040 8281 	bne.w	800566e <_dtoa_r+0x936>
 800516c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005172:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005176:	f7fb fc43 	bl	8000a00 <__aeabi_dcmplt>
 800517a:	2800      	cmp	r0, #0
 800517c:	f040 8275 	bne.w	800566a <_dtoa_r+0x932>
 8005180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800518a:	2b00      	cmp	r3, #0
 800518c:	f2c0 814b 	blt.w	8005426 <_dtoa_r+0x6ee>
 8005190:	f1ba 0f0e 	cmp.w	sl, #14
 8005194:	f300 8147 	bgt.w	8005426 <_dtoa_r+0x6ee>
 8005198:	4b69      	ldr	r3, [pc, #420]	; (8005340 <_dtoa_r+0x608>)
 800519a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f280 80d7 	bge.w	800535c <_dtoa_r+0x624>
 80051ae:	f1b8 0f00 	cmp.w	r8, #0
 80051b2:	f300 80d3 	bgt.w	800535c <_dtoa_r+0x624>
 80051b6:	f040 8257 	bne.w	8005668 <_dtoa_r+0x930>
 80051ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051be:	2200      	movs	r2, #0
 80051c0:	4b64      	ldr	r3, [pc, #400]	; (8005354 <_dtoa_r+0x61c>)
 80051c2:	f7fb f9ab 	bl	800051c <__aeabi_dmul>
 80051c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051ca:	f7fb fc2d 	bl	8000a28 <__aeabi_dcmpge>
 80051ce:	4646      	mov	r6, r8
 80051d0:	4647      	mov	r7, r8
 80051d2:	2800      	cmp	r0, #0
 80051d4:	f040 822d 	bne.w	8005632 <_dtoa_r+0x8fa>
 80051d8:	9b06      	ldr	r3, [sp, #24]
 80051da:	9a06      	ldr	r2, [sp, #24]
 80051dc:	1c5d      	adds	r5, r3, #1
 80051de:	2331      	movs	r3, #49	; 0x31
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	7013      	strb	r3, [r2, #0]
 80051e6:	e228      	b.n	800563a <_dtoa_r+0x902>
 80051e8:	07f2      	lsls	r2, r6, #31
 80051ea:	d505      	bpl.n	80051f8 <_dtoa_r+0x4c0>
 80051ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f0:	f7fb f994 	bl	800051c <__aeabi_dmul>
 80051f4:	2301      	movs	r3, #1
 80051f6:	3501      	adds	r5, #1
 80051f8:	1076      	asrs	r6, r6, #1
 80051fa:	3708      	adds	r7, #8
 80051fc:	e76e      	b.n	80050dc <_dtoa_r+0x3a4>
 80051fe:	2502      	movs	r5, #2
 8005200:	e771      	b.n	80050e6 <_dtoa_r+0x3ae>
 8005202:	4657      	mov	r7, sl
 8005204:	4646      	mov	r6, r8
 8005206:	e790      	b.n	800512a <_dtoa_r+0x3f2>
 8005208:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <_dtoa_r+0x608>)
 800520a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800520e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d048      	beq.n	80052aa <_dtoa_r+0x572>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	2000      	movs	r0, #0
 800521e:	494e      	ldr	r1, [pc, #312]	; (8005358 <_dtoa_r+0x620>)
 8005220:	f7fb faa6 	bl	8000770 <__aeabi_ddiv>
 8005224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005228:	f7fa ffc0 	bl	80001ac <__aeabi_dsub>
 800522c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005230:	9d06      	ldr	r5, [sp, #24]
 8005232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005236:	f7fb fc21 	bl	8000a7c <__aeabi_d2iz>
 800523a:	9011      	str	r0, [sp, #68]	; 0x44
 800523c:	f7fb f904 	bl	8000448 <__aeabi_i2d>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005248:	f7fa ffb0 	bl	80001ac <__aeabi_dsub>
 800524c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800524e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005252:	3330      	adds	r3, #48	; 0x30
 8005254:	f805 3b01 	strb.w	r3, [r5], #1
 8005258:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800525c:	f7fb fbd0 	bl	8000a00 <__aeabi_dcmplt>
 8005260:	2800      	cmp	r0, #0
 8005262:	d163      	bne.n	800532c <_dtoa_r+0x5f4>
 8005264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005268:	2000      	movs	r0, #0
 800526a:	4937      	ldr	r1, [pc, #220]	; (8005348 <_dtoa_r+0x610>)
 800526c:	f7fa ff9e 	bl	80001ac <__aeabi_dsub>
 8005270:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005274:	f7fb fbc4 	bl	8000a00 <__aeabi_dcmplt>
 8005278:	2800      	cmp	r0, #0
 800527a:	f040 80b5 	bne.w	80053e8 <_dtoa_r+0x6b0>
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	1aeb      	subs	r3, r5, r3
 8005282:	429e      	cmp	r6, r3
 8005284:	f77f af7c 	ble.w	8005180 <_dtoa_r+0x448>
 8005288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800528c:	2200      	movs	r2, #0
 800528e:	4b2f      	ldr	r3, [pc, #188]	; (800534c <_dtoa_r+0x614>)
 8005290:	f7fb f944 	bl	800051c <__aeabi_dmul>
 8005294:	2200      	movs	r2, #0
 8005296:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800529a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529e:	4b2b      	ldr	r3, [pc, #172]	; (800534c <_dtoa_r+0x614>)
 80052a0:	f7fb f93c 	bl	800051c <__aeabi_dmul>
 80052a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052a8:	e7c3      	b.n	8005232 <_dtoa_r+0x4fa>
 80052aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052ae:	f7fb f935 	bl	800051c <__aeabi_dmul>
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052b8:	199d      	adds	r5, r3, r6
 80052ba:	461e      	mov	r6, r3
 80052bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c0:	f7fb fbdc 	bl	8000a7c <__aeabi_d2iz>
 80052c4:	9011      	str	r0, [sp, #68]	; 0x44
 80052c6:	f7fb f8bf 	bl	8000448 <__aeabi_i2d>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d2:	f7fa ff6b 	bl	80001ac <__aeabi_dsub>
 80052d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052dc:	3330      	adds	r3, #48	; 0x30
 80052de:	f806 3b01 	strb.w	r3, [r6], #1
 80052e2:	42ae      	cmp	r6, r5
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	d124      	bne.n	8005334 <_dtoa_r+0x5fc>
 80052ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <_dtoa_r+0x620>)
 80052f0:	f7fa ff5e 	bl	80001b0 <__adddf3>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fc:	f7fb fb9e 	bl	8000a3c <__aeabi_dcmpgt>
 8005300:	2800      	cmp	r0, #0
 8005302:	d171      	bne.n	80053e8 <_dtoa_r+0x6b0>
 8005304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005308:	2000      	movs	r0, #0
 800530a:	4913      	ldr	r1, [pc, #76]	; (8005358 <_dtoa_r+0x620>)
 800530c:	f7fa ff4e 	bl	80001ac <__aeabi_dsub>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005318:	f7fb fb72 	bl	8000a00 <__aeabi_dcmplt>
 800531c:	2800      	cmp	r0, #0
 800531e:	f43f af2f 	beq.w	8005180 <_dtoa_r+0x448>
 8005322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005326:	1e6a      	subs	r2, r5, #1
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d001      	beq.n	8005330 <_dtoa_r+0x5f8>
 800532c:	46ba      	mov	sl, r7
 800532e:	e04a      	b.n	80053c6 <_dtoa_r+0x68e>
 8005330:	4615      	mov	r5, r2
 8005332:	e7f6      	b.n	8005322 <_dtoa_r+0x5ea>
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <_dtoa_r+0x614>)
 8005336:	f7fb f8f1 	bl	800051c <__aeabi_dmul>
 800533a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800533e:	e7bd      	b.n	80052bc <_dtoa_r+0x584>
 8005340:	08006e80 	.word	0x08006e80
 8005344:	08006e58 	.word	0x08006e58
 8005348:	3ff00000 	.word	0x3ff00000
 800534c:	40240000 	.word	0x40240000
 8005350:	401c0000 	.word	0x401c0000
 8005354:	40140000 	.word	0x40140000
 8005358:	3fe00000 	.word	0x3fe00000
 800535c:	9d06      	ldr	r5, [sp, #24]
 800535e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005366:	4630      	mov	r0, r6
 8005368:	4639      	mov	r1, r7
 800536a:	f7fb fa01 	bl	8000770 <__aeabi_ddiv>
 800536e:	f7fb fb85 	bl	8000a7c <__aeabi_d2iz>
 8005372:	4681      	mov	r9, r0
 8005374:	f7fb f868 	bl	8000448 <__aeabi_i2d>
 8005378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800537c:	f7fb f8ce 	bl	800051c <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fa ff10 	bl	80001ac <__aeabi_dsub>
 800538c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005390:	f805 6b01 	strb.w	r6, [r5], #1
 8005394:	9e06      	ldr	r6, [sp, #24]
 8005396:	4602      	mov	r2, r0
 8005398:	1bae      	subs	r6, r5, r6
 800539a:	45b0      	cmp	r8, r6
 800539c:	460b      	mov	r3, r1
 800539e:	d135      	bne.n	800540c <_dtoa_r+0x6d4>
 80053a0:	f7fa ff06 	bl	80001b0 <__adddf3>
 80053a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a8:	4606      	mov	r6, r0
 80053aa:	460f      	mov	r7, r1
 80053ac:	f7fb fb46 	bl	8000a3c <__aeabi_dcmpgt>
 80053b0:	b9c8      	cbnz	r0, 80053e6 <_dtoa_r+0x6ae>
 80053b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b6:	4630      	mov	r0, r6
 80053b8:	4639      	mov	r1, r7
 80053ba:	f7fb fb17 	bl	80009ec <__aeabi_dcmpeq>
 80053be:	b110      	cbz	r0, 80053c6 <_dtoa_r+0x68e>
 80053c0:	f019 0f01 	tst.w	r9, #1
 80053c4:	d10f      	bne.n	80053e6 <_dtoa_r+0x6ae>
 80053c6:	4659      	mov	r1, fp
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fe01 	bl	8005fd0 <_Bfree>
 80053ce:	2300      	movs	r3, #0
 80053d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053d2:	702b      	strb	r3, [r5, #0]
 80053d4:	f10a 0301 	add.w	r3, sl, #1
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f43f acf3 	beq.w	8004dc8 <_dtoa_r+0x90>
 80053e2:	601d      	str	r5, [r3, #0]
 80053e4:	e4f0      	b.n	8004dc8 <_dtoa_r+0x90>
 80053e6:	4657      	mov	r7, sl
 80053e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053ec:	1e6b      	subs	r3, r5, #1
 80053ee:	2a39      	cmp	r2, #57	; 0x39
 80053f0:	d106      	bne.n	8005400 <_dtoa_r+0x6c8>
 80053f2:	9a06      	ldr	r2, [sp, #24]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d107      	bne.n	8005408 <_dtoa_r+0x6d0>
 80053f8:	2330      	movs	r3, #48	; 0x30
 80053fa:	7013      	strb	r3, [r2, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	3701      	adds	r7, #1
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	3201      	adds	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e791      	b.n	800532c <_dtoa_r+0x5f4>
 8005408:	461d      	mov	r5, r3
 800540a:	e7ed      	b.n	80053e8 <_dtoa_r+0x6b0>
 800540c:	2200      	movs	r2, #0
 800540e:	4b99      	ldr	r3, [pc, #612]	; (8005674 <_dtoa_r+0x93c>)
 8005410:	f7fb f884 	bl	800051c <__aeabi_dmul>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	f7fb fae6 	bl	80009ec <__aeabi_dcmpeq>
 8005420:	2800      	cmp	r0, #0
 8005422:	d09e      	beq.n	8005362 <_dtoa_r+0x62a>
 8005424:	e7cf      	b.n	80053c6 <_dtoa_r+0x68e>
 8005426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005428:	2a00      	cmp	r2, #0
 800542a:	f000 8088 	beq.w	800553e <_dtoa_r+0x806>
 800542e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005430:	2a01      	cmp	r2, #1
 8005432:	dc6d      	bgt.n	8005510 <_dtoa_r+0x7d8>
 8005434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005436:	2a00      	cmp	r2, #0
 8005438:	d066      	beq.n	8005508 <_dtoa_r+0x7d0>
 800543a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800543e:	464d      	mov	r5, r9
 8005440:	9e08      	ldr	r6, [sp, #32]
 8005442:	9a07      	ldr	r2, [sp, #28]
 8005444:	2101      	movs	r1, #1
 8005446:	441a      	add	r2, r3
 8005448:	4620      	mov	r0, r4
 800544a:	4499      	add	r9, r3
 800544c:	9207      	str	r2, [sp, #28]
 800544e:	f000 fe9d 	bl	800618c <__i2b>
 8005452:	4607      	mov	r7, r0
 8005454:	2d00      	cmp	r5, #0
 8005456:	dd0b      	ble.n	8005470 <_dtoa_r+0x738>
 8005458:	9b07      	ldr	r3, [sp, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	dd08      	ble.n	8005470 <_dtoa_r+0x738>
 800545e:	42ab      	cmp	r3, r5
 8005460:	bfa8      	it	ge
 8005462:	462b      	movge	r3, r5
 8005464:	9a07      	ldr	r2, [sp, #28]
 8005466:	eba9 0903 	sub.w	r9, r9, r3
 800546a:	1aed      	subs	r5, r5, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	b1eb      	cbz	r3, 80054b0 <_dtoa_r+0x778>
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d065      	beq.n	8005546 <_dtoa_r+0x80e>
 800547a:	b18e      	cbz	r6, 80054a0 <_dtoa_r+0x768>
 800547c:	4639      	mov	r1, r7
 800547e:	4632      	mov	r2, r6
 8005480:	4620      	mov	r0, r4
 8005482:	f000 ff21 	bl	80062c8 <__pow5mult>
 8005486:	465a      	mov	r2, fp
 8005488:	4601      	mov	r1, r0
 800548a:	4607      	mov	r7, r0
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fe86 	bl	800619e <__multiply>
 8005492:	4659      	mov	r1, fp
 8005494:	900a      	str	r0, [sp, #40]	; 0x28
 8005496:	4620      	mov	r0, r4
 8005498:	f000 fd9a 	bl	8005fd0 <_Bfree>
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	469b      	mov	fp, r3
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	1b9a      	subs	r2, r3, r6
 80054a4:	d004      	beq.n	80054b0 <_dtoa_r+0x778>
 80054a6:	4659      	mov	r1, fp
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 ff0d 	bl	80062c8 <__pow5mult>
 80054ae:	4683      	mov	fp, r0
 80054b0:	2101      	movs	r1, #1
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fe6a 	bl	800618c <__i2b>
 80054b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ba:	4606      	mov	r6, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 81c6 	beq.w	800584e <_dtoa_r+0xb16>
 80054c2:	461a      	mov	r2, r3
 80054c4:	4601      	mov	r1, r0
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fefe 	bl	80062c8 <__pow5mult>
 80054cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054ce:	4606      	mov	r6, r0
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	dc3e      	bgt.n	8005552 <_dtoa_r+0x81a>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d137      	bne.n	800554a <_dtoa_r+0x812>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d134      	bne.n	800554e <_dtoa_r+0x816>
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054ea:	0d1b      	lsrs	r3, r3, #20
 80054ec:	051b      	lsls	r3, r3, #20
 80054ee:	b12b      	cbz	r3, 80054fc <_dtoa_r+0x7c4>
 80054f0:	9b07      	ldr	r3, [sp, #28]
 80054f2:	f109 0901 	add.w	r9, r9, #1
 80054f6:	3301      	adds	r3, #1
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	2301      	movs	r3, #1
 80054fc:	9308      	str	r3, [sp, #32]
 80054fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005500:	2b00      	cmp	r3, #0
 8005502:	d128      	bne.n	8005556 <_dtoa_r+0x81e>
 8005504:	2001      	movs	r0, #1
 8005506:	e02e      	b.n	8005566 <_dtoa_r+0x82e>
 8005508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800550a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800550e:	e796      	b.n	800543e <_dtoa_r+0x706>
 8005510:	9b08      	ldr	r3, [sp, #32]
 8005512:	f108 36ff 	add.w	r6, r8, #4294967295
 8005516:	42b3      	cmp	r3, r6
 8005518:	bfb7      	itett	lt
 800551a:	9b08      	ldrlt	r3, [sp, #32]
 800551c:	1b9e      	subge	r6, r3, r6
 800551e:	1af2      	sublt	r2, r6, r3
 8005520:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005522:	bfbf      	itttt	lt
 8005524:	9608      	strlt	r6, [sp, #32]
 8005526:	189b      	addlt	r3, r3, r2
 8005528:	930c      	strlt	r3, [sp, #48]	; 0x30
 800552a:	2600      	movlt	r6, #0
 800552c:	f1b8 0f00 	cmp.w	r8, #0
 8005530:	bfb9      	ittee	lt
 8005532:	eba9 0508 	sublt.w	r5, r9, r8
 8005536:	2300      	movlt	r3, #0
 8005538:	464d      	movge	r5, r9
 800553a:	4643      	movge	r3, r8
 800553c:	e781      	b.n	8005442 <_dtoa_r+0x70a>
 800553e:	9e08      	ldr	r6, [sp, #32]
 8005540:	464d      	mov	r5, r9
 8005542:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005544:	e786      	b.n	8005454 <_dtoa_r+0x71c>
 8005546:	9a08      	ldr	r2, [sp, #32]
 8005548:	e7ad      	b.n	80054a6 <_dtoa_r+0x76e>
 800554a:	2300      	movs	r3, #0
 800554c:	e7d6      	b.n	80054fc <_dtoa_r+0x7c4>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	e7d4      	b.n	80054fc <_dtoa_r+0x7c4>
 8005552:	2300      	movs	r3, #0
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	6933      	ldr	r3, [r6, #16]
 8005558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800555c:	6918      	ldr	r0, [r3, #16]
 800555e:	f000 fdc7 	bl	80060f0 <__hi0bits>
 8005562:	f1c0 0020 	rsb	r0, r0, #32
 8005566:	9b07      	ldr	r3, [sp, #28]
 8005568:	4418      	add	r0, r3
 800556a:	f010 001f 	ands.w	r0, r0, #31
 800556e:	d047      	beq.n	8005600 <_dtoa_r+0x8c8>
 8005570:	f1c0 0320 	rsb	r3, r0, #32
 8005574:	2b04      	cmp	r3, #4
 8005576:	dd3b      	ble.n	80055f0 <_dtoa_r+0x8b8>
 8005578:	9b07      	ldr	r3, [sp, #28]
 800557a:	f1c0 001c 	rsb	r0, r0, #28
 800557e:	4481      	add	r9, r0
 8005580:	4405      	add	r5, r0
 8005582:	4403      	add	r3, r0
 8005584:	9307      	str	r3, [sp, #28]
 8005586:	f1b9 0f00 	cmp.w	r9, #0
 800558a:	dd05      	ble.n	8005598 <_dtoa_r+0x860>
 800558c:	4659      	mov	r1, fp
 800558e:	464a      	mov	r2, r9
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fee7 	bl	8006364 <__lshift>
 8005596:	4683      	mov	fp, r0
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	dd05      	ble.n	80055aa <_dtoa_r+0x872>
 800559e:	4631      	mov	r1, r6
 80055a0:	461a      	mov	r2, r3
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 fede 	bl	8006364 <__lshift>
 80055a8:	4606      	mov	r6, r0
 80055aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ac:	b353      	cbz	r3, 8005604 <_dtoa_r+0x8cc>
 80055ae:	4631      	mov	r1, r6
 80055b0:	4658      	mov	r0, fp
 80055b2:	f000 ff2b 	bl	800640c <__mcmp>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	da24      	bge.n	8005604 <_dtoa_r+0x8cc>
 80055ba:	2300      	movs	r3, #0
 80055bc:	4659      	mov	r1, fp
 80055be:	220a      	movs	r2, #10
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fd1c 	bl	8005ffe <__multadd>
 80055c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055cc:	4683      	mov	fp, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8144 	beq.w	800585c <_dtoa_r+0xb24>
 80055d4:	2300      	movs	r3, #0
 80055d6:	4639      	mov	r1, r7
 80055d8:	220a      	movs	r2, #10
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 fd0f 	bl	8005ffe <__multadd>
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	4607      	mov	r7, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc4d      	bgt.n	8005684 <_dtoa_r+0x94c>
 80055e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	dd4a      	ble.n	8005684 <_dtoa_r+0x94c>
 80055ee:	e011      	b.n	8005614 <_dtoa_r+0x8dc>
 80055f0:	d0c9      	beq.n	8005586 <_dtoa_r+0x84e>
 80055f2:	9a07      	ldr	r2, [sp, #28]
 80055f4:	331c      	adds	r3, #28
 80055f6:	441a      	add	r2, r3
 80055f8:	4499      	add	r9, r3
 80055fa:	441d      	add	r5, r3
 80055fc:	4613      	mov	r3, r2
 80055fe:	e7c1      	b.n	8005584 <_dtoa_r+0x84c>
 8005600:	4603      	mov	r3, r0
 8005602:	e7f6      	b.n	80055f2 <_dtoa_r+0x8ba>
 8005604:	f1b8 0f00 	cmp.w	r8, #0
 8005608:	dc36      	bgt.n	8005678 <_dtoa_r+0x940>
 800560a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800560c:	2b02      	cmp	r3, #2
 800560e:	dd33      	ble.n	8005678 <_dtoa_r+0x940>
 8005610:	f8cd 8010 	str.w	r8, [sp, #16]
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	b963      	cbnz	r3, 8005632 <_dtoa_r+0x8fa>
 8005618:	4631      	mov	r1, r6
 800561a:	2205      	movs	r2, #5
 800561c:	4620      	mov	r0, r4
 800561e:	f000 fcee 	bl	8005ffe <__multadd>
 8005622:	4601      	mov	r1, r0
 8005624:	4606      	mov	r6, r0
 8005626:	4658      	mov	r0, fp
 8005628:	f000 fef0 	bl	800640c <__mcmp>
 800562c:	2800      	cmp	r0, #0
 800562e:	f73f add3 	bgt.w	80051d8 <_dtoa_r+0x4a0>
 8005632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005634:	9d06      	ldr	r5, [sp, #24]
 8005636:	ea6f 0a03 	mvn.w	sl, r3
 800563a:	f04f 0900 	mov.w	r9, #0
 800563e:	4631      	mov	r1, r6
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fcc5 	bl	8005fd0 <_Bfree>
 8005646:	2f00      	cmp	r7, #0
 8005648:	f43f aebd 	beq.w	80053c6 <_dtoa_r+0x68e>
 800564c:	f1b9 0f00 	cmp.w	r9, #0
 8005650:	d005      	beq.n	800565e <_dtoa_r+0x926>
 8005652:	45b9      	cmp	r9, r7
 8005654:	d003      	beq.n	800565e <_dtoa_r+0x926>
 8005656:	4649      	mov	r1, r9
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fcb9 	bl	8005fd0 <_Bfree>
 800565e:	4639      	mov	r1, r7
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fcb5 	bl	8005fd0 <_Bfree>
 8005666:	e6ae      	b.n	80053c6 <_dtoa_r+0x68e>
 8005668:	2600      	movs	r6, #0
 800566a:	4637      	mov	r7, r6
 800566c:	e7e1      	b.n	8005632 <_dtoa_r+0x8fa>
 800566e:	46ba      	mov	sl, r7
 8005670:	4637      	mov	r7, r6
 8005672:	e5b1      	b.n	80051d8 <_dtoa_r+0x4a0>
 8005674:	40240000 	.word	0x40240000
 8005678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567a:	f8cd 8010 	str.w	r8, [sp, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80f3 	beq.w	800586a <_dtoa_r+0xb32>
 8005684:	2d00      	cmp	r5, #0
 8005686:	dd05      	ble.n	8005694 <_dtoa_r+0x95c>
 8005688:	4639      	mov	r1, r7
 800568a:	462a      	mov	r2, r5
 800568c:	4620      	mov	r0, r4
 800568e:	f000 fe69 	bl	8006364 <__lshift>
 8005692:	4607      	mov	r7, r0
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04c      	beq.n	8005734 <_dtoa_r+0x9fc>
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fc63 	bl	8005f68 <_Balloc>
 80056a2:	4605      	mov	r5, r0
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	f107 010c 	add.w	r1, r7, #12
 80056aa:	3202      	adds	r2, #2
 80056ac:	0092      	lsls	r2, r2, #2
 80056ae:	300c      	adds	r0, #12
 80056b0:	f7fd fd4a 	bl	8003148 <memcpy>
 80056b4:	2201      	movs	r2, #1
 80056b6:	4629      	mov	r1, r5
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fe53 	bl	8006364 <__lshift>
 80056be:	46b9      	mov	r9, r7
 80056c0:	4607      	mov	r7, r0
 80056c2:	9b06      	ldr	r3, [sp, #24]
 80056c4:	9307      	str	r3, [sp, #28]
 80056c6:	9b02      	ldr	r3, [sp, #8]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	4631      	mov	r1, r6
 80056d0:	4658      	mov	r0, fp
 80056d2:	f7ff faa3 	bl	8004c1c <quorem>
 80056d6:	4649      	mov	r1, r9
 80056d8:	4605      	mov	r5, r0
 80056da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056de:	4658      	mov	r0, fp
 80056e0:	f000 fe94 	bl	800640c <__mcmp>
 80056e4:	463a      	mov	r2, r7
 80056e6:	9002      	str	r0, [sp, #8]
 80056e8:	4631      	mov	r1, r6
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 fea8 	bl	8006440 <__mdiff>
 80056f0:	68c3      	ldr	r3, [r0, #12]
 80056f2:	4602      	mov	r2, r0
 80056f4:	bb03      	cbnz	r3, 8005738 <_dtoa_r+0xa00>
 80056f6:	4601      	mov	r1, r0
 80056f8:	9009      	str	r0, [sp, #36]	; 0x24
 80056fa:	4658      	mov	r0, fp
 80056fc:	f000 fe86 	bl	800640c <__mcmp>
 8005700:	4603      	mov	r3, r0
 8005702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005704:	4611      	mov	r1, r2
 8005706:	4620      	mov	r0, r4
 8005708:	9309      	str	r3, [sp, #36]	; 0x24
 800570a:	f000 fc61 	bl	8005fd0 <_Bfree>
 800570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005710:	b9a3      	cbnz	r3, 800573c <_dtoa_r+0xa04>
 8005712:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005714:	b992      	cbnz	r2, 800573c <_dtoa_r+0xa04>
 8005716:	9a08      	ldr	r2, [sp, #32]
 8005718:	b982      	cbnz	r2, 800573c <_dtoa_r+0xa04>
 800571a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800571e:	d029      	beq.n	8005774 <_dtoa_r+0xa3c>
 8005720:	9b02      	ldr	r3, [sp, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	dd01      	ble.n	800572a <_dtoa_r+0x9f2>
 8005726:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800572a:	9b07      	ldr	r3, [sp, #28]
 800572c:	1c5d      	adds	r5, r3, #1
 800572e:	f883 8000 	strb.w	r8, [r3]
 8005732:	e784      	b.n	800563e <_dtoa_r+0x906>
 8005734:	4638      	mov	r0, r7
 8005736:	e7c2      	b.n	80056be <_dtoa_r+0x986>
 8005738:	2301      	movs	r3, #1
 800573a:	e7e3      	b.n	8005704 <_dtoa_r+0x9cc>
 800573c:	9a02      	ldr	r2, [sp, #8]
 800573e:	2a00      	cmp	r2, #0
 8005740:	db04      	blt.n	800574c <_dtoa_r+0xa14>
 8005742:	d123      	bne.n	800578c <_dtoa_r+0xa54>
 8005744:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005746:	bb0a      	cbnz	r2, 800578c <_dtoa_r+0xa54>
 8005748:	9a08      	ldr	r2, [sp, #32]
 800574a:	b9fa      	cbnz	r2, 800578c <_dtoa_r+0xa54>
 800574c:	2b00      	cmp	r3, #0
 800574e:	ddec      	ble.n	800572a <_dtoa_r+0x9f2>
 8005750:	4659      	mov	r1, fp
 8005752:	2201      	movs	r2, #1
 8005754:	4620      	mov	r0, r4
 8005756:	f000 fe05 	bl	8006364 <__lshift>
 800575a:	4631      	mov	r1, r6
 800575c:	4683      	mov	fp, r0
 800575e:	f000 fe55 	bl	800640c <__mcmp>
 8005762:	2800      	cmp	r0, #0
 8005764:	dc03      	bgt.n	800576e <_dtoa_r+0xa36>
 8005766:	d1e0      	bne.n	800572a <_dtoa_r+0x9f2>
 8005768:	f018 0f01 	tst.w	r8, #1
 800576c:	d0dd      	beq.n	800572a <_dtoa_r+0x9f2>
 800576e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005772:	d1d8      	bne.n	8005726 <_dtoa_r+0x9ee>
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	9a07      	ldr	r2, [sp, #28]
 8005778:	1c5d      	adds	r5, r3, #1
 800577a:	2339      	movs	r3, #57	; 0x39
 800577c:	7013      	strb	r3, [r2, #0]
 800577e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005782:	1e6a      	subs	r2, r5, #1
 8005784:	2b39      	cmp	r3, #57	; 0x39
 8005786:	d04d      	beq.n	8005824 <_dtoa_r+0xaec>
 8005788:	3301      	adds	r3, #1
 800578a:	e052      	b.n	8005832 <_dtoa_r+0xafa>
 800578c:	9a07      	ldr	r2, [sp, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f102 0501 	add.w	r5, r2, #1
 8005794:	dd06      	ble.n	80057a4 <_dtoa_r+0xa6c>
 8005796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800579a:	d0eb      	beq.n	8005774 <_dtoa_r+0xa3c>
 800579c:	f108 0801 	add.w	r8, r8, #1
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	e7c4      	b.n	800572e <_dtoa_r+0x9f6>
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	1aeb      	subs	r3, r5, r3
 80057aa:	4293      	cmp	r3, r2
 80057ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80057b0:	d021      	beq.n	80057f6 <_dtoa_r+0xabe>
 80057b2:	4659      	mov	r1, fp
 80057b4:	2300      	movs	r3, #0
 80057b6:	220a      	movs	r2, #10
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fc20 	bl	8005ffe <__multadd>
 80057be:	45b9      	cmp	r9, r7
 80057c0:	4683      	mov	fp, r0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	f04f 020a 	mov.w	r2, #10
 80057ca:	4649      	mov	r1, r9
 80057cc:	4620      	mov	r0, r4
 80057ce:	d105      	bne.n	80057dc <_dtoa_r+0xaa4>
 80057d0:	f000 fc15 	bl	8005ffe <__multadd>
 80057d4:	4681      	mov	r9, r0
 80057d6:	4607      	mov	r7, r0
 80057d8:	9507      	str	r5, [sp, #28]
 80057da:	e778      	b.n	80056ce <_dtoa_r+0x996>
 80057dc:	f000 fc0f 	bl	8005ffe <__multadd>
 80057e0:	4639      	mov	r1, r7
 80057e2:	4681      	mov	r9, r0
 80057e4:	2300      	movs	r3, #0
 80057e6:	220a      	movs	r2, #10
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fc08 	bl	8005ffe <__multadd>
 80057ee:	4607      	mov	r7, r0
 80057f0:	e7f2      	b.n	80057d8 <_dtoa_r+0xaa0>
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	4659      	mov	r1, fp
 80057f8:	2201      	movs	r2, #1
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fdb2 	bl	8006364 <__lshift>
 8005800:	4631      	mov	r1, r6
 8005802:	4683      	mov	fp, r0
 8005804:	f000 fe02 	bl	800640c <__mcmp>
 8005808:	2800      	cmp	r0, #0
 800580a:	dcb8      	bgt.n	800577e <_dtoa_r+0xa46>
 800580c:	d102      	bne.n	8005814 <_dtoa_r+0xadc>
 800580e:	f018 0f01 	tst.w	r8, #1
 8005812:	d1b4      	bne.n	800577e <_dtoa_r+0xa46>
 8005814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005818:	1e6a      	subs	r2, r5, #1
 800581a:	2b30      	cmp	r3, #48	; 0x30
 800581c:	f47f af0f 	bne.w	800563e <_dtoa_r+0x906>
 8005820:	4615      	mov	r5, r2
 8005822:	e7f7      	b.n	8005814 <_dtoa_r+0xadc>
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	4293      	cmp	r3, r2
 8005828:	d105      	bne.n	8005836 <_dtoa_r+0xafe>
 800582a:	2331      	movs	r3, #49	; 0x31
 800582c:	9a06      	ldr	r2, [sp, #24]
 800582e:	f10a 0a01 	add.w	sl, sl, #1
 8005832:	7013      	strb	r3, [r2, #0]
 8005834:	e703      	b.n	800563e <_dtoa_r+0x906>
 8005836:	4615      	mov	r5, r2
 8005838:	e7a1      	b.n	800577e <_dtoa_r+0xa46>
 800583a:	4b17      	ldr	r3, [pc, #92]	; (8005898 <_dtoa_r+0xb60>)
 800583c:	f7ff bae1 	b.w	8004e02 <_dtoa_r+0xca>
 8005840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f aabb 	bne.w	8004dbe <_dtoa_r+0x86>
 8005848:	4b14      	ldr	r3, [pc, #80]	; (800589c <_dtoa_r+0xb64>)
 800584a:	f7ff bada 	b.w	8004e02 <_dtoa_r+0xca>
 800584e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005850:	2b01      	cmp	r3, #1
 8005852:	f77f ae3f 	ble.w	80054d4 <_dtoa_r+0x79c>
 8005856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005858:	9308      	str	r3, [sp, #32]
 800585a:	e653      	b.n	8005504 <_dtoa_r+0x7cc>
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	dc03      	bgt.n	800586a <_dtoa_r+0xb32>
 8005862:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005864:	2b02      	cmp	r3, #2
 8005866:	f73f aed5 	bgt.w	8005614 <_dtoa_r+0x8dc>
 800586a:	9d06      	ldr	r5, [sp, #24]
 800586c:	4631      	mov	r1, r6
 800586e:	4658      	mov	r0, fp
 8005870:	f7ff f9d4 	bl	8004c1c <quorem>
 8005874:	9b06      	ldr	r3, [sp, #24]
 8005876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800587a:	f805 8b01 	strb.w	r8, [r5], #1
 800587e:	9a04      	ldr	r2, [sp, #16]
 8005880:	1aeb      	subs	r3, r5, r3
 8005882:	429a      	cmp	r2, r3
 8005884:	ddb5      	ble.n	80057f2 <_dtoa_r+0xaba>
 8005886:	4659      	mov	r1, fp
 8005888:	2300      	movs	r3, #0
 800588a:	220a      	movs	r2, #10
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fbb6 	bl	8005ffe <__multadd>
 8005892:	4683      	mov	fp, r0
 8005894:	e7ea      	b.n	800586c <_dtoa_r+0xb34>
 8005896:	bf00      	nop
 8005898:	08006dc4 	.word	0x08006dc4
 800589c:	08006e40 	.word	0x08006e40

080058a0 <rshift>:
 80058a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a2:	6906      	ldr	r6, [r0, #16]
 80058a4:	114b      	asrs	r3, r1, #5
 80058a6:	429e      	cmp	r6, r3
 80058a8:	f100 0414 	add.w	r4, r0, #20
 80058ac:	dd31      	ble.n	8005912 <rshift+0x72>
 80058ae:	f011 011f 	ands.w	r1, r1, #31
 80058b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80058b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80058ba:	d108      	bne.n	80058ce <rshift+0x2e>
 80058bc:	4621      	mov	r1, r4
 80058be:	42b2      	cmp	r2, r6
 80058c0:	460b      	mov	r3, r1
 80058c2:	d211      	bcs.n	80058e8 <rshift+0x48>
 80058c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80058c8:	f841 3b04 	str.w	r3, [r1], #4
 80058cc:	e7f7      	b.n	80058be <rshift+0x1e>
 80058ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80058d2:	4623      	mov	r3, r4
 80058d4:	f1c1 0c20 	rsb	ip, r1, #32
 80058d8:	40cd      	lsrs	r5, r1
 80058da:	3204      	adds	r2, #4
 80058dc:	42b2      	cmp	r2, r6
 80058de:	4617      	mov	r7, r2
 80058e0:	d30d      	bcc.n	80058fe <rshift+0x5e>
 80058e2:	601d      	str	r5, [r3, #0]
 80058e4:	b105      	cbz	r5, 80058e8 <rshift+0x48>
 80058e6:	3304      	adds	r3, #4
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	eba3 0204 	sub.w	r2, r3, r4
 80058ee:	bf08      	it	eq
 80058f0:	2300      	moveq	r3, #0
 80058f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80058f6:	6102      	str	r2, [r0, #16]
 80058f8:	bf08      	it	eq
 80058fa:	6143      	streq	r3, [r0, #20]
 80058fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fe:	683f      	ldr	r7, [r7, #0]
 8005900:	fa07 f70c 	lsl.w	r7, r7, ip
 8005904:	433d      	orrs	r5, r7
 8005906:	f843 5b04 	str.w	r5, [r3], #4
 800590a:	f852 5b04 	ldr.w	r5, [r2], #4
 800590e:	40cd      	lsrs	r5, r1
 8005910:	e7e4      	b.n	80058dc <rshift+0x3c>
 8005912:	4623      	mov	r3, r4
 8005914:	e7e8      	b.n	80058e8 <rshift+0x48>

08005916 <__hexdig_fun>:
 8005916:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800591a:	2b09      	cmp	r3, #9
 800591c:	d802      	bhi.n	8005924 <__hexdig_fun+0xe>
 800591e:	3820      	subs	r0, #32
 8005920:	b2c0      	uxtb	r0, r0
 8005922:	4770      	bx	lr
 8005924:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005928:	2b05      	cmp	r3, #5
 800592a:	d801      	bhi.n	8005930 <__hexdig_fun+0x1a>
 800592c:	3847      	subs	r0, #71	; 0x47
 800592e:	e7f7      	b.n	8005920 <__hexdig_fun+0xa>
 8005930:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005934:	2b05      	cmp	r3, #5
 8005936:	d801      	bhi.n	800593c <__hexdig_fun+0x26>
 8005938:	3827      	subs	r0, #39	; 0x27
 800593a:	e7f1      	b.n	8005920 <__hexdig_fun+0xa>
 800593c:	2000      	movs	r0, #0
 800593e:	4770      	bx	lr

08005940 <__gethex>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b08b      	sub	sp, #44	; 0x2c
 8005946:	9002      	str	r0, [sp, #8]
 8005948:	9816      	ldr	r0, [sp, #88]	; 0x58
 800594a:	468a      	mov	sl, r1
 800594c:	4690      	mov	r8, r2
 800594e:	9306      	str	r3, [sp, #24]
 8005950:	f000 fad1 	bl	8005ef6 <__localeconv_l>
 8005954:	6803      	ldr	r3, [r0, #0]
 8005956:	f04f 0b00 	mov.w	fp, #0
 800595a:	4618      	mov	r0, r3
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	f7fa fc19 	bl	8000194 <strlen>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	9001      	str	r0, [sp, #4]
 8005966:	4403      	add	r3, r0
 8005968:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	f8da 3000 	ldr.w	r3, [sl]
 8005972:	3302      	adds	r3, #2
 8005974:	461f      	mov	r7, r3
 8005976:	f813 0b01 	ldrb.w	r0, [r3], #1
 800597a:	2830      	cmp	r0, #48	; 0x30
 800597c:	d06c      	beq.n	8005a58 <__gethex+0x118>
 800597e:	f7ff ffca 	bl	8005916 <__hexdig_fun>
 8005982:	4604      	mov	r4, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d16a      	bne.n	8005a5e <__gethex+0x11e>
 8005988:	9a01      	ldr	r2, [sp, #4]
 800598a:	9903      	ldr	r1, [sp, #12]
 800598c:	4638      	mov	r0, r7
 800598e:	f001 f8f9 	bl	8006b84 <strncmp>
 8005992:	2800      	cmp	r0, #0
 8005994:	d166      	bne.n	8005a64 <__gethex+0x124>
 8005996:	9b01      	ldr	r3, [sp, #4]
 8005998:	5cf8      	ldrb	r0, [r7, r3]
 800599a:	18fe      	adds	r6, r7, r3
 800599c:	f7ff ffbb 	bl	8005916 <__hexdig_fun>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d062      	beq.n	8005a6a <__gethex+0x12a>
 80059a4:	4633      	mov	r3, r6
 80059a6:	7818      	ldrb	r0, [r3, #0]
 80059a8:	461f      	mov	r7, r3
 80059aa:	2830      	cmp	r0, #48	; 0x30
 80059ac:	f103 0301 	add.w	r3, r3, #1
 80059b0:	d0f9      	beq.n	80059a6 <__gethex+0x66>
 80059b2:	f7ff ffb0 	bl	8005916 <__hexdig_fun>
 80059b6:	fab0 f580 	clz	r5, r0
 80059ba:	4634      	mov	r4, r6
 80059bc:	f04f 0b01 	mov.w	fp, #1
 80059c0:	096d      	lsrs	r5, r5, #5
 80059c2:	463a      	mov	r2, r7
 80059c4:	4616      	mov	r6, r2
 80059c6:	7830      	ldrb	r0, [r6, #0]
 80059c8:	3201      	adds	r2, #1
 80059ca:	f7ff ffa4 	bl	8005916 <__hexdig_fun>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d1f8      	bne.n	80059c4 <__gethex+0x84>
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	9903      	ldr	r1, [sp, #12]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f001 f8d4 	bl	8006b84 <strncmp>
 80059dc:	b950      	cbnz	r0, 80059f4 <__gethex+0xb4>
 80059de:	b954      	cbnz	r4, 80059f6 <__gethex+0xb6>
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	18f4      	adds	r4, r6, r3
 80059e4:	4622      	mov	r2, r4
 80059e6:	4616      	mov	r6, r2
 80059e8:	7830      	ldrb	r0, [r6, #0]
 80059ea:	3201      	adds	r2, #1
 80059ec:	f7ff ff93 	bl	8005916 <__hexdig_fun>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1f8      	bne.n	80059e6 <__gethex+0xa6>
 80059f4:	b10c      	cbz	r4, 80059fa <__gethex+0xba>
 80059f6:	1ba4      	subs	r4, r4, r6
 80059f8:	00a4      	lsls	r4, r4, #2
 80059fa:	7833      	ldrb	r3, [r6, #0]
 80059fc:	2b50      	cmp	r3, #80	; 0x50
 80059fe:	d001      	beq.n	8005a04 <__gethex+0xc4>
 8005a00:	2b70      	cmp	r3, #112	; 0x70
 8005a02:	d140      	bne.n	8005a86 <__gethex+0x146>
 8005a04:	7873      	ldrb	r3, [r6, #1]
 8005a06:	2b2b      	cmp	r3, #43	; 0x2b
 8005a08:	d031      	beq.n	8005a6e <__gethex+0x12e>
 8005a0a:	2b2d      	cmp	r3, #45	; 0x2d
 8005a0c:	d033      	beq.n	8005a76 <__gethex+0x136>
 8005a0e:	f04f 0900 	mov.w	r9, #0
 8005a12:	1c71      	adds	r1, r6, #1
 8005a14:	7808      	ldrb	r0, [r1, #0]
 8005a16:	f7ff ff7e 	bl	8005916 <__hexdig_fun>
 8005a1a:	1e43      	subs	r3, r0, #1
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b18      	cmp	r3, #24
 8005a20:	d831      	bhi.n	8005a86 <__gethex+0x146>
 8005a22:	f1a0 0210 	sub.w	r2, r0, #16
 8005a26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a2a:	f7ff ff74 	bl	8005916 <__hexdig_fun>
 8005a2e:	1e43      	subs	r3, r0, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b18      	cmp	r3, #24
 8005a34:	d922      	bls.n	8005a7c <__gethex+0x13c>
 8005a36:	f1b9 0f00 	cmp.w	r9, #0
 8005a3a:	d000      	beq.n	8005a3e <__gethex+0xfe>
 8005a3c:	4252      	negs	r2, r2
 8005a3e:	4414      	add	r4, r2
 8005a40:	f8ca 1000 	str.w	r1, [sl]
 8005a44:	b30d      	cbz	r5, 8005a8a <__gethex+0x14a>
 8005a46:	f1bb 0f00 	cmp.w	fp, #0
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2706      	moveq	r7, #6
 8005a4e:	2700      	movne	r7, #0
 8005a50:	4638      	mov	r0, r7
 8005a52:	b00b      	add	sp, #44	; 0x2c
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	f10b 0b01 	add.w	fp, fp, #1
 8005a5c:	e78a      	b.n	8005974 <__gethex+0x34>
 8005a5e:	2500      	movs	r5, #0
 8005a60:	462c      	mov	r4, r5
 8005a62:	e7ae      	b.n	80059c2 <__gethex+0x82>
 8005a64:	463e      	mov	r6, r7
 8005a66:	2501      	movs	r5, #1
 8005a68:	e7c7      	b.n	80059fa <__gethex+0xba>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	e7fb      	b.n	8005a66 <__gethex+0x126>
 8005a6e:	f04f 0900 	mov.w	r9, #0
 8005a72:	1cb1      	adds	r1, r6, #2
 8005a74:	e7ce      	b.n	8005a14 <__gethex+0xd4>
 8005a76:	f04f 0901 	mov.w	r9, #1
 8005a7a:	e7fa      	b.n	8005a72 <__gethex+0x132>
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	fb03 0202 	mla	r2, r3, r2, r0
 8005a82:	3a10      	subs	r2, #16
 8005a84:	e7cf      	b.n	8005a26 <__gethex+0xe6>
 8005a86:	4631      	mov	r1, r6
 8005a88:	e7da      	b.n	8005a40 <__gethex+0x100>
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	1bf3      	subs	r3, r6, r7
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	dc49      	bgt.n	8005b28 <__gethex+0x1e8>
 8005a94:	9802      	ldr	r0, [sp, #8]
 8005a96:	f000 fa67 	bl	8005f68 <_Balloc>
 8005a9a:	f04f 0b00 	mov.w	fp, #0
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	46da      	mov	sl, fp
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	f100 0914 	add.w	r9, r0, #20
 8005aa8:	f1c3 0301 	rsb	r3, r3, #1
 8005aac:	f8cd 9010 	str.w	r9, [sp, #16]
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	42b7      	cmp	r7, r6
 8005ab4:	d33b      	bcc.n	8005b2e <__gethex+0x1ee>
 8005ab6:	9804      	ldr	r0, [sp, #16]
 8005ab8:	f840 ab04 	str.w	sl, [r0], #4
 8005abc:	eba0 0009 	sub.w	r0, r0, r9
 8005ac0:	1080      	asrs	r0, r0, #2
 8005ac2:	6128      	str	r0, [r5, #16]
 8005ac4:	0147      	lsls	r7, r0, #5
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f000 fb12 	bl	80060f0 <__hi0bits>
 8005acc:	f8d8 6000 	ldr.w	r6, [r8]
 8005ad0:	1a3f      	subs	r7, r7, r0
 8005ad2:	42b7      	cmp	r7, r6
 8005ad4:	dd64      	ble.n	8005ba0 <__gethex+0x260>
 8005ad6:	1bbf      	subs	r7, r7, r6
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fe1b 	bl	8006716 <__any_on>
 8005ae0:	4682      	mov	sl, r0
 8005ae2:	b178      	cbz	r0, 8005b04 <__gethex+0x1c4>
 8005ae4:	f04f 0a01 	mov.w	sl, #1
 8005ae8:	1e7b      	subs	r3, r7, #1
 8005aea:	1159      	asrs	r1, r3, #5
 8005aec:	f003 021f 	and.w	r2, r3, #31
 8005af0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005af4:	fa0a f202 	lsl.w	r2, sl, r2
 8005af8:	420a      	tst	r2, r1
 8005afa:	d003      	beq.n	8005b04 <__gethex+0x1c4>
 8005afc:	4553      	cmp	r3, sl
 8005afe:	dc46      	bgt.n	8005b8e <__gethex+0x24e>
 8005b00:	f04f 0a02 	mov.w	sl, #2
 8005b04:	4639      	mov	r1, r7
 8005b06:	4628      	mov	r0, r5
 8005b08:	f7ff feca 	bl	80058a0 <rshift>
 8005b0c:	443c      	add	r4, r7
 8005b0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	da52      	bge.n	8005bbc <__gethex+0x27c>
 8005b16:	4629      	mov	r1, r5
 8005b18:	9802      	ldr	r0, [sp, #8]
 8005b1a:	f000 fa59 	bl	8005fd0 <_Bfree>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b22:	27a3      	movs	r7, #163	; 0xa3
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e793      	b.n	8005a50 <__gethex+0x110>
 8005b28:	3101      	adds	r1, #1
 8005b2a:	105b      	asrs	r3, r3, #1
 8005b2c:	e7b0      	b.n	8005a90 <__gethex+0x150>
 8005b2e:	1e73      	subs	r3, r6, #1
 8005b30:	9305      	str	r3, [sp, #20]
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <__gethex+0x22e>
 8005b3c:	f1bb 0f20 	cmp.w	fp, #32
 8005b40:	d107      	bne.n	8005b52 <__gethex+0x212>
 8005b42:	9b04      	ldr	r3, [sp, #16]
 8005b44:	f8c3 a000 	str.w	sl, [r3]
 8005b48:	f04f 0a00 	mov.w	sl, #0
 8005b4c:	46d3      	mov	fp, sl
 8005b4e:	3304      	adds	r3, #4
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005b56:	f7ff fede 	bl	8005916 <__hexdig_fun>
 8005b5a:	f000 000f 	and.w	r0, r0, #15
 8005b5e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005b62:	ea4a 0a00 	orr.w	sl, sl, r0
 8005b66:	f10b 0b04 	add.w	fp, fp, #4
 8005b6a:	9b05      	ldr	r3, [sp, #20]
 8005b6c:	e00d      	b.n	8005b8a <__gethex+0x24a>
 8005b6e:	9b05      	ldr	r3, [sp, #20]
 8005b70:	9a08      	ldr	r2, [sp, #32]
 8005b72:	4413      	add	r3, r2
 8005b74:	42bb      	cmp	r3, r7
 8005b76:	d3e1      	bcc.n	8005b3c <__gethex+0x1fc>
 8005b78:	4618      	mov	r0, r3
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	9903      	ldr	r1, [sp, #12]
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	f001 f800 	bl	8006b84 <strncmp>
 8005b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d1d8      	bne.n	8005b3c <__gethex+0x1fc>
 8005b8a:	461e      	mov	r6, r3
 8005b8c:	e791      	b.n	8005ab2 <__gethex+0x172>
 8005b8e:	1eb9      	subs	r1, r7, #2
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 fdc0 	bl	8006716 <__any_on>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d0b2      	beq.n	8005b00 <__gethex+0x1c0>
 8005b9a:	f04f 0a03 	mov.w	sl, #3
 8005b9e:	e7b1      	b.n	8005b04 <__gethex+0x1c4>
 8005ba0:	da09      	bge.n	8005bb6 <__gethex+0x276>
 8005ba2:	1bf7      	subs	r7, r6, r7
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	9802      	ldr	r0, [sp, #8]
 8005baa:	f000 fbdb 	bl	8006364 <__lshift>
 8005bae:	4605      	mov	r5, r0
 8005bb0:	1be4      	subs	r4, r4, r7
 8005bb2:	f100 0914 	add.w	r9, r0, #20
 8005bb6:	f04f 0a00 	mov.w	sl, #0
 8005bba:	e7a8      	b.n	8005b0e <__gethex+0x1ce>
 8005bbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	dd6b      	ble.n	8005c9c <__gethex+0x35c>
 8005bc4:	1b04      	subs	r4, r0, r4
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	dc2e      	bgt.n	8005c28 <__gethex+0x2e8>
 8005bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d022      	beq.n	8005c18 <__gethex+0x2d8>
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d024      	beq.n	8005c20 <__gethex+0x2e0>
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d115      	bne.n	8005c06 <__gethex+0x2c6>
 8005bda:	42a6      	cmp	r6, r4
 8005bdc:	d113      	bne.n	8005c06 <__gethex+0x2c6>
 8005bde:	2e01      	cmp	r6, #1
 8005be0:	dc0b      	bgt.n	8005bfa <__gethex+0x2ba>
 8005be2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005be6:	9a06      	ldr	r2, [sp, #24]
 8005be8:	2762      	movs	r7, #98	; 0x62
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	2301      	movs	r3, #1
 8005bee:	612b      	str	r3, [r5, #16]
 8005bf0:	f8c9 3000 	str.w	r3, [r9]
 8005bf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bf6:	601d      	str	r5, [r3, #0]
 8005bf8:	e72a      	b.n	8005a50 <__gethex+0x110>
 8005bfa:	1e71      	subs	r1, r6, #1
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fd8a 	bl	8006716 <__any_on>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d1ed      	bne.n	8005be2 <__gethex+0x2a2>
 8005c06:	4629      	mov	r1, r5
 8005c08:	9802      	ldr	r0, [sp, #8]
 8005c0a:	f000 f9e1 	bl	8005fd0 <_Bfree>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c12:	2750      	movs	r7, #80	; 0x50
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e71b      	b.n	8005a50 <__gethex+0x110>
 8005c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0e1      	beq.n	8005be2 <__gethex+0x2a2>
 8005c1e:	e7f2      	b.n	8005c06 <__gethex+0x2c6>
 8005c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1dd      	bne.n	8005be2 <__gethex+0x2a2>
 8005c26:	e7ee      	b.n	8005c06 <__gethex+0x2c6>
 8005c28:	1e67      	subs	r7, r4, #1
 8005c2a:	f1ba 0f00 	cmp.w	sl, #0
 8005c2e:	d132      	bne.n	8005c96 <__gethex+0x356>
 8005c30:	b127      	cbz	r7, 8005c3c <__gethex+0x2fc>
 8005c32:	4639      	mov	r1, r7
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fd6e 	bl	8006716 <__any_on>
 8005c3a:	4682      	mov	sl, r0
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	117a      	asrs	r2, r7, #5
 8005c40:	f007 071f 	and.w	r7, r7, #31
 8005c44:	fa03 f707 	lsl.w	r7, r3, r7
 8005c48:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	421f      	tst	r7, r3
 8005c50:	f04f 0702 	mov.w	r7, #2
 8005c54:	4628      	mov	r0, r5
 8005c56:	bf18      	it	ne
 8005c58:	f04a 0a02 	orrne.w	sl, sl, #2
 8005c5c:	1b36      	subs	r6, r6, r4
 8005c5e:	f7ff fe1f 	bl	80058a0 <rshift>
 8005c62:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005c66:	f1ba 0f00 	cmp.w	sl, #0
 8005c6a:	d048      	beq.n	8005cfe <__gethex+0x3be>
 8005c6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d015      	beq.n	8005ca0 <__gethex+0x360>
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d017      	beq.n	8005ca8 <__gethex+0x368>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d109      	bne.n	8005c90 <__gethex+0x350>
 8005c7c:	f01a 0f02 	tst.w	sl, #2
 8005c80:	d006      	beq.n	8005c90 <__gethex+0x350>
 8005c82:	f8d9 3000 	ldr.w	r3, [r9]
 8005c86:	ea4a 0a03 	orr.w	sl, sl, r3
 8005c8a:	f01a 0f01 	tst.w	sl, #1
 8005c8e:	d10e      	bne.n	8005cae <__gethex+0x36e>
 8005c90:	f047 0710 	orr.w	r7, r7, #16
 8005c94:	e033      	b.n	8005cfe <__gethex+0x3be>
 8005c96:	f04f 0a01 	mov.w	sl, #1
 8005c9a:	e7cf      	b.n	8005c3c <__gethex+0x2fc>
 8005c9c:	2701      	movs	r7, #1
 8005c9e:	e7e2      	b.n	8005c66 <__gethex+0x326>
 8005ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ca2:	f1c3 0301 	rsb	r3, r3, #1
 8005ca6:	9315      	str	r3, [sp, #84]	; 0x54
 8005ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <__gethex+0x350>
 8005cae:	f04f 0c00 	mov.w	ip, #0
 8005cb2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005cb6:	f105 0314 	add.w	r3, r5, #20
 8005cba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005cbe:	eb03 010a 	add.w	r1, r3, sl
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ccc:	d01c      	beq.n	8005d08 <__gethex+0x3c8>
 8005cce:	3201      	adds	r2, #1
 8005cd0:	6002      	str	r2, [r0, #0]
 8005cd2:	2f02      	cmp	r7, #2
 8005cd4:	f105 0314 	add.w	r3, r5, #20
 8005cd8:	d138      	bne.n	8005d4c <__gethex+0x40c>
 8005cda:	f8d8 2000 	ldr.w	r2, [r8]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	42b2      	cmp	r2, r6
 8005ce2:	d10a      	bne.n	8005cfa <__gethex+0x3ba>
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	1171      	asrs	r1, r6, #5
 8005ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005cec:	f006 061f 	and.w	r6, r6, #31
 8005cf0:	fa02 f606 	lsl.w	r6, r2, r6
 8005cf4:	421e      	tst	r6, r3
 8005cf6:	bf18      	it	ne
 8005cf8:	4617      	movne	r7, r2
 8005cfa:	f047 0720 	orr.w	r7, r7, #32
 8005cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d00:	601d      	str	r5, [r3, #0]
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	601c      	str	r4, [r3, #0]
 8005d06:	e6a3      	b.n	8005a50 <__gethex+0x110>
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d0e:	d8d8      	bhi.n	8005cc2 <__gethex+0x382>
 8005d10:	68ab      	ldr	r3, [r5, #8]
 8005d12:	4599      	cmp	r9, r3
 8005d14:	db12      	blt.n	8005d3c <__gethex+0x3fc>
 8005d16:	6869      	ldr	r1, [r5, #4]
 8005d18:	9802      	ldr	r0, [sp, #8]
 8005d1a:	3101      	adds	r1, #1
 8005d1c:	f000 f924 	bl	8005f68 <_Balloc>
 8005d20:	4683      	mov	fp, r0
 8005d22:	692a      	ldr	r2, [r5, #16]
 8005d24:	f105 010c 	add.w	r1, r5, #12
 8005d28:	3202      	adds	r2, #2
 8005d2a:	0092      	lsls	r2, r2, #2
 8005d2c:	300c      	adds	r0, #12
 8005d2e:	f7fd fa0b 	bl	8003148 <memcpy>
 8005d32:	4629      	mov	r1, r5
 8005d34:	9802      	ldr	r0, [sp, #8]
 8005d36:	f000 f94b 	bl	8005fd0 <_Bfree>
 8005d3a:	465d      	mov	r5, fp
 8005d3c:	692b      	ldr	r3, [r5, #16]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	612a      	str	r2, [r5, #16]
 8005d42:	2201      	movs	r2, #1
 8005d44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005d48:	615a      	str	r2, [r3, #20]
 8005d4a:	e7c2      	b.n	8005cd2 <__gethex+0x392>
 8005d4c:	692a      	ldr	r2, [r5, #16]
 8005d4e:	454a      	cmp	r2, r9
 8005d50:	dd0b      	ble.n	8005d6a <__gethex+0x42a>
 8005d52:	2101      	movs	r1, #1
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fda3 	bl	80058a0 <rshift>
 8005d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d5e:	3401      	adds	r4, #1
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	f6ff aed8 	blt.w	8005b16 <__gethex+0x1d6>
 8005d66:	2701      	movs	r7, #1
 8005d68:	e7c7      	b.n	8005cfa <__gethex+0x3ba>
 8005d6a:	f016 061f 	ands.w	r6, r6, #31
 8005d6e:	d0fa      	beq.n	8005d66 <__gethex+0x426>
 8005d70:	449a      	add	sl, r3
 8005d72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005d76:	f000 f9bb 	bl	80060f0 <__hi0bits>
 8005d7a:	f1c6 0620 	rsb	r6, r6, #32
 8005d7e:	42b0      	cmp	r0, r6
 8005d80:	dbe7      	blt.n	8005d52 <__gethex+0x412>
 8005d82:	e7f0      	b.n	8005d66 <__gethex+0x426>

08005d84 <L_shift>:
 8005d84:	f1c2 0208 	rsb	r2, r2, #8
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	b570      	push	{r4, r5, r6, lr}
 8005d8c:	f1c2 0620 	rsb	r6, r2, #32
 8005d90:	6843      	ldr	r3, [r0, #4]
 8005d92:	6804      	ldr	r4, [r0, #0]
 8005d94:	fa03 f506 	lsl.w	r5, r3, r6
 8005d98:	432c      	orrs	r4, r5
 8005d9a:	40d3      	lsrs	r3, r2
 8005d9c:	6004      	str	r4, [r0, #0]
 8005d9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005da2:	4288      	cmp	r0, r1
 8005da4:	d3f4      	bcc.n	8005d90 <L_shift+0xc>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}

08005da8 <__match>:
 8005da8:	b530      	push	{r4, r5, lr}
 8005daa:	6803      	ldr	r3, [r0, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db2:	b914      	cbnz	r4, 8005dba <__match+0x12>
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	2001      	movs	r0, #1
 8005db8:	bd30      	pop	{r4, r5, pc}
 8005dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005dc2:	2d19      	cmp	r5, #25
 8005dc4:	bf98      	it	ls
 8005dc6:	3220      	addls	r2, #32
 8005dc8:	42a2      	cmp	r2, r4
 8005dca:	d0f0      	beq.n	8005dae <__match+0x6>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7f3      	b.n	8005db8 <__match+0x10>

08005dd0 <__hexnan>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	680b      	ldr	r3, [r1, #0]
 8005dd8:	4682      	mov	sl, r0
 8005dda:	115f      	asrs	r7, r3, #5
 8005ddc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005de0:	f013 031f 	ands.w	r3, r3, #31
 8005de4:	bf18      	it	ne
 8005de6:	3704      	addne	r7, #4
 8005de8:	1f3e      	subs	r6, r7, #4
 8005dea:	4690      	mov	r8, r2
 8005dec:	46b1      	mov	r9, r6
 8005dee:	4634      	mov	r4, r6
 8005df0:	46ab      	mov	fp, r5
 8005df2:	b087      	sub	sp, #28
 8005df4:	6801      	ldr	r1, [r0, #0]
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	f847 5c04 	str.w	r5, [r7, #-4]
 8005dfc:	9502      	str	r5, [sp, #8]
 8005dfe:	784a      	ldrb	r2, [r1, #1]
 8005e00:	1c4b      	adds	r3, r1, #1
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	b342      	cbz	r2, 8005e58 <__hexnan+0x88>
 8005e06:	4610      	mov	r0, r2
 8005e08:	9105      	str	r1, [sp, #20]
 8005e0a:	9204      	str	r2, [sp, #16]
 8005e0c:	f7ff fd83 	bl	8005916 <__hexdig_fun>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d143      	bne.n	8005e9c <__hexnan+0xcc>
 8005e14:	9a04      	ldr	r2, [sp, #16]
 8005e16:	9905      	ldr	r1, [sp, #20]
 8005e18:	2a20      	cmp	r2, #32
 8005e1a:	d818      	bhi.n	8005e4e <__hexnan+0x7e>
 8005e1c:	9b02      	ldr	r3, [sp, #8]
 8005e1e:	459b      	cmp	fp, r3
 8005e20:	dd13      	ble.n	8005e4a <__hexnan+0x7a>
 8005e22:	454c      	cmp	r4, r9
 8005e24:	d206      	bcs.n	8005e34 <__hexnan+0x64>
 8005e26:	2d07      	cmp	r5, #7
 8005e28:	dc04      	bgt.n	8005e34 <__hexnan+0x64>
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff ffa8 	bl	8005d84 <L_shift>
 8005e34:	4544      	cmp	r4, r8
 8005e36:	d944      	bls.n	8005ec2 <__hexnan+0xf2>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f1a4 0904 	sub.w	r9, r4, #4
 8005e3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e42:	461d      	mov	r5, r3
 8005e44:	464c      	mov	r4, r9
 8005e46:	f8cd b008 	str.w	fp, [sp, #8]
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	e7d7      	b.n	8005dfe <__hexnan+0x2e>
 8005e4e:	2a29      	cmp	r2, #41	; 0x29
 8005e50:	d14a      	bne.n	8005ee8 <__hexnan+0x118>
 8005e52:	3102      	adds	r1, #2
 8005e54:	f8ca 1000 	str.w	r1, [sl]
 8005e58:	f1bb 0f00 	cmp.w	fp, #0
 8005e5c:	d044      	beq.n	8005ee8 <__hexnan+0x118>
 8005e5e:	454c      	cmp	r4, r9
 8005e60:	d206      	bcs.n	8005e70 <__hexnan+0xa0>
 8005e62:	2d07      	cmp	r5, #7
 8005e64:	dc04      	bgt.n	8005e70 <__hexnan+0xa0>
 8005e66:	462a      	mov	r2, r5
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7ff ff8a 	bl	8005d84 <L_shift>
 8005e70:	4544      	cmp	r4, r8
 8005e72:	d928      	bls.n	8005ec6 <__hexnan+0xf6>
 8005e74:	4643      	mov	r3, r8
 8005e76:	f854 2b04 	ldr.w	r2, [r4], #4
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	f843 2b04 	str.w	r2, [r3], #4
 8005e80:	d2f9      	bcs.n	8005e76 <__hexnan+0xa6>
 8005e82:	2200      	movs	r2, #0
 8005e84:	f843 2b04 	str.w	r2, [r3], #4
 8005e88:	429e      	cmp	r6, r3
 8005e8a:	d2fb      	bcs.n	8005e84 <__hexnan+0xb4>
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	b91b      	cbnz	r3, 8005e98 <__hexnan+0xc8>
 8005e90:	4546      	cmp	r6, r8
 8005e92:	d127      	bne.n	8005ee4 <__hexnan+0x114>
 8005e94:	2301      	movs	r3, #1
 8005e96:	6033      	str	r3, [r6, #0]
 8005e98:	2005      	movs	r0, #5
 8005e9a:	e026      	b.n	8005eea <__hexnan+0x11a>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	2d08      	cmp	r5, #8
 8005ea0:	f10b 0b01 	add.w	fp, fp, #1
 8005ea4:	dd06      	ble.n	8005eb4 <__hexnan+0xe4>
 8005ea6:	4544      	cmp	r4, r8
 8005ea8:	d9cf      	bls.n	8005e4a <__hexnan+0x7a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2501      	movs	r5, #1
 8005eae:	f844 3c04 	str.w	r3, [r4, #-4]
 8005eb2:	3c04      	subs	r4, #4
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	f000 000f 	and.w	r0, r0, #15
 8005eba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005ebe:	6020      	str	r0, [r4, #0]
 8005ec0:	e7c3      	b.n	8005e4a <__hexnan+0x7a>
 8005ec2:	2508      	movs	r5, #8
 8005ec4:	e7c1      	b.n	8005e4a <__hexnan+0x7a>
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0df      	beq.n	8005e8c <__hexnan+0xbc>
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	f1c3 0320 	rsb	r3, r3, #32
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005edc:	401a      	ands	r2, r3
 8005ede:	f847 2c04 	str.w	r2, [r7, #-4]
 8005ee2:	e7d3      	b.n	8005e8c <__hexnan+0xbc>
 8005ee4:	3e04      	subs	r6, #4
 8005ee6:	e7d1      	b.n	8005e8c <__hexnan+0xbc>
 8005ee8:	2004      	movs	r0, #4
 8005eea:	b007      	add	sp, #28
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ef0 <__locale_ctype_ptr_l>:
 8005ef0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005ef4:	4770      	bx	lr

08005ef6 <__localeconv_l>:
 8005ef6:	30f0      	adds	r0, #240	; 0xf0
 8005ef8:	4770      	bx	lr
	...

08005efc <_localeconv_r>:
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <_localeconv_r+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a18      	ldr	r0, [r3, #32]
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <_localeconv_r+0x18>)
 8005f04:	2800      	cmp	r0, #0
 8005f06:	bf08      	it	eq
 8005f08:	4618      	moveq	r0, r3
 8005f0a:	30f0      	adds	r0, #240	; 0xf0
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	20000070 	.word	0x20000070

08005f18 <malloc>:
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <malloc+0xc>)
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f000 bc75 	b.w	800680c <_malloc_r>
 8005f22:	bf00      	nop
 8005f24:	2000000c 	.word	0x2000000c

08005f28 <__ascii_mbtowc>:
 8005f28:	b082      	sub	sp, #8
 8005f2a:	b901      	cbnz	r1, 8005f2e <__ascii_mbtowc+0x6>
 8005f2c:	a901      	add	r1, sp, #4
 8005f2e:	b142      	cbz	r2, 8005f42 <__ascii_mbtowc+0x1a>
 8005f30:	b14b      	cbz	r3, 8005f46 <__ascii_mbtowc+0x1e>
 8005f32:	7813      	ldrb	r3, [r2, #0]
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	1c10      	adds	r0, r2, #0
 8005f3a:	bf18      	it	ne
 8005f3c:	2001      	movne	r0, #1
 8005f3e:	b002      	add	sp, #8
 8005f40:	4770      	bx	lr
 8005f42:	4610      	mov	r0, r2
 8005f44:	e7fb      	b.n	8005f3e <__ascii_mbtowc+0x16>
 8005f46:	f06f 0001 	mvn.w	r0, #1
 8005f4a:	e7f8      	b.n	8005f3e <__ascii_mbtowc+0x16>

08005f4c <memchr>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	b2c9      	uxtb	r1, r1
 8005f50:	4402      	add	r2, r0
 8005f52:	4290      	cmp	r0, r2
 8005f54:	4603      	mov	r3, r0
 8005f56:	d101      	bne.n	8005f5c <memchr+0x10>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e003      	b.n	8005f64 <memchr+0x18>
 8005f5c:	781c      	ldrb	r4, [r3, #0]
 8005f5e:	3001      	adds	r0, #1
 8005f60:	428c      	cmp	r4, r1
 8005f62:	d1f6      	bne.n	8005f52 <memchr+0x6>
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd10      	pop	{r4, pc}

08005f68 <_Balloc>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	460e      	mov	r6, r1
 8005f70:	b93d      	cbnz	r5, 8005f82 <_Balloc+0x1a>
 8005f72:	2010      	movs	r0, #16
 8005f74:	f7ff ffd0 	bl	8005f18 <malloc>
 8005f78:	6260      	str	r0, [r4, #36]	; 0x24
 8005f7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f7e:	6005      	str	r5, [r0, #0]
 8005f80:	60c5      	str	r5, [r0, #12]
 8005f82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f84:	68eb      	ldr	r3, [r5, #12]
 8005f86:	b183      	cbz	r3, 8005faa <_Balloc+0x42>
 8005f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f90:	b9b8      	cbnz	r0, 8005fc2 <_Balloc+0x5a>
 8005f92:	2101      	movs	r1, #1
 8005f94:	fa01 f506 	lsl.w	r5, r1, r6
 8005f98:	1d6a      	adds	r2, r5, #5
 8005f9a:	0092      	lsls	r2, r2, #2
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fbdb 	bl	8006758 <_calloc_r>
 8005fa2:	b160      	cbz	r0, 8005fbe <_Balloc+0x56>
 8005fa4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005fa8:	e00e      	b.n	8005fc8 <_Balloc+0x60>
 8005faa:	2221      	movs	r2, #33	; 0x21
 8005fac:	2104      	movs	r1, #4
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 fbd2 	bl	8006758 <_calloc_r>
 8005fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb6:	60e8      	str	r0, [r5, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e4      	bne.n	8005f88 <_Balloc+0x20>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	6802      	ldr	r2, [r0, #0]
 8005fc4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fce:	e7f7      	b.n	8005fc0 <_Balloc+0x58>

08005fd0 <_Bfree>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	b93c      	cbnz	r4, 8005fea <_Bfree+0x1a>
 8005fda:	2010      	movs	r0, #16
 8005fdc:	f7ff ff9c 	bl	8005f18 <malloc>
 8005fe0:	6270      	str	r0, [r6, #36]	; 0x24
 8005fe2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe6:	6004      	str	r4, [r0, #0]
 8005fe8:	60c4      	str	r4, [r0, #12]
 8005fea:	b13d      	cbz	r5, 8005ffc <_Bfree+0x2c>
 8005fec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005fee:	686a      	ldr	r2, [r5, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff6:	6029      	str	r1, [r5, #0]
 8005ff8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}

08005ffe <__multadd>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	4606      	mov	r6, r0
 8006006:	460c      	mov	r4, r1
 8006008:	2300      	movs	r3, #0
 800600a:	690d      	ldr	r5, [r1, #16]
 800600c:	f101 0c14 	add.w	ip, r1, #20
 8006010:	f8dc 0000 	ldr.w	r0, [ip]
 8006014:	3301      	adds	r3, #1
 8006016:	b281      	uxth	r1, r0
 8006018:	fb02 7101 	mla	r1, r2, r1, r7
 800601c:	0c00      	lsrs	r0, r0, #16
 800601e:	0c0f      	lsrs	r7, r1, #16
 8006020:	fb02 7000 	mla	r0, r2, r0, r7
 8006024:	b289      	uxth	r1, r1
 8006026:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800602a:	429d      	cmp	r5, r3
 800602c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006030:	f84c 1b04 	str.w	r1, [ip], #4
 8006034:	dcec      	bgt.n	8006010 <__multadd+0x12>
 8006036:	b1d7      	cbz	r7, 800606e <__multadd+0x70>
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	42ab      	cmp	r3, r5
 800603c:	dc12      	bgt.n	8006064 <__multadd+0x66>
 800603e:	6861      	ldr	r1, [r4, #4]
 8006040:	4630      	mov	r0, r6
 8006042:	3101      	adds	r1, #1
 8006044:	f7ff ff90 	bl	8005f68 <_Balloc>
 8006048:	4680      	mov	r8, r0
 800604a:	6922      	ldr	r2, [r4, #16]
 800604c:	f104 010c 	add.w	r1, r4, #12
 8006050:	3202      	adds	r2, #2
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	300c      	adds	r0, #12
 8006056:	f7fd f877 	bl	8003148 <memcpy>
 800605a:	4621      	mov	r1, r4
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff ffb7 	bl	8005fd0 <_Bfree>
 8006062:	4644      	mov	r4, r8
 8006064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006068:	3501      	adds	r5, #1
 800606a:	615f      	str	r7, [r3, #20]
 800606c:	6125      	str	r5, [r4, #16]
 800606e:	4620      	mov	r0, r4
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006074 <__s2b>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	4615      	mov	r5, r2
 800607a:	2209      	movs	r2, #9
 800607c:	461f      	mov	r7, r3
 800607e:	3308      	adds	r3, #8
 8006080:	460c      	mov	r4, r1
 8006082:	fb93 f3f2 	sdiv	r3, r3, r2
 8006086:	4606      	mov	r6, r0
 8006088:	2201      	movs	r2, #1
 800608a:	2100      	movs	r1, #0
 800608c:	429a      	cmp	r2, r3
 800608e:	db20      	blt.n	80060d2 <__s2b+0x5e>
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ff69 	bl	8005f68 <_Balloc>
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	2d09      	cmp	r5, #9
 800609a:	6143      	str	r3, [r0, #20]
 800609c:	f04f 0301 	mov.w	r3, #1
 80060a0:	6103      	str	r3, [r0, #16]
 80060a2:	dd19      	ble.n	80060d8 <__s2b+0x64>
 80060a4:	f104 0809 	add.w	r8, r4, #9
 80060a8:	46c1      	mov	r9, r8
 80060aa:	442c      	add	r4, r5
 80060ac:	f819 3b01 	ldrb.w	r3, [r9], #1
 80060b0:	4601      	mov	r1, r0
 80060b2:	3b30      	subs	r3, #48	; 0x30
 80060b4:	220a      	movs	r2, #10
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ffa1 	bl	8005ffe <__multadd>
 80060bc:	45a1      	cmp	r9, r4
 80060be:	d1f5      	bne.n	80060ac <__s2b+0x38>
 80060c0:	eb08 0405 	add.w	r4, r8, r5
 80060c4:	3c08      	subs	r4, #8
 80060c6:	1b2d      	subs	r5, r5, r4
 80060c8:	1963      	adds	r3, r4, r5
 80060ca:	42bb      	cmp	r3, r7
 80060cc:	db07      	blt.n	80060de <__s2b+0x6a>
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	0052      	lsls	r2, r2, #1
 80060d4:	3101      	adds	r1, #1
 80060d6:	e7d9      	b.n	800608c <__s2b+0x18>
 80060d8:	340a      	adds	r4, #10
 80060da:	2509      	movs	r5, #9
 80060dc:	e7f3      	b.n	80060c6 <__s2b+0x52>
 80060de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060e2:	4601      	mov	r1, r0
 80060e4:	3b30      	subs	r3, #48	; 0x30
 80060e6:	220a      	movs	r2, #10
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ff88 	bl	8005ffe <__multadd>
 80060ee:	e7eb      	b.n	80060c8 <__s2b+0x54>

080060f0 <__hi0bits>:
 80060f0:	0c02      	lsrs	r2, r0, #16
 80060f2:	0412      	lsls	r2, r2, #16
 80060f4:	4603      	mov	r3, r0
 80060f6:	b9b2      	cbnz	r2, 8006126 <__hi0bits+0x36>
 80060f8:	0403      	lsls	r3, r0, #16
 80060fa:	2010      	movs	r0, #16
 80060fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006100:	bf04      	itt	eq
 8006102:	021b      	lsleq	r3, r3, #8
 8006104:	3008      	addeq	r0, #8
 8006106:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800610a:	bf04      	itt	eq
 800610c:	011b      	lsleq	r3, r3, #4
 800610e:	3004      	addeq	r0, #4
 8006110:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006114:	bf04      	itt	eq
 8006116:	009b      	lsleq	r3, r3, #2
 8006118:	3002      	addeq	r0, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	db06      	blt.n	800612c <__hi0bits+0x3c>
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	d503      	bpl.n	800612a <__hi0bits+0x3a>
 8006122:	3001      	adds	r0, #1
 8006124:	4770      	bx	lr
 8006126:	2000      	movs	r0, #0
 8006128:	e7e8      	b.n	80060fc <__hi0bits+0xc>
 800612a:	2020      	movs	r0, #32
 800612c:	4770      	bx	lr

0800612e <__lo0bits>:
 800612e:	6803      	ldr	r3, [r0, #0]
 8006130:	4601      	mov	r1, r0
 8006132:	f013 0207 	ands.w	r2, r3, #7
 8006136:	d00b      	beq.n	8006150 <__lo0bits+0x22>
 8006138:	07da      	lsls	r2, r3, #31
 800613a:	d423      	bmi.n	8006184 <__lo0bits+0x56>
 800613c:	0798      	lsls	r0, r3, #30
 800613e:	bf49      	itett	mi
 8006140:	085b      	lsrmi	r3, r3, #1
 8006142:	089b      	lsrpl	r3, r3, #2
 8006144:	2001      	movmi	r0, #1
 8006146:	600b      	strmi	r3, [r1, #0]
 8006148:	bf5c      	itt	pl
 800614a:	600b      	strpl	r3, [r1, #0]
 800614c:	2002      	movpl	r0, #2
 800614e:	4770      	bx	lr
 8006150:	b298      	uxth	r0, r3
 8006152:	b9a8      	cbnz	r0, 8006180 <__lo0bits+0x52>
 8006154:	2010      	movs	r0, #16
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	f013 0fff 	tst.w	r3, #255	; 0xff
 800615c:	bf04      	itt	eq
 800615e:	0a1b      	lsreq	r3, r3, #8
 8006160:	3008      	addeq	r0, #8
 8006162:	071a      	lsls	r2, r3, #28
 8006164:	bf04      	itt	eq
 8006166:	091b      	lsreq	r3, r3, #4
 8006168:	3004      	addeq	r0, #4
 800616a:	079a      	lsls	r2, r3, #30
 800616c:	bf04      	itt	eq
 800616e:	089b      	lsreq	r3, r3, #2
 8006170:	3002      	addeq	r0, #2
 8006172:	07da      	lsls	r2, r3, #31
 8006174:	d402      	bmi.n	800617c <__lo0bits+0x4e>
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	d006      	beq.n	8006188 <__lo0bits+0x5a>
 800617a:	3001      	adds	r0, #1
 800617c:	600b      	str	r3, [r1, #0]
 800617e:	4770      	bx	lr
 8006180:	4610      	mov	r0, r2
 8006182:	e7e9      	b.n	8006158 <__lo0bits+0x2a>
 8006184:	2000      	movs	r0, #0
 8006186:	4770      	bx	lr
 8006188:	2020      	movs	r0, #32
 800618a:	4770      	bx	lr

0800618c <__i2b>:
 800618c:	b510      	push	{r4, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	2101      	movs	r1, #1
 8006192:	f7ff fee9 	bl	8005f68 <_Balloc>
 8006196:	2201      	movs	r2, #1
 8006198:	6144      	str	r4, [r0, #20]
 800619a:	6102      	str	r2, [r0, #16]
 800619c:	bd10      	pop	{r4, pc}

0800619e <__multiply>:
 800619e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a2:	4614      	mov	r4, r2
 80061a4:	690a      	ldr	r2, [r1, #16]
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	4688      	mov	r8, r1
 80061aa:	429a      	cmp	r2, r3
 80061ac:	bfbe      	ittt	lt
 80061ae:	460b      	movlt	r3, r1
 80061b0:	46a0      	movlt	r8, r4
 80061b2:	461c      	movlt	r4, r3
 80061b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061c4:	eb07 0609 	add.w	r6, r7, r9
 80061c8:	42b3      	cmp	r3, r6
 80061ca:	bfb8      	it	lt
 80061cc:	3101      	addlt	r1, #1
 80061ce:	f7ff fecb 	bl	8005f68 <_Balloc>
 80061d2:	f100 0514 	add.w	r5, r0, #20
 80061d6:	462b      	mov	r3, r5
 80061d8:	2200      	movs	r2, #0
 80061da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80061de:	4573      	cmp	r3, lr
 80061e0:	d316      	bcc.n	8006210 <__multiply+0x72>
 80061e2:	f104 0214 	add.w	r2, r4, #20
 80061e6:	f108 0114 	add.w	r1, r8, #20
 80061ea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	9b00      	ldr	r3, [sp, #0]
 80061f6:	9201      	str	r2, [sp, #4]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d80c      	bhi.n	8006216 <__multiply+0x78>
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	dd03      	ble.n	8006208 <__multiply+0x6a>
 8006200:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05d      	beq.n	80062c4 <__multiply+0x126>
 8006208:	6106      	str	r6, [r0, #16]
 800620a:	b003      	add	sp, #12
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	f843 2b04 	str.w	r2, [r3], #4
 8006214:	e7e3      	b.n	80061de <__multiply+0x40>
 8006216:	f8b2 b000 	ldrh.w	fp, [r2]
 800621a:	f1bb 0f00 	cmp.w	fp, #0
 800621e:	d023      	beq.n	8006268 <__multiply+0xca>
 8006220:	4689      	mov	r9, r1
 8006222:	46ac      	mov	ip, r5
 8006224:	f04f 0800 	mov.w	r8, #0
 8006228:	f859 4b04 	ldr.w	r4, [r9], #4
 800622c:	f8dc a000 	ldr.w	sl, [ip]
 8006230:	b2a3      	uxth	r3, r4
 8006232:	fa1f fa8a 	uxth.w	sl, sl
 8006236:	fb0b a303 	mla	r3, fp, r3, sl
 800623a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800623e:	f8dc 4000 	ldr.w	r4, [ip]
 8006242:	4443      	add	r3, r8
 8006244:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006248:	fb0b 840a 	mla	r4, fp, sl, r8
 800624c:	46e2      	mov	sl, ip
 800624e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006258:	454f      	cmp	r7, r9
 800625a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800625e:	f84a 3b04 	str.w	r3, [sl], #4
 8006262:	d82b      	bhi.n	80062bc <__multiply+0x11e>
 8006264:	f8cc 8004 	str.w	r8, [ip, #4]
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	3204      	adds	r2, #4
 800626c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006270:	f1ba 0f00 	cmp.w	sl, #0
 8006274:	d020      	beq.n	80062b8 <__multiply+0x11a>
 8006276:	4689      	mov	r9, r1
 8006278:	46a8      	mov	r8, r5
 800627a:	f04f 0b00 	mov.w	fp, #0
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	f8b9 c000 	ldrh.w	ip, [r9]
 8006284:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006288:	b29b      	uxth	r3, r3
 800628a:	fb0a 440c 	mla	r4, sl, ip, r4
 800628e:	46c4      	mov	ip, r8
 8006290:	445c      	add	r4, fp
 8006292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006296:	f84c 3b04 	str.w	r3, [ip], #4
 800629a:	f859 3b04 	ldr.w	r3, [r9], #4
 800629e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	fb0a b303 	mla	r3, sl, r3, fp
 80062a8:	454f      	cmp	r7, r9
 80062aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80062b2:	d805      	bhi.n	80062c0 <__multiply+0x122>
 80062b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80062b8:	3504      	adds	r5, #4
 80062ba:	e79b      	b.n	80061f4 <__multiply+0x56>
 80062bc:	46d4      	mov	ip, sl
 80062be:	e7b3      	b.n	8006228 <__multiply+0x8a>
 80062c0:	46e0      	mov	r8, ip
 80062c2:	e7dd      	b.n	8006280 <__multiply+0xe2>
 80062c4:	3e01      	subs	r6, #1
 80062c6:	e799      	b.n	80061fc <__multiply+0x5e>

080062c8 <__pow5mult>:
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	4615      	mov	r5, r2
 80062ce:	f012 0203 	ands.w	r2, r2, #3
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	d007      	beq.n	80062e8 <__pow5mult+0x20>
 80062d8:	4c21      	ldr	r4, [pc, #132]	; (8006360 <__pow5mult+0x98>)
 80062da:	3a01      	subs	r2, #1
 80062dc:	2300      	movs	r3, #0
 80062de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062e2:	f7ff fe8c 	bl	8005ffe <__multadd>
 80062e6:	4607      	mov	r7, r0
 80062e8:	10ad      	asrs	r5, r5, #2
 80062ea:	d035      	beq.n	8006358 <__pow5mult+0x90>
 80062ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062ee:	b93c      	cbnz	r4, 8006300 <__pow5mult+0x38>
 80062f0:	2010      	movs	r0, #16
 80062f2:	f7ff fe11 	bl	8005f18 <malloc>
 80062f6:	6270      	str	r0, [r6, #36]	; 0x24
 80062f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062fc:	6004      	str	r4, [r0, #0]
 80062fe:	60c4      	str	r4, [r0, #12]
 8006300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006308:	b94c      	cbnz	r4, 800631e <__pow5mult+0x56>
 800630a:	f240 2171 	movw	r1, #625	; 0x271
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ff3c 	bl	800618c <__i2b>
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	f8c8 0008 	str.w	r0, [r8, #8]
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	f04f 0800 	mov.w	r8, #0
 8006322:	07eb      	lsls	r3, r5, #31
 8006324:	d50a      	bpl.n	800633c <__pow5mult+0x74>
 8006326:	4639      	mov	r1, r7
 8006328:	4622      	mov	r2, r4
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ff37 	bl	800619e <__multiply>
 8006330:	4681      	mov	r9, r0
 8006332:	4639      	mov	r1, r7
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff fe4b 	bl	8005fd0 <_Bfree>
 800633a:	464f      	mov	r7, r9
 800633c:	106d      	asrs	r5, r5, #1
 800633e:	d00b      	beq.n	8006358 <__pow5mult+0x90>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	b938      	cbnz	r0, 8006354 <__pow5mult+0x8c>
 8006344:	4622      	mov	r2, r4
 8006346:	4621      	mov	r1, r4
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ff28 	bl	800619e <__multiply>
 800634e:	6020      	str	r0, [r4, #0]
 8006350:	f8c0 8000 	str.w	r8, [r0]
 8006354:	4604      	mov	r4, r0
 8006356:	e7e4      	b.n	8006322 <__pow5mult+0x5a>
 8006358:	4638      	mov	r0, r7
 800635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800635e:	bf00      	nop
 8006360:	08006f48 	.word	0x08006f48

08006364 <__lshift>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	460c      	mov	r4, r1
 800636a:	4607      	mov	r7, r0
 800636c:	4616      	mov	r6, r2
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006374:	eb0a 0903 	add.w	r9, sl, r3
 8006378:	6849      	ldr	r1, [r1, #4]
 800637a:	68a3      	ldr	r3, [r4, #8]
 800637c:	f109 0501 	add.w	r5, r9, #1
 8006380:	42ab      	cmp	r3, r5
 8006382:	db32      	blt.n	80063ea <__lshift+0x86>
 8006384:	4638      	mov	r0, r7
 8006386:	f7ff fdef 	bl	8005f68 <_Balloc>
 800638a:	2300      	movs	r3, #0
 800638c:	4680      	mov	r8, r0
 800638e:	461a      	mov	r2, r3
 8006390:	f100 0114 	add.w	r1, r0, #20
 8006394:	4553      	cmp	r3, sl
 8006396:	db2b      	blt.n	80063f0 <__lshift+0x8c>
 8006398:	6920      	ldr	r0, [r4, #16]
 800639a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800639e:	f104 0314 	add.w	r3, r4, #20
 80063a2:	f016 021f 	ands.w	r2, r6, #31
 80063a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063ae:	d025      	beq.n	80063fc <__lshift+0x98>
 80063b0:	2000      	movs	r0, #0
 80063b2:	f1c2 0e20 	rsb	lr, r2, #32
 80063b6:	468a      	mov	sl, r1
 80063b8:	681e      	ldr	r6, [r3, #0]
 80063ba:	4096      	lsls	r6, r2
 80063bc:	4330      	orrs	r0, r6
 80063be:	f84a 0b04 	str.w	r0, [sl], #4
 80063c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80063c6:	459c      	cmp	ip, r3
 80063c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80063cc:	d814      	bhi.n	80063f8 <__lshift+0x94>
 80063ce:	6048      	str	r0, [r1, #4]
 80063d0:	b108      	cbz	r0, 80063d6 <__lshift+0x72>
 80063d2:	f109 0502 	add.w	r5, r9, #2
 80063d6:	3d01      	subs	r5, #1
 80063d8:	4638      	mov	r0, r7
 80063da:	f8c8 5010 	str.w	r5, [r8, #16]
 80063de:	4621      	mov	r1, r4
 80063e0:	f7ff fdf6 	bl	8005fd0 <_Bfree>
 80063e4:	4640      	mov	r0, r8
 80063e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ea:	3101      	adds	r1, #1
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	e7c7      	b.n	8006380 <__lshift+0x1c>
 80063f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063f4:	3301      	adds	r3, #1
 80063f6:	e7cd      	b.n	8006394 <__lshift+0x30>
 80063f8:	4651      	mov	r1, sl
 80063fa:	e7dc      	b.n	80063b6 <__lshift+0x52>
 80063fc:	3904      	subs	r1, #4
 80063fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006402:	459c      	cmp	ip, r3
 8006404:	f841 2f04 	str.w	r2, [r1, #4]!
 8006408:	d8f9      	bhi.n	80063fe <__lshift+0x9a>
 800640a:	e7e4      	b.n	80063d6 <__lshift+0x72>

0800640c <__mcmp>:
 800640c:	6903      	ldr	r3, [r0, #16]
 800640e:	690a      	ldr	r2, [r1, #16]
 8006410:	b530      	push	{r4, r5, lr}
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	d10c      	bne.n	8006430 <__mcmp+0x24>
 8006416:	0092      	lsls	r2, r2, #2
 8006418:	3014      	adds	r0, #20
 800641a:	3114      	adds	r1, #20
 800641c:	1884      	adds	r4, r0, r2
 800641e:	4411      	add	r1, r2
 8006420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006428:	4295      	cmp	r5, r2
 800642a:	d003      	beq.n	8006434 <__mcmp+0x28>
 800642c:	d305      	bcc.n	800643a <__mcmp+0x2e>
 800642e:	2301      	movs	r3, #1
 8006430:	4618      	mov	r0, r3
 8006432:	bd30      	pop	{r4, r5, pc}
 8006434:	42a0      	cmp	r0, r4
 8006436:	d3f3      	bcc.n	8006420 <__mcmp+0x14>
 8006438:	e7fa      	b.n	8006430 <__mcmp+0x24>
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	e7f7      	b.n	8006430 <__mcmp+0x24>

08006440 <__mdiff>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	460d      	mov	r5, r1
 8006446:	4607      	mov	r7, r0
 8006448:	4611      	mov	r1, r2
 800644a:	4628      	mov	r0, r5
 800644c:	4614      	mov	r4, r2
 800644e:	f7ff ffdd 	bl	800640c <__mcmp>
 8006452:	1e06      	subs	r6, r0, #0
 8006454:	d108      	bne.n	8006468 <__mdiff+0x28>
 8006456:	4631      	mov	r1, r6
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff fd85 	bl	8005f68 <_Balloc>
 800645e:	2301      	movs	r3, #1
 8006460:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	bfa4      	itt	ge
 800646a:	4623      	movge	r3, r4
 800646c:	462c      	movge	r4, r5
 800646e:	4638      	mov	r0, r7
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	bfa6      	itte	ge
 8006474:	461d      	movge	r5, r3
 8006476:	2600      	movge	r6, #0
 8006478:	2601      	movlt	r6, #1
 800647a:	f7ff fd75 	bl	8005f68 <_Balloc>
 800647e:	f04f 0e00 	mov.w	lr, #0
 8006482:	60c6      	str	r6, [r0, #12]
 8006484:	692b      	ldr	r3, [r5, #16]
 8006486:	6926      	ldr	r6, [r4, #16]
 8006488:	f104 0214 	add.w	r2, r4, #20
 800648c:	f105 0914 	add.w	r9, r5, #20
 8006490:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006494:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006498:	f100 0114 	add.w	r1, r0, #20
 800649c:	f852 ab04 	ldr.w	sl, [r2], #4
 80064a0:	f859 5b04 	ldr.w	r5, [r9], #4
 80064a4:	fa1f f38a 	uxth.w	r3, sl
 80064a8:	4473      	add	r3, lr
 80064aa:	b2ac      	uxth	r4, r5
 80064ac:	1b1b      	subs	r3, r3, r4
 80064ae:	0c2c      	lsrs	r4, r5, #16
 80064b0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80064b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80064be:	45c8      	cmp	r8, r9
 80064c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80064c4:	4694      	mov	ip, r2
 80064c6:	f841 4b04 	str.w	r4, [r1], #4
 80064ca:	d8e7      	bhi.n	800649c <__mdiff+0x5c>
 80064cc:	45bc      	cmp	ip, r7
 80064ce:	d304      	bcc.n	80064da <__mdiff+0x9a>
 80064d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064d4:	b183      	cbz	r3, 80064f8 <__mdiff+0xb8>
 80064d6:	6106      	str	r6, [r0, #16]
 80064d8:	e7c4      	b.n	8006464 <__mdiff+0x24>
 80064da:	f85c 4b04 	ldr.w	r4, [ip], #4
 80064de:	b2a2      	uxth	r2, r4
 80064e0:	4472      	add	r2, lr
 80064e2:	1413      	asrs	r3, r2, #16
 80064e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064e8:	b292      	uxth	r2, r2
 80064ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80064f2:	f841 2b04 	str.w	r2, [r1], #4
 80064f6:	e7e9      	b.n	80064cc <__mdiff+0x8c>
 80064f8:	3e01      	subs	r6, #1
 80064fa:	e7e9      	b.n	80064d0 <__mdiff+0x90>

080064fc <__ulp>:
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <__ulp+0x44>)
 80064fe:	400b      	ands	r3, r1
 8006500:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd02      	ble.n	800650e <__ulp+0x12>
 8006508:	2000      	movs	r0, #0
 800650a:	4619      	mov	r1, r3
 800650c:	4770      	bx	lr
 800650e:	425b      	negs	r3, r3
 8006510:	151b      	asrs	r3, r3, #20
 8006512:	2b13      	cmp	r3, #19
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	dc04      	bgt.n	8006528 <__ulp+0x2c>
 800651e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006522:	fa42 f103 	asr.w	r1, r2, r3
 8006526:	4770      	bx	lr
 8006528:	2201      	movs	r2, #1
 800652a:	3b14      	subs	r3, #20
 800652c:	2b1e      	cmp	r3, #30
 800652e:	bfce      	itee	gt
 8006530:	4613      	movgt	r3, r2
 8006532:	f1c3 031f 	rsble	r3, r3, #31
 8006536:	fa02 f303 	lslle.w	r3, r2, r3
 800653a:	4618      	mov	r0, r3
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	7ff00000 	.word	0x7ff00000

08006544 <__b2d>:
 8006544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006548:	6907      	ldr	r7, [r0, #16]
 800654a:	f100 0914 	add.w	r9, r0, #20
 800654e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006552:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006556:	f1a7 0804 	sub.w	r8, r7, #4
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff fdc8 	bl	80060f0 <__hi0bits>
 8006560:	f1c0 0320 	rsb	r3, r0, #32
 8006564:	280a      	cmp	r0, #10
 8006566:	600b      	str	r3, [r1, #0]
 8006568:	491e      	ldr	r1, [pc, #120]	; (80065e4 <__b2d+0xa0>)
 800656a:	dc17      	bgt.n	800659c <__b2d+0x58>
 800656c:	45c1      	cmp	r9, r8
 800656e:	bf28      	it	cs
 8006570:	2200      	movcs	r2, #0
 8006572:	f1c0 0c0b 	rsb	ip, r0, #11
 8006576:	fa26 f30c 	lsr.w	r3, r6, ip
 800657a:	bf38      	it	cc
 800657c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006580:	ea43 0501 	orr.w	r5, r3, r1
 8006584:	f100 0315 	add.w	r3, r0, #21
 8006588:	fa06 f303 	lsl.w	r3, r6, r3
 800658c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006590:	ea43 0402 	orr.w	r4, r3, r2
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659c:	45c1      	cmp	r9, r8
 800659e:	bf3a      	itte	cc
 80065a0:	f1a7 0808 	subcc.w	r8, r7, #8
 80065a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80065a8:	2200      	movcs	r2, #0
 80065aa:	f1b0 030b 	subs.w	r3, r0, #11
 80065ae:	d015      	beq.n	80065dc <__b2d+0x98>
 80065b0:	409e      	lsls	r6, r3
 80065b2:	f1c3 0720 	rsb	r7, r3, #32
 80065b6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80065ba:	fa22 f107 	lsr.w	r1, r2, r7
 80065be:	45c8      	cmp	r8, r9
 80065c0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80065c4:	ea46 0501 	orr.w	r5, r6, r1
 80065c8:	bf94      	ite	ls
 80065ca:	2100      	movls	r1, #0
 80065cc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80065d0:	fa02 f003 	lsl.w	r0, r2, r3
 80065d4:	40f9      	lsrs	r1, r7
 80065d6:	ea40 0401 	orr.w	r4, r0, r1
 80065da:	e7db      	b.n	8006594 <__b2d+0x50>
 80065dc:	ea46 0501 	orr.w	r5, r6, r1
 80065e0:	4614      	mov	r4, r2
 80065e2:	e7d7      	b.n	8006594 <__b2d+0x50>
 80065e4:	3ff00000 	.word	0x3ff00000

080065e8 <__d2b>:
 80065e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80065ec:	461c      	mov	r4, r3
 80065ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80065f2:	2101      	movs	r1, #1
 80065f4:	4690      	mov	r8, r2
 80065f6:	f7ff fcb7 	bl	8005f68 <_Balloc>
 80065fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80065fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006602:	4607      	mov	r7, r0
 8006604:	bb34      	cbnz	r4, 8006654 <__d2b+0x6c>
 8006606:	9201      	str	r2, [sp, #4]
 8006608:	f1b8 0200 	subs.w	r2, r8, #0
 800660c:	d027      	beq.n	800665e <__d2b+0x76>
 800660e:	a802      	add	r0, sp, #8
 8006610:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006614:	f7ff fd8b 	bl	800612e <__lo0bits>
 8006618:	9900      	ldr	r1, [sp, #0]
 800661a:	b1f0      	cbz	r0, 800665a <__d2b+0x72>
 800661c:	9a01      	ldr	r2, [sp, #4]
 800661e:	f1c0 0320 	rsb	r3, r0, #32
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	430b      	orrs	r3, r1
 8006628:	40c2      	lsrs	r2, r0
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	9201      	str	r2, [sp, #4]
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	2102      	movne	r1, #2
 8006636:	2101      	moveq	r1, #1
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	6139      	str	r1, [r7, #16]
 800663c:	b1c4      	cbz	r4, 8006670 <__d2b+0x88>
 800663e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006642:	4404      	add	r4, r0
 8006644:	6034      	str	r4, [r6, #0]
 8006646:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800664a:	6028      	str	r0, [r5, #0]
 800664c:	4638      	mov	r0, r7
 800664e:	b002      	add	sp, #8
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006658:	e7d5      	b.n	8006606 <__d2b+0x1e>
 800665a:	6179      	str	r1, [r7, #20]
 800665c:	e7e7      	b.n	800662e <__d2b+0x46>
 800665e:	a801      	add	r0, sp, #4
 8006660:	f7ff fd65 	bl	800612e <__lo0bits>
 8006664:	2101      	movs	r1, #1
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	6139      	str	r1, [r7, #16]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	3020      	adds	r0, #32
 800666e:	e7e5      	b.n	800663c <__d2b+0x54>
 8006670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006674:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006678:	6030      	str	r0, [r6, #0]
 800667a:	6918      	ldr	r0, [r3, #16]
 800667c:	f7ff fd38 	bl	80060f0 <__hi0bits>
 8006680:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006684:	e7e1      	b.n	800664a <__d2b+0x62>

08006686 <__ratio>:
 8006686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	4688      	mov	r8, r1
 800668c:	4669      	mov	r1, sp
 800668e:	4681      	mov	r9, r0
 8006690:	f7ff ff58 	bl	8006544 <__b2d>
 8006694:	468b      	mov	fp, r1
 8006696:	4606      	mov	r6, r0
 8006698:	460f      	mov	r7, r1
 800669a:	4640      	mov	r0, r8
 800669c:	a901      	add	r1, sp, #4
 800669e:	f7ff ff51 	bl	8006544 <__b2d>
 80066a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80066aa:	460d      	mov	r5, r1
 80066ac:	eba3 0c02 	sub.w	ip, r3, r2
 80066b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfd5      	itete	le
 80066be:	460a      	movle	r2, r1
 80066c0:	463a      	movgt	r2, r7
 80066c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80066c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80066ca:	bfd8      	it	le
 80066cc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80066d0:	462b      	mov	r3, r5
 80066d2:	4602      	mov	r2, r0
 80066d4:	4659      	mov	r1, fp
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7fa f84a 	bl	8000770 <__aeabi_ddiv>
 80066dc:	b003      	add	sp, #12
 80066de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066e2 <__copybits>:
 80066e2:	3901      	subs	r1, #1
 80066e4:	b510      	push	{r4, lr}
 80066e6:	1149      	asrs	r1, r1, #5
 80066e8:	6914      	ldr	r4, [r2, #16]
 80066ea:	3101      	adds	r1, #1
 80066ec:	f102 0314 	add.w	r3, r2, #20
 80066f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	4602      	mov	r2, r0
 80066fc:	d303      	bcc.n	8006706 <__copybits+0x24>
 80066fe:	2300      	movs	r3, #0
 8006700:	428a      	cmp	r2, r1
 8006702:	d305      	bcc.n	8006710 <__copybits+0x2e>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f853 2b04 	ldr.w	r2, [r3], #4
 800670a:	f840 2b04 	str.w	r2, [r0], #4
 800670e:	e7f3      	b.n	80066f8 <__copybits+0x16>
 8006710:	f842 3b04 	str.w	r3, [r2], #4
 8006714:	e7f4      	b.n	8006700 <__copybits+0x1e>

08006716 <__any_on>:
 8006716:	f100 0214 	add.w	r2, r0, #20
 800671a:	6900      	ldr	r0, [r0, #16]
 800671c:	114b      	asrs	r3, r1, #5
 800671e:	4298      	cmp	r0, r3
 8006720:	b510      	push	{r4, lr}
 8006722:	db11      	blt.n	8006748 <__any_on+0x32>
 8006724:	dd0a      	ble.n	800673c <__any_on+0x26>
 8006726:	f011 011f 	ands.w	r1, r1, #31
 800672a:	d007      	beq.n	800673c <__any_on+0x26>
 800672c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006730:	fa24 f001 	lsr.w	r0, r4, r1
 8006734:	fa00 f101 	lsl.w	r1, r0, r1
 8006738:	428c      	cmp	r4, r1
 800673a:	d10b      	bne.n	8006754 <__any_on+0x3e>
 800673c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006740:	4293      	cmp	r3, r2
 8006742:	d803      	bhi.n	800674c <__any_on+0x36>
 8006744:	2000      	movs	r0, #0
 8006746:	bd10      	pop	{r4, pc}
 8006748:	4603      	mov	r3, r0
 800674a:	e7f7      	b.n	800673c <__any_on+0x26>
 800674c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006750:	2900      	cmp	r1, #0
 8006752:	d0f5      	beq.n	8006740 <__any_on+0x2a>
 8006754:	2001      	movs	r0, #1
 8006756:	e7f6      	b.n	8006746 <__any_on+0x30>

08006758 <_calloc_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	fb02 f401 	mul.w	r4, r2, r1
 800675e:	4621      	mov	r1, r4
 8006760:	f000 f854 	bl	800680c <_malloc_r>
 8006764:	4605      	mov	r5, r0
 8006766:	b118      	cbz	r0, 8006770 <_calloc_r+0x18>
 8006768:	4622      	mov	r2, r4
 800676a:	2100      	movs	r1, #0
 800676c:	f7fc fcf7 	bl	800315e <memset>
 8006770:	4628      	mov	r0, r5
 8006772:	bd38      	pop	{r3, r4, r5, pc}

08006774 <_free_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4605      	mov	r5, r0
 8006778:	2900      	cmp	r1, #0
 800677a:	d043      	beq.n	8006804 <_free_r+0x90>
 800677c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006780:	1f0c      	subs	r4, r1, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfb8      	it	lt
 8006786:	18e4      	addlt	r4, r4, r3
 8006788:	f000 fa34 	bl	8006bf4 <__malloc_lock>
 800678c:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <_free_r+0x94>)
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	4610      	mov	r0, r2
 8006792:	b933      	cbnz	r3, 80067a2 <_free_r+0x2e>
 8006794:	6063      	str	r3, [r4, #4]
 8006796:	6014      	str	r4, [r2, #0]
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679e:	f000 ba2a 	b.w	8006bf6 <__malloc_unlock>
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	d90b      	bls.n	80067be <_free_r+0x4a>
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	1862      	adds	r2, r4, r1
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bf01      	itttt	eq
 80067ae:	681a      	ldreq	r2, [r3, #0]
 80067b0:	685b      	ldreq	r3, [r3, #4]
 80067b2:	1852      	addeq	r2, r2, r1
 80067b4:	6022      	streq	r2, [r4, #0]
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	6004      	str	r4, [r0, #0]
 80067ba:	e7ed      	b.n	8006798 <_free_r+0x24>
 80067bc:	4613      	mov	r3, r2
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	b10a      	cbz	r2, 80067c6 <_free_r+0x52>
 80067c2:	42a2      	cmp	r2, r4
 80067c4:	d9fa      	bls.n	80067bc <_free_r+0x48>
 80067c6:	6819      	ldr	r1, [r3, #0]
 80067c8:	1858      	adds	r0, r3, r1
 80067ca:	42a0      	cmp	r0, r4
 80067cc:	d10b      	bne.n	80067e6 <_free_r+0x72>
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	4401      	add	r1, r0
 80067d2:	1858      	adds	r0, r3, r1
 80067d4:	4282      	cmp	r2, r0
 80067d6:	6019      	str	r1, [r3, #0]
 80067d8:	d1de      	bne.n	8006798 <_free_r+0x24>
 80067da:	6810      	ldr	r0, [r2, #0]
 80067dc:	6852      	ldr	r2, [r2, #4]
 80067de:	4401      	add	r1, r0
 80067e0:	6019      	str	r1, [r3, #0]
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	e7d8      	b.n	8006798 <_free_r+0x24>
 80067e6:	d902      	bls.n	80067ee <_free_r+0x7a>
 80067e8:	230c      	movs	r3, #12
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	e7d4      	b.n	8006798 <_free_r+0x24>
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	1821      	adds	r1, r4, r0
 80067f2:	428a      	cmp	r2, r1
 80067f4:	bf01      	itttt	eq
 80067f6:	6811      	ldreq	r1, [r2, #0]
 80067f8:	6852      	ldreq	r2, [r2, #4]
 80067fa:	1809      	addeq	r1, r1, r0
 80067fc:	6021      	streq	r1, [r4, #0]
 80067fe:	6062      	str	r2, [r4, #4]
 8006800:	605c      	str	r4, [r3, #4]
 8006802:	e7c9      	b.n	8006798 <_free_r+0x24>
 8006804:	bd38      	pop	{r3, r4, r5, pc}
 8006806:	bf00      	nop
 8006808:	20000204 	.word	0x20000204

0800680c <_malloc_r>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	1ccd      	adds	r5, r1, #3
 8006810:	f025 0503 	bic.w	r5, r5, #3
 8006814:	3508      	adds	r5, #8
 8006816:	2d0c      	cmp	r5, #12
 8006818:	bf38      	it	cc
 800681a:	250c      	movcc	r5, #12
 800681c:	2d00      	cmp	r5, #0
 800681e:	4606      	mov	r6, r0
 8006820:	db01      	blt.n	8006826 <_malloc_r+0x1a>
 8006822:	42a9      	cmp	r1, r5
 8006824:	d903      	bls.n	800682e <_malloc_r+0x22>
 8006826:	230c      	movs	r3, #12
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	2000      	movs	r0, #0
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	f000 f9e1 	bl	8006bf4 <__malloc_lock>
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <_malloc_r+0xac>)
 8006834:	6814      	ldr	r4, [r2, #0]
 8006836:	4621      	mov	r1, r4
 8006838:	b991      	cbnz	r1, 8006860 <_malloc_r+0x54>
 800683a:	4c20      	ldr	r4, [pc, #128]	; (80068bc <_malloc_r+0xb0>)
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	b91b      	cbnz	r3, 8006848 <_malloc_r+0x3c>
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f98f 	bl	8006b64 <_sbrk_r>
 8006846:	6020      	str	r0, [r4, #0]
 8006848:	4629      	mov	r1, r5
 800684a:	4630      	mov	r0, r6
 800684c:	f000 f98a 	bl	8006b64 <_sbrk_r>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d124      	bne.n	800689e <_malloc_r+0x92>
 8006854:	230c      	movs	r3, #12
 8006856:	4630      	mov	r0, r6
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	f000 f9cc 	bl	8006bf6 <__malloc_unlock>
 800685e:	e7e4      	b.n	800682a <_malloc_r+0x1e>
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	1b5b      	subs	r3, r3, r5
 8006864:	d418      	bmi.n	8006898 <_malloc_r+0x8c>
 8006866:	2b0b      	cmp	r3, #11
 8006868:	d90f      	bls.n	800688a <_malloc_r+0x7e>
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	18cc      	adds	r4, r1, r3
 800686e:	50cd      	str	r5, [r1, r3]
 8006870:	4630      	mov	r0, r6
 8006872:	f000 f9c0 	bl	8006bf6 <__malloc_unlock>
 8006876:	f104 000b 	add.w	r0, r4, #11
 800687a:	1d23      	adds	r3, r4, #4
 800687c:	f020 0007 	bic.w	r0, r0, #7
 8006880:	1ac3      	subs	r3, r0, r3
 8006882:	d0d3      	beq.n	800682c <_malloc_r+0x20>
 8006884:	425a      	negs	r2, r3
 8006886:	50e2      	str	r2, [r4, r3]
 8006888:	e7d0      	b.n	800682c <_malloc_r+0x20>
 800688a:	684b      	ldr	r3, [r1, #4]
 800688c:	428c      	cmp	r4, r1
 800688e:	bf16      	itet	ne
 8006890:	6063      	strne	r3, [r4, #4]
 8006892:	6013      	streq	r3, [r2, #0]
 8006894:	460c      	movne	r4, r1
 8006896:	e7eb      	b.n	8006870 <_malloc_r+0x64>
 8006898:	460c      	mov	r4, r1
 800689a:	6849      	ldr	r1, [r1, #4]
 800689c:	e7cc      	b.n	8006838 <_malloc_r+0x2c>
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d005      	beq.n	80068b4 <_malloc_r+0xa8>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 f95a 	bl	8006b64 <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d0cf      	beq.n	8006854 <_malloc_r+0x48>
 80068b4:	6025      	str	r5, [r4, #0]
 80068b6:	e7db      	b.n	8006870 <_malloc_r+0x64>
 80068b8:	20000204 	.word	0x20000204
 80068bc:	20000208 	.word	0x20000208

080068c0 <__ssputs_r>:
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	688e      	ldr	r6, [r1, #8]
 80068c6:	4682      	mov	sl, r0
 80068c8:	429e      	cmp	r6, r3
 80068ca:	460c      	mov	r4, r1
 80068cc:	4690      	mov	r8, r2
 80068ce:	4699      	mov	r9, r3
 80068d0:	d837      	bhi.n	8006942 <__ssputs_r+0x82>
 80068d2:	898a      	ldrh	r2, [r1, #12]
 80068d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068d8:	d031      	beq.n	800693e <__ssputs_r+0x7e>
 80068da:	2302      	movs	r3, #2
 80068dc:	6825      	ldr	r5, [r4, #0]
 80068de:	6909      	ldr	r1, [r1, #16]
 80068e0:	1a6f      	subs	r7, r5, r1
 80068e2:	6965      	ldr	r5, [r4, #20]
 80068e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80068ec:	f109 0301 	add.w	r3, r9, #1
 80068f0:	443b      	add	r3, r7
 80068f2:	429d      	cmp	r5, r3
 80068f4:	bf38      	it	cc
 80068f6:	461d      	movcc	r5, r3
 80068f8:	0553      	lsls	r3, r2, #21
 80068fa:	d530      	bpl.n	800695e <__ssputs_r+0x9e>
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7ff ff85 	bl	800680c <_malloc_r>
 8006902:	4606      	mov	r6, r0
 8006904:	b950      	cbnz	r0, 800691c <__ssputs_r+0x5c>
 8006906:	230c      	movs	r3, #12
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	f8ca 3000 	str.w	r3, [sl]
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	463a      	mov	r2, r7
 800691e:	6921      	ldr	r1, [r4, #16]
 8006920:	f7fc fc12 	bl	8003148 <memcpy>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	6126      	str	r6, [r4, #16]
 8006932:	443e      	add	r6, r7
 8006934:	6026      	str	r6, [r4, #0]
 8006936:	464e      	mov	r6, r9
 8006938:	6165      	str	r5, [r4, #20]
 800693a:	1bed      	subs	r5, r5, r7
 800693c:	60a5      	str	r5, [r4, #8]
 800693e:	454e      	cmp	r6, r9
 8006940:	d900      	bls.n	8006944 <__ssputs_r+0x84>
 8006942:	464e      	mov	r6, r9
 8006944:	4632      	mov	r2, r6
 8006946:	4641      	mov	r1, r8
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	f000 f93a 	bl	8006bc2 <memmove>
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	2000      	movs	r0, #0
 8006952:	1b9b      	subs	r3, r3, r6
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	441e      	add	r6, r3
 800695a:	6026      	str	r6, [r4, #0]
 800695c:	e7dc      	b.n	8006918 <__ssputs_r+0x58>
 800695e:	462a      	mov	r2, r5
 8006960:	f000 f94a 	bl	8006bf8 <_realloc_r>
 8006964:	4606      	mov	r6, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d1e2      	bne.n	8006930 <__ssputs_r+0x70>
 800696a:	6921      	ldr	r1, [r4, #16]
 800696c:	4650      	mov	r0, sl
 800696e:	f7ff ff01 	bl	8006774 <_free_r>
 8006972:	e7c8      	b.n	8006906 <__ssputs_r+0x46>

08006974 <_svfiprintf_r>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	461d      	mov	r5, r3
 800697a:	898b      	ldrh	r3, [r1, #12]
 800697c:	b09d      	sub	sp, #116	; 0x74
 800697e:	061f      	lsls	r7, r3, #24
 8006980:	4680      	mov	r8, r0
 8006982:	460c      	mov	r4, r1
 8006984:	4616      	mov	r6, r2
 8006986:	d50f      	bpl.n	80069a8 <_svfiprintf_r+0x34>
 8006988:	690b      	ldr	r3, [r1, #16]
 800698a:	b96b      	cbnz	r3, 80069a8 <_svfiprintf_r+0x34>
 800698c:	2140      	movs	r1, #64	; 0x40
 800698e:	f7ff ff3d 	bl	800680c <_malloc_r>
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	6120      	str	r0, [r4, #16]
 8006996:	b928      	cbnz	r0, 80069a4 <_svfiprintf_r+0x30>
 8006998:	230c      	movs	r3, #12
 800699a:	f8c8 3000 	str.w	r3, [r8]
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	e0c8      	b.n	8006b36 <_svfiprintf_r+0x1c2>
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9309      	str	r3, [sp, #36]	; 0x24
 80069ac:	2320      	movs	r3, #32
 80069ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b2:	2330      	movs	r3, #48	; 0x30
 80069b4:	f04f 0b01 	mov.w	fp, #1
 80069b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069bc:	9503      	str	r5, [sp, #12]
 80069be:	4637      	mov	r7, r6
 80069c0:	463d      	mov	r5, r7
 80069c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069c6:	b10b      	cbz	r3, 80069cc <_svfiprintf_r+0x58>
 80069c8:	2b25      	cmp	r3, #37	; 0x25
 80069ca:	d13e      	bne.n	8006a4a <_svfiprintf_r+0xd6>
 80069cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80069d0:	d00b      	beq.n	80069ea <_svfiprintf_r+0x76>
 80069d2:	4653      	mov	r3, sl
 80069d4:	4632      	mov	r2, r6
 80069d6:	4621      	mov	r1, r4
 80069d8:	4640      	mov	r0, r8
 80069da:	f7ff ff71 	bl	80068c0 <__ssputs_r>
 80069de:	3001      	adds	r0, #1
 80069e0:	f000 80a4 	beq.w	8006b2c <_svfiprintf_r+0x1b8>
 80069e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e6:	4453      	add	r3, sl
 80069e8:	9309      	str	r3, [sp, #36]	; 0x24
 80069ea:	783b      	ldrb	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 809d 	beq.w	8006b2c <_svfiprintf_r+0x1b8>
 80069f2:	2300      	movs	r3, #0
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	9307      	str	r3, [sp, #28]
 8006a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a04:	931a      	str	r3, [sp, #104]	; 0x68
 8006a06:	462f      	mov	r7, r5
 8006a08:	2205      	movs	r2, #5
 8006a0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a0e:	4850      	ldr	r0, [pc, #320]	; (8006b50 <_svfiprintf_r+0x1dc>)
 8006a10:	f7ff fa9c 	bl	8005f4c <memchr>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	b9d0      	cbnz	r0, 8006a4e <_svfiprintf_r+0xda>
 8006a18:	06d9      	lsls	r1, r3, #27
 8006a1a:	bf44      	itt	mi
 8006a1c:	2220      	movmi	r2, #32
 8006a1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a22:	071a      	lsls	r2, r3, #28
 8006a24:	bf44      	itt	mi
 8006a26:	222b      	movmi	r2, #43	; 0x2b
 8006a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a2c:	782a      	ldrb	r2, [r5, #0]
 8006a2e:	2a2a      	cmp	r2, #42	; 0x2a
 8006a30:	d015      	beq.n	8006a5e <_svfiprintf_r+0xea>
 8006a32:	462f      	mov	r7, r5
 8006a34:	2000      	movs	r0, #0
 8006a36:	250a      	movs	r5, #10
 8006a38:	9a07      	ldr	r2, [sp, #28]
 8006a3a:	4639      	mov	r1, r7
 8006a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a40:	3b30      	subs	r3, #48	; 0x30
 8006a42:	2b09      	cmp	r3, #9
 8006a44:	d94d      	bls.n	8006ae2 <_svfiprintf_r+0x16e>
 8006a46:	b1b8      	cbz	r0, 8006a78 <_svfiprintf_r+0x104>
 8006a48:	e00f      	b.n	8006a6a <_svfiprintf_r+0xf6>
 8006a4a:	462f      	mov	r7, r5
 8006a4c:	e7b8      	b.n	80069c0 <_svfiprintf_r+0x4c>
 8006a4e:	4a40      	ldr	r2, [pc, #256]	; (8006b50 <_svfiprintf_r+0x1dc>)
 8006a50:	463d      	mov	r5, r7
 8006a52:	1a80      	subs	r0, r0, r2
 8006a54:	fa0b f000 	lsl.w	r0, fp, r0
 8006a58:	4318      	orrs	r0, r3
 8006a5a:	9004      	str	r0, [sp, #16]
 8006a5c:	e7d3      	b.n	8006a06 <_svfiprintf_r+0x92>
 8006a5e:	9a03      	ldr	r2, [sp, #12]
 8006a60:	1d11      	adds	r1, r2, #4
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	db01      	blt.n	8006a6e <_svfiprintf_r+0xfa>
 8006a6a:	9207      	str	r2, [sp, #28]
 8006a6c:	e004      	b.n	8006a78 <_svfiprintf_r+0x104>
 8006a6e:	4252      	negs	r2, r2
 8006a70:	f043 0302 	orr.w	r3, r3, #2
 8006a74:	9207      	str	r2, [sp, #28]
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	783b      	ldrb	r3, [r7, #0]
 8006a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a7c:	d10c      	bne.n	8006a98 <_svfiprintf_r+0x124>
 8006a7e:	787b      	ldrb	r3, [r7, #1]
 8006a80:	2b2a      	cmp	r3, #42	; 0x2a
 8006a82:	d133      	bne.n	8006aec <_svfiprintf_r+0x178>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	3702      	adds	r7, #2
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	9203      	str	r2, [sp, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bfb8      	it	lt
 8006a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	4d2e      	ldr	r5, [pc, #184]	; (8006b54 <_svfiprintf_r+0x1e0>)
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	7839      	ldrb	r1, [r7, #0]
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff fa54 	bl	8005f4c <memchr>
 8006aa4:	b138      	cbz	r0, 8006ab6 <_svfiprintf_r+0x142>
 8006aa6:	2340      	movs	r3, #64	; 0x40
 8006aa8:	1b40      	subs	r0, r0, r5
 8006aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	3701      	adds	r7, #1
 8006ab2:	4303      	orrs	r3, r0
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	7839      	ldrb	r1, [r7, #0]
 8006ab8:	2206      	movs	r2, #6
 8006aba:	4827      	ldr	r0, [pc, #156]	; (8006b58 <_svfiprintf_r+0x1e4>)
 8006abc:	1c7e      	adds	r6, r7, #1
 8006abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ac2:	f7ff fa43 	bl	8005f4c <memchr>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d038      	beq.n	8006b3c <_svfiprintf_r+0x1c8>
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <_svfiprintf_r+0x1e8>)
 8006acc:	bb13      	cbnz	r3, 8006b14 <_svfiprintf_r+0x1a0>
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	3307      	adds	r3, #7
 8006ad2:	f023 0307 	bic.w	r3, r3, #7
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	9303      	str	r3, [sp, #12]
 8006ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006adc:	444b      	add	r3, r9
 8006ade:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae0:	e76d      	b.n	80069be <_svfiprintf_r+0x4a>
 8006ae2:	fb05 3202 	mla	r2, r5, r2, r3
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	460f      	mov	r7, r1
 8006aea:	e7a6      	b.n	8006a3a <_svfiprintf_r+0xc6>
 8006aec:	2300      	movs	r3, #0
 8006aee:	250a      	movs	r5, #10
 8006af0:	4619      	mov	r1, r3
 8006af2:	3701      	adds	r7, #1
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	4638      	mov	r0, r7
 8006af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afc:	3a30      	subs	r2, #48	; 0x30
 8006afe:	2a09      	cmp	r2, #9
 8006b00:	d903      	bls.n	8006b0a <_svfiprintf_r+0x196>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c8      	beq.n	8006a98 <_svfiprintf_r+0x124>
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	e7c6      	b.n	8006a98 <_svfiprintf_r+0x124>
 8006b0a:	fb05 2101 	mla	r1, r5, r1, r2
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4607      	mov	r7, r0
 8006b12:	e7f0      	b.n	8006af6 <_svfiprintf_r+0x182>
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <_svfiprintf_r+0x1ec>)
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7fc fbb6 	bl	8003290 <_printf_float>
 8006b24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b28:	4681      	mov	r9, r0
 8006b2a:	d1d6      	bne.n	8006ada <_svfiprintf_r+0x166>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	065b      	lsls	r3, r3, #25
 8006b30:	f53f af35 	bmi.w	800699e <_svfiprintf_r+0x2a>
 8006b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b36:	b01d      	add	sp, #116	; 0x74
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4622      	mov	r2, r4
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <_svfiprintf_r+0x1ec>)
 8006b44:	a904      	add	r1, sp, #16
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7fc fe4e 	bl	80037e8 <_printf_i>
 8006b4c:	e7ea      	b.n	8006b24 <_svfiprintf_r+0x1b0>
 8006b4e:	bf00      	nop
 8006b50:	08006f54 	.word	0x08006f54
 8006b54:	08006f5a 	.word	0x08006f5a
 8006b58:	08006f5e 	.word	0x08006f5e
 8006b5c:	08003291 	.word	0x08003291
 8006b60:	080068c1 	.word	0x080068c1

08006b64 <_sbrk_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	2300      	movs	r3, #0
 8006b68:	4c05      	ldr	r4, [pc, #20]	; (8006b80 <_sbrk_r+0x1c>)
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	f7fa fbe2 	bl	8001338 <_sbrk>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_sbrk_r+0x1a>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_sbrk_r+0x1a>
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	20000384 	.word	0x20000384

08006b84 <strncmp>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	b16a      	cbz	r2, 8006ba4 <strncmp+0x20>
 8006b88:	3901      	subs	r1, #1
 8006b8a:	1884      	adds	r4, r0, r2
 8006b8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006b90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d103      	bne.n	8006ba0 <strncmp+0x1c>
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d001      	beq.n	8006ba0 <strncmp+0x1c>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f5      	bne.n	8006b8c <strncmp+0x8>
 8006ba0:	1a98      	subs	r0, r3, r2
 8006ba2:	bd10      	pop	{r4, pc}
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e7fc      	b.n	8006ba2 <strncmp+0x1e>

08006ba8 <__ascii_wctomb>:
 8006ba8:	b149      	cbz	r1, 8006bbe <__ascii_wctomb+0x16>
 8006baa:	2aff      	cmp	r2, #255	; 0xff
 8006bac:	bf8b      	itete	hi
 8006bae:	238a      	movhi	r3, #138	; 0x8a
 8006bb0:	700a      	strbls	r2, [r1, #0]
 8006bb2:	6003      	strhi	r3, [r0, #0]
 8006bb4:	2001      	movls	r0, #1
 8006bb6:	bf88      	it	hi
 8006bb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8006bbc:	4770      	bx	lr
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4770      	bx	lr

08006bc2 <memmove>:
 8006bc2:	4288      	cmp	r0, r1
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	eb01 0302 	add.w	r3, r1, r2
 8006bca:	d807      	bhi.n	8006bdc <memmove+0x1a>
 8006bcc:	1e42      	subs	r2, r0, #1
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	d00a      	beq.n	8006be8 <memmove+0x26>
 8006bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bda:	e7f8      	b.n	8006bce <memmove+0xc>
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d9f5      	bls.n	8006bcc <memmove+0xa>
 8006be0:	1881      	adds	r1, r0, r2
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	42d3      	cmn	r3, r2
 8006be6:	d100      	bne.n	8006bea <memmove+0x28>
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bf2:	e7f7      	b.n	8006be4 <memmove+0x22>

08006bf4 <__malloc_lock>:
 8006bf4:	4770      	bx	lr

08006bf6 <__malloc_unlock>:
 8006bf6:	4770      	bx	lr

08006bf8 <_realloc_r>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	460e      	mov	r6, r1
 8006c00:	b921      	cbnz	r1, 8006c0c <_realloc_r+0x14>
 8006c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c06:	4611      	mov	r1, r2
 8006c08:	f7ff be00 	b.w	800680c <_malloc_r>
 8006c0c:	b922      	cbnz	r2, 8006c18 <_realloc_r+0x20>
 8006c0e:	f7ff fdb1 	bl	8006774 <_free_r>
 8006c12:	4625      	mov	r5, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	f000 f814 	bl	8006c44 <_malloc_usable_size_r>
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d20f      	bcs.n	8006c40 <_realloc_r+0x48>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4638      	mov	r0, r7
 8006c24:	f7ff fdf2 	bl	800680c <_malloc_r>
 8006c28:	4605      	mov	r5, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d0f2      	beq.n	8006c14 <_realloc_r+0x1c>
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4622      	mov	r2, r4
 8006c32:	f7fc fa89 	bl	8003148 <memcpy>
 8006c36:	4631      	mov	r1, r6
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff fd9b 	bl	8006774 <_free_r>
 8006c3e:	e7e9      	b.n	8006c14 <_realloc_r+0x1c>
 8006c40:	4635      	mov	r5, r6
 8006c42:	e7e7      	b.n	8006c14 <_realloc_r+0x1c>

08006c44 <_malloc_usable_size_r>:
 8006c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c48:	1f18      	subs	r0, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bfbc      	itt	lt
 8006c4e:	580b      	ldrlt	r3, [r1, r0]
 8006c50:	18c0      	addlt	r0, r0, r3
 8006c52:	4770      	bx	lr

08006c54 <_init>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr

08006c60 <_fini>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr
